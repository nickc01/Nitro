id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
modifiers: {}
items:
- id: Nitro
  commentId: N:Nitro
  language: CSharp
  name:
    CSharp: Nitro
    VB: Nitro
  nameWithType:
    CSharp: Nitro
    VB: Nitro
  qualifiedName:
    CSharp: Nitro
    VB: Nitro
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Nitro.Collector
    commentId: T:Nitro.Collector
    language: CSharp
    name:
      CSharp: Collector
      VB: Collector
    nameWithType:
      CSharp: Collector
      VB: Collector
    qualifiedName:
      CSharp: Nitro.Collector
      VB: Nitro.Collector
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: Collector
      path: ''
      startLine: 59105
    summary: "\nUsed for collecting powerups\n"
    example: []
    syntax:
      content:
        CSharp: 'public abstract class Collector : MonoBehaviour, ICollector'
        VB: >-
          Public MustInherit Class Collector

              Inherits MonoBehaviour

              Implements ICollector
    inheritance:
    - System.Object
    implements:
    - Nitro.ICollector
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Nitro.Collector.CollectorEnabled
      commentId: P:Nitro.Collector.CollectorEnabled
      language: CSharp
      name:
        CSharp: CollectorEnabled
        VB: CollectorEnabled
      nameWithType:
        CSharp: Collector.CollectorEnabled
        VB: Collector.CollectorEnabled
      qualifiedName:
        CSharp: Nitro.Collector.CollectorEnabled
        VB: Nitro.Collector.CollectorEnabled
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: CollectorEnabled
        path: ''
        startLine: 59114
      summary: "\nIf this is set to true, the collector will be able to collect powerups\n"
      example: []
      syntax:
        content:
          CSharp: public bool CollectorEnabled { get; set; }
          VB: Public Property CollectorEnabled As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Nitro.Collector.CollectorEnabled*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Nitro.Collector.CollectOnContact
      commentId: P:Nitro.Collector.CollectOnContact
      language: CSharp
      name:
        CSharp: CollectOnContact
        VB: CollectOnContact
      nameWithType:
        CSharp: Collector.CollectOnContact
        VB: Collector.CollectOnContact
      qualifiedName:
        CSharp: Nitro.Collector.CollectOnContact
        VB: Nitro.Collector.CollectOnContact
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: CollectOnContact
        path: ''
        startLine: 59123
      summary: "\nIf set to true, all powerups that collide with this object will automatically be collected\n"
      example: []
      syntax:
        content:
          CSharp: public bool CollectOnContact { get; set; }
          VB: Public Property CollectOnContact As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Nitro.Collector.CollectOnContact*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Nitro.Collector.CanCollectPowerup(Nitro.IPowerup)
      commentId: M:Nitro.Collector.CanCollectPowerup(Nitro.IPowerup)
      language: CSharp
      name:
        CSharp: CanCollectPowerup(IPowerup)
        VB: CanCollectPowerup(IPowerup)
      nameWithType:
        CSharp: Collector.CanCollectPowerup(IPowerup)
        VB: Collector.CanCollectPowerup(IPowerup)
      qualifiedName:
        CSharp: Nitro.Collector.CanCollectPowerup(Nitro.IPowerup)
        VB: Nitro.Collector.CanCollectPowerup(Nitro.IPowerup)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: CanCollectPowerup
        path: ''
        startLine: 59130
      summary: "\nWhether the powerup can be collected or not\n"
      example: []
      syntax:
        content:
          CSharp: public abstract bool CanCollectPowerup(IPowerup powerup)
          VB: Public MustOverride Function CanCollectPowerup(powerup As IPowerup) As Boolean
        parameters:
        - id: powerup
          type: Nitro.IPowerup
          description: The powerup to test if it can be collected
        return:
          type: System.Boolean
          description: Returns whether or not the powerup can be picked up
      overload: Nitro.Collector.CanCollectPowerup*
      implements:
      - Nitro.ICollector.CanCollectPowerup(Nitro.IPowerup)
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
    - id: Nitro.Collector.OnCollect(Nitro.IPowerup)
      commentId: M:Nitro.Collector.OnCollect(Nitro.IPowerup)
      language: CSharp
      name:
        CSharp: OnCollect(IPowerup)
        VB: OnCollect(IPowerup)
      nameWithType:
        CSharp: Collector.OnCollect(IPowerup)
        VB: Collector.OnCollect(IPowerup)
      qualifiedName:
        CSharp: Nitro.Collector.OnCollect(Nitro.IPowerup)
        VB: Nitro.Collector.OnCollect(Nitro.IPowerup)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnCollect
        path: ''
        startLine: 59136
      summary: "\nA function that is triggered when a powerup is collected\n"
      example: []
      syntax:
        content:
          CSharp: protected abstract void OnCollect(IPowerup powerup)
          VB: Protected MustOverride Sub OnCollect(powerup As IPowerup)
        parameters:
        - id: powerup
          type: Nitro.IPowerup
          description: The powerup that has been collected
      overload: Nitro.Collector.OnCollect*
      modifiers:
        CSharp:
        - protected
        - abstract
        VB:
        - Protected
        - MustOverride
    - id: Nitro.Collector.Execute
      commentId: M:Nitro.Collector.Execute
      language: CSharp
      name:
        CSharp: Execute()
        VB: Execute()
      nameWithType:
        CSharp: Collector.Execute()
        VB: Collector.Execute()
      qualifiedName:
        CSharp: Nitro.Collector.Execute()
        VB: Nitro.Collector.Execute()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Execute
        path: ''
        startLine: 59141
      summary: "\nExecutes the powerup(s) that the collector has collected\n"
      example: []
      syntax:
        content:
          CSharp: public abstract void Execute()
          VB: Public MustOverride Sub Execute
      overload: Nitro.Collector.Execute*
      implements:
      - Nitro.ICollector.Execute
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
    - id: Nitro.Collector.PowerupCollectEvent
      commentId: F:Nitro.Collector.PowerupCollectEvent
      language: CSharp
      name:
        CSharp: PowerupCollectEvent
        VB: PowerupCollectEvent
      nameWithType:
        CSharp: Collector.PowerupCollectEvent
        VB: Collector.PowerupCollectEvent
      qualifiedName:
        CSharp: Nitro.Collector.PowerupCollectEvent
        VB: Nitro.Collector.PowerupCollectEvent
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: PowerupCollectEvent
        path: ''
        startLine: 59146
      summary: "\nAn event that is triggered when a powerup is collected\n"
      example: []
      syntax:
        content:
          CSharp: public UnityEvent<IPowerup> PowerupCollectEvent
          VB: Public PowerupCollectEvent As UnityEvent(Of IPowerup)
        return:
          type: Global.UnityEvent{Nitro.IPowerup}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.Collector.CollectPowerup(Nitro.IPowerup)
      commentId: M:Nitro.Collector.CollectPowerup(Nitro.IPowerup)
      language: CSharp
      name:
        CSharp: CollectPowerup(IPowerup)
        VB: CollectPowerup(IPowerup)
      nameWithType:
        CSharp: Collector.CollectPowerup(IPowerup)
        VB: Collector.CollectPowerup(IPowerup)
      qualifiedName:
        CSharp: Nitro.Collector.CollectPowerup(Nitro.IPowerup)
        VB: Nitro.Collector.CollectPowerup(Nitro.IPowerup)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: CollectPowerup
        path: ''
        startLine: 59153
      summary: "\nCollects a powerup\n"
      example: []
      syntax:
        content:
          CSharp: public bool CollectPowerup(IPowerup powerup)
          VB: Public Function CollectPowerup(powerup As IPowerup) As Boolean
        parameters:
        - id: powerup
          type: Nitro.IPowerup
          description: The powerup to collect
        return:
          type: System.Boolean
          description: Returns whether the collector was able to pick up the <xref href="Nitro.IPowerup" data-throw-if-not-resolved="false"></xref>
      overload: Nitro.Collector.CollectPowerup*
      implements:
      - Nitro.ICollector.CollectPowerup(Nitro.IPowerup)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Nitro.IPowerup: 
    - id: Nitro.Collector.OnTriggerEnter(Collider)
      commentId: M:Nitro.Collector.OnTriggerEnter(Collider)
      language: CSharp
      name:
        CSharp: OnTriggerEnter(Collider)
        VB: OnTriggerEnter(Collider)
      nameWithType:
        CSharp: Collector.OnTriggerEnter(Collider)
        VB: Collector.OnTriggerEnter(Collider)
      qualifiedName:
        CSharp: Nitro.Collector.OnTriggerEnter(Collider)
        VB: Nitro.Collector.OnTriggerEnter(Collider)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnTriggerEnter
        path: ''
        startLine: 59169
      syntax:
        content:
          CSharp: protected virtual void OnTriggerEnter(Collider other)
          VB: Protected Overridable Sub OnTriggerEnter(other As Collider)
        parameters:
        - id: other
          type: Global.Collider
      overload: Nitro.Collector.OnTriggerEnter*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Nitro.Collector.OnTriggerEnter2D(Collider2D)
      commentId: M:Nitro.Collector.OnTriggerEnter2D(Collider2D)
      language: CSharp
      name:
        CSharp: OnTriggerEnter2D(Collider2D)
        VB: OnTriggerEnter2D(Collider2D)
      nameWithType:
        CSharp: Collector.OnTriggerEnter2D(Collider2D)
        VB: Collector.OnTriggerEnter2D(Collider2D)
      qualifiedName:
        CSharp: Nitro.Collector.OnTriggerEnter2D(Collider2D)
        VB: Nitro.Collector.OnTriggerEnter2D(Collider2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnTriggerEnter2D
        path: ''
        startLine: 59181
      syntax:
        content:
          CSharp: protected virtual void OnTriggerEnter2D(Collider2D collision)
          VB: Protected Overridable Sub OnTriggerEnter2D(collision As Collider2D)
        parameters:
        - id: collision
          type: Global.Collider2D
      overload: Nitro.Collector.OnTriggerEnter2D*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Nitro.Collector.OnCollisionEnter(Collision)
      commentId: M:Nitro.Collector.OnCollisionEnter(Collision)
      language: CSharp
      name:
        CSharp: OnCollisionEnter(Collision)
        VB: OnCollisionEnter(Collision)
      nameWithType:
        CSharp: Collector.OnCollisionEnter(Collision)
        VB: Collector.OnCollisionEnter(Collision)
      qualifiedName:
        CSharp: Nitro.Collector.OnCollisionEnter(Collision)
        VB: Nitro.Collector.OnCollisionEnter(Collision)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnCollisionEnter
        path: ''
        startLine: 59193
      syntax:
        content:
          CSharp: protected virtual void OnCollisionEnter(Collision collision)
          VB: Protected Overridable Sub OnCollisionEnter(collision As Collision)
        parameters:
        - id: collision
          type: Global.Collision
      overload: Nitro.Collector.OnCollisionEnter*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Nitro.Collector.OnCollisionEnter2D(Collision2D)
      commentId: M:Nitro.Collector.OnCollisionEnter2D(Collision2D)
      language: CSharp
      name:
        CSharp: OnCollisionEnter2D(Collision2D)
        VB: OnCollisionEnter2D(Collision2D)
      nameWithType:
        CSharp: Collector.OnCollisionEnter2D(Collision2D)
        VB: Collector.OnCollisionEnter2D(Collision2D)
      qualifiedName:
        CSharp: Nitro.Collector.OnCollisionEnter2D(Collision2D)
        VB: Nitro.Collector.OnCollisionEnter2D(Collision2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnCollisionEnter2D
        path: ''
        startLine: 59205
      syntax:
        content:
          CSharp: protected virtual void OnCollisionEnter2D(Collision2D collision)
          VB: Protected Overridable Sub OnCollisionEnter2D(collision As Collision2D)
        parameters:
        - id: collision
          type: Global.Collision2D
      overload: Nitro.Collector.OnCollisionEnter2D*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
  - id: Nitro.Collidable
    commentId: T:Nitro.Collidable
    language: CSharp
    name:
      CSharp: Collidable
      VB: Collidable
    nameWithType:
      CSharp: Collidable
      VB: Collidable
    qualifiedName:
      CSharp: Nitro.Collidable
      VB: Nitro.Collidable
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: Collidable
      path: ''
      startLine: 59228
    summary: "\nA component that makes it easier to keep track of objects that have collided with an object.\n"
    example: []
    syntax:
      content:
        CSharp: 'public sealed class Collidable : MonoBehaviour'
        VB: >-
          Public NotInheritable Class Collidable

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Nitro.Collidable.Collisions
      commentId: P:Nitro.Collidable.Collisions
      language: CSharp
      name:
        CSharp: Collisions
        VB: Collisions
      nameWithType:
        CSharp: Collidable.Collisions
        VB: Collidable.Collisions
      qualifiedName:
        CSharp: Nitro.Collidable.Collisions
        VB: Nitro.Collidable.Collisions
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Collisions
        path: ''
        startLine: 59235
      summary: "\nReturns a list of all the collided objects\n"
      example: []
      syntax:
        content:
          CSharp: public IEnumerable<Collider> Collisions { get; }
          VB: Public ReadOnly Property Collisions As IEnumerable(Of Collider)
        parameters: []
        return:
          type: System.Collections.Generic.IEnumerable{Collider}
      overload: Nitro.Collidable.Collisions*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.Collidable.OnCollideStart
      commentId: E:Nitro.Collidable.OnCollideStart
      language: CSharp
      name:
        CSharp: OnCollideStart
        VB: OnCollideStart
      nameWithType:
        CSharp: Collidable.OnCollideStart
        VB: Collidable.OnCollideStart
      qualifiedName:
        CSharp: Nitro.Collidable.OnCollideStart
        VB: Nitro.Collidable.OnCollideStart
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnCollideStart
        path: ''
        startLine: 59237
      syntax:
        content:
          CSharp: public event Action<Collider> OnCollideStart
          VB: Public Event OnCollideStart As Action(Of Collider)
        return:
          type: Global.Action{Collider}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.Collidable.OnCollideStop
      commentId: E:Nitro.Collidable.OnCollideStop
      language: CSharp
      name:
        CSharp: OnCollideStop
        VB: OnCollideStop
      nameWithType:
        CSharp: Collidable.OnCollideStop
        VB: Collidable.OnCollideStop
      qualifiedName:
        CSharp: Nitro.Collidable.OnCollideStop
        VB: Nitro.Collidable.OnCollideStop
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnCollideStop
        path: ''
        startLine: 59238
      syntax:
        content:
          CSharp: public event Action<Collider, bool> OnCollideStop
          VB: Public Event OnCollideStop As Action(Of Collider, Boolean)
        return:
          type: Global.Action{Collider,System.Boolean}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Nitro.Collidable2D
    commentId: T:Nitro.Collidable2D
    language: CSharp
    name:
      CSharp: Collidable2D
      VB: Collidable2D
    nameWithType:
      CSharp: Collidable2D
      VB: Collidable2D
    qualifiedName:
      CSharp: Nitro.Collidable2D
      VB: Nitro.Collidable2D
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: Collidable2D
      path: ''
      startLine: 59329
    summary: "\nA component that makes it easier to keep track of objects that have collided with an object.\n"
    example: []
    syntax:
      content:
        CSharp: 'public abstract class Collidable2D : MonoBehaviour'
        VB: >-
          Public MustInherit Class Collidable2D

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Nitro.Collidable2D.CollidedBodies
      commentId: P:Nitro.Collidable2D.CollidedBodies
      language: CSharp
      name:
        CSharp: CollidedBodies
        VB: CollidedBodies
      nameWithType:
        CSharp: Collidable2D.CollidedBodies
        VB: Collidable2D.CollidedBodies
      qualifiedName:
        CSharp: Nitro.Collidable2D.CollidedBodies
        VB: Nitro.Collidable2D.CollidedBodies
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: CollidedBodies
        path: ''
        startLine: 59336
      summary: "\nReturns a list of all the collided objects\n"
      example: []
      syntax:
        content:
          CSharp: public IEnumerable<Collider2D> CollidedBodies { get; }
          VB: Public ReadOnly Property CollidedBodies As IEnumerable(Of Collider2D)
        parameters: []
        return:
          type: System.Collections.Generic.IEnumerable{Collider2D}
      overload: Nitro.Collidable2D.CollidedBodies*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.Collidable2D.OnCollideStart(Collider2D)
      commentId: M:Nitro.Collidable2D.OnCollideStart(Collider2D)
      language: CSharp
      name:
        CSharp: OnCollideStart(Collider2D)
        VB: OnCollideStart(Collider2D)
      nameWithType:
        CSharp: Collidable2D.OnCollideStart(Collider2D)
        VB: Collidable2D.OnCollideStart(Collider2D)
      qualifiedName:
        CSharp: Nitro.Collidable2D.OnCollideStart(Collider2D)
        VB: Nitro.Collidable2D.OnCollideStart(Collider2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnCollideStart
        path: ''
        startLine: 59342
      summary: "\nCalled when an object collides with this object.\n"
      example: []
      syntax:
        content:
          CSharp: protected abstract void OnCollideStart(Collider2D Collider2D)
          VB: Protected MustOverride Sub OnCollideStart(Collider2D As Collider2D)
        parameters:
        - id: Collider2D
          type: Global.Collider2D
      overload: Nitro.Collidable2D.OnCollideStart*
      modifiers:
        CSharp:
        - protected
        - abstract
        VB:
        - Protected
        - MustOverride
    - id: Nitro.Collidable2D.OnCollideStop(Collider2D,System.Boolean)
      commentId: M:Nitro.Collidable2D.OnCollideStop(Collider2D,System.Boolean)
      language: CSharp
      name:
        CSharp: OnCollideStop(Collider2D, Boolean)
        VB: OnCollideStop(Collider2D, Boolean)
      nameWithType:
        CSharp: Collidable2D.OnCollideStop(Collider2D, Boolean)
        VB: Collidable2D.OnCollideStop(Collider2D, Boolean)
      qualifiedName:
        CSharp: Nitro.Collidable2D.OnCollideStop(Collider2D, System.Boolean)
        VB: Nitro.Collidable2D.OnCollideStop(Collider2D, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnCollideStop
        path: ''
        startLine: 59348
      summary: "\nCalled when an object is no longer colliding with this object.\n"
      example: []
      syntax:
        content:
          CSharp: protected abstract void OnCollideStop(Collider2D Collider2D, bool destroyed)
          VB: Protected MustOverride Sub OnCollideStop(Collider2D As Collider2D, destroyed As Boolean)
        parameters:
        - id: Collider2D
          type: Global.Collider2D
        - id: destroyed
          type: System.Boolean
      overload: Nitro.Collidable2D.OnCollideStop*
      modifiers:
        CSharp:
        - protected
        - abstract
        VB:
        - Protected
        - MustOverride
    - id: Nitro.Collidable2D.OnTriggerEnter2D(Collider2D)
      commentId: M:Nitro.Collidable2D.OnTriggerEnter2D(Collider2D)
      language: CSharp
      name:
        CSharp: OnTriggerEnter2D(Collider2D)
        VB: OnTriggerEnter2D(Collider2D)
      nameWithType:
        CSharp: Collidable2D.OnTriggerEnter2D(Collider2D)
        VB: Collidable2D.OnTriggerEnter2D(Collider2D)
      qualifiedName:
        CSharp: Nitro.Collidable2D.OnTriggerEnter2D(Collider2D)
        VB: Nitro.Collidable2D.OnTriggerEnter2D(Collider2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnTriggerEnter2D
        path: ''
        startLine: 59350
      syntax:
        content:
          CSharp: protected virtual void OnTriggerEnter2D(Collider2D other)
          VB: Protected Overridable Sub OnTriggerEnter2D(other As Collider2D)
        parameters:
        - id: other
          type: Global.Collider2D
      overload: Nitro.Collidable2D.OnTriggerEnter2D*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Nitro.Collidable2D.OnTriggerExit2D(Collider2D)
      commentId: M:Nitro.Collidable2D.OnTriggerExit2D(Collider2D)
      language: CSharp
      name:
        CSharp: OnTriggerExit2D(Collider2D)
        VB: OnTriggerExit2D(Collider2D)
      nameWithType:
        CSharp: Collidable2D.OnTriggerExit2D(Collider2D)
        VB: Collidable2D.OnTriggerExit2D(Collider2D)
      qualifiedName:
        CSharp: Nitro.Collidable2D.OnTriggerExit2D(Collider2D)
        VB: Nitro.Collidable2D.OnTriggerExit2D(Collider2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnTriggerExit2D
        path: ''
        startLine: 59358
      syntax:
        content:
          CSharp: protected virtual void OnTriggerExit2D(Collider2D other)
          VB: Protected Overridable Sub OnTriggerExit2D(other As Collider2D)
        parameters:
        - id: other
          type: Global.Collider2D
      overload: Nitro.Collidable2D.OnTriggerExit2D*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Nitro.Collidable2D.OnCollisionEnter2D(Collision2D)
      commentId: M:Nitro.Collidable2D.OnCollisionEnter2D(Collision2D)
      language: CSharp
      name:
        CSharp: OnCollisionEnter2D(Collision2D)
        VB: OnCollisionEnter2D(Collision2D)
      nameWithType:
        CSharp: Collidable2D.OnCollisionEnter2D(Collision2D)
        VB: Collidable2D.OnCollisionEnter2D(Collision2D)
      qualifiedName:
        CSharp: Nitro.Collidable2D.OnCollisionEnter2D(Collision2D)
        VB: Nitro.Collidable2D.OnCollisionEnter2D(Collision2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnCollisionEnter2D
        path: ''
        startLine: 59366
      syntax:
        content:
          CSharp: protected virtual void OnCollisionEnter2D(Collision2D collision)
          VB: Protected Overridable Sub OnCollisionEnter2D(collision As Collision2D)
        parameters:
        - id: collision
          type: Global.Collision2D
      overload: Nitro.Collidable2D.OnCollisionEnter2D*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Nitro.Collidable2D.OnCollisionExit2D(Collision2D)
      commentId: M:Nitro.Collidable2D.OnCollisionExit2D(Collision2D)
      language: CSharp
      name:
        CSharp: OnCollisionExit2D(Collision2D)
        VB: OnCollisionExit2D(Collision2D)
      nameWithType:
        CSharp: Collidable2D.OnCollisionExit2D(Collision2D)
        VB: Collidable2D.OnCollisionExit2D(Collision2D)
      qualifiedName:
        CSharp: Nitro.Collidable2D.OnCollisionExit2D(Collision2D)
        VB: Nitro.Collidable2D.OnCollisionExit2D(Collision2D)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnCollisionExit2D
        path: ''
        startLine: 59374
      syntax:
        content:
          CSharp: protected virtual void OnCollisionExit2D(Collision2D collision)
          VB: Protected Overridable Sub OnCollisionExit2D(collision As Collision2D)
        parameters:
        - id: collision
          type: Global.Collision2D
      overload: Nitro.Collidable2D.OnCollisionExit2D*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Nitro.Collidable2D.LateUpdate
      commentId: M:Nitro.Collidable2D.LateUpdate
      language: CSharp
      name:
        CSharp: LateUpdate()
        VB: LateUpdate()
      nameWithType:
        CSharp: Collidable2D.LateUpdate()
        VB: Collidable2D.LateUpdate()
      qualifiedName:
        CSharp: Nitro.Collidable2D.LateUpdate()
        VB: Nitro.Collidable2D.LateUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: LateUpdate
        path: ''
        startLine: 59382
      syntax:
        content:
          CSharp: protected virtual void LateUpdate()
          VB: Protected Overridable Sub LateUpdate
      overload: Nitro.Collidable2D.LateUpdate*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Nitro.Collidable2D.OnDisable
      commentId: M:Nitro.Collidable2D.OnDisable
      language: CSharp
      name:
        CSharp: OnDisable()
        VB: OnDisable()
      nameWithType:
        CSharp: Collidable2D.OnDisable()
        VB: Collidable2D.OnDisable()
      qualifiedName:
        CSharp: Nitro.Collidable2D.OnDisable()
        VB: Nitro.Collidable2D.OnDisable()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnDisable
        path: ''
        startLine: 59394
      syntax:
        content:
          CSharp: protected virtual void OnDisable()
          VB: Protected Overridable Sub OnDisable
      overload: Nitro.Collidable2D.OnDisable*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Nitro.Collidable2D.OnEnable
      commentId: M:Nitro.Collidable2D.OnEnable
      language: CSharp
      name:
        CSharp: OnEnable()
        VB: OnEnable()
      nameWithType:
        CSharp: Collidable2D.OnEnable()
        VB: Collidable2D.OnEnable()
      qualifiedName:
        CSharp: Nitro.Collidable2D.OnEnable()
        VB: Nitro.Collidable2D.OnEnable()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnEnable
        path: ''
        startLine: 59403
      syntax:
        content:
          CSharp: protected virtual void OnEnable()
          VB: Protected Overridable Sub OnEnable
      overload: Nitro.Collidable2D.OnEnable*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Nitro.Collidable2D.OnDestroy
      commentId: M:Nitro.Collidable2D.OnDestroy
      language: CSharp
      name:
        CSharp: OnDestroy()
        VB: OnDestroy()
      nameWithType:
        CSharp: Collidable2D.OnDestroy()
        VB: Collidable2D.OnDestroy()
      qualifiedName:
        CSharp: Nitro.Collidable2D.OnDestroy()
        VB: Nitro.Collidable2D.OnDestroy()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnDestroy
        path: ''
        startLine: 59415
      syntax:
        content:
          CSharp: protected virtual void OnDestroy()
          VB: Protected Overridable Sub OnDestroy
      overload: Nitro.Collidable2D.OnDestroy*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
  - id: Nitro.CombinablePowerup
    commentId: T:Nitro.CombinablePowerup
    language: CSharp
    name:
      CSharp: CombinablePowerup
      VB: CombinablePowerup
    nameWithType:
      CSharp: CombinablePowerup
      VB: CombinablePowerup
    qualifiedName:
      CSharp: Nitro.CombinablePowerup
      VB: Nitro.CombinablePowerup
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: CombinablePowerup
      path: ''
      startLine: 59446
    summary: "\nA powerup that can have its effects combined with other powerups. When several powerups are collected via a <xref href=\"Nitro.MultiplePowerupCollector\" data-throw-if-not-resolved=\"false\"></xref>, they will form a chain that is sorted based on the <xref href=\"Nitro.CombinablePowerup.Priority\" data-throw-if-not-resolved=\"false\"></xref> of the powerups.\n\nThe powerups with the highest priority will be executed first, while the ones with the lowest priority will be executed last. When a powerup is executed, it will have it&apos;s <see cref=\"!:Execute(CombinablePowerup, Vector3, Quaternion, Action&lt;Vector3, Quaternion>)\"></see> function called.\n\nWith the execute function, you will be able to know the previous powerup in the chain, the position and rotation of where the powerup is affecting, and a delegate called runNextPowerup, which when called, will execute the next powerup in the chain. You can use this delegate to control where and when the next powerups in the chain are executed&quot;/>\n"
    example: []
    syntax:
      content:
        CSharp: 'public abstract class CombinablePowerup : Powerup, ICombinablePowerup, IPowerup'
        VB: >-
          Public MustInherit Class CombinablePowerup

              Inherits Powerup

              Implements ICombinablePowerup, IPowerup
    inheritance:
    - System.Object
    - Nitro.Powerup
    implements:
    - Nitro.ICombinablePowerup
    - Nitro.IPowerup
    inheritedMembers:
    - Nitro.Powerup.Collector
    - Nitro.Powerup.hideObjectOnCollect
    - Nitro.Powerup.HideObjectOnCollect
    - Nitro.Powerup.OnCollect(Nitro.ICollector)
    - Nitro.Powerup.DoneUsingPowerupAfter(System.Single,Action)
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Nitro.CombinablePowerup.priority
      commentId: F:Nitro.CombinablePowerup.priority
      language: CSharp
      name:
        CSharp: priority
        VB: priority
      nameWithType:
        CSharp: CombinablePowerup.priority
        VB: CombinablePowerup.priority
      qualifiedName:
        CSharp: Nitro.CombinablePowerup.priority
        VB: Nitro.CombinablePowerup.priority
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: priority
        path: ''
        startLine: 59488
      syntax:
        content:
          CSharp: protected int priority
          VB: Protected priority As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Nitro.CombinablePowerup.Priority
      commentId: P:Nitro.CombinablePowerup.Priority
      language: CSharp
      name:
        CSharp: Priority
        VB: Priority
      nameWithType:
        CSharp: CombinablePowerup.Priority
        VB: CombinablePowerup.Priority
      qualifiedName:
        CSharp: Nitro.CombinablePowerup.Priority
        VB: Nitro.CombinablePowerup.Priority
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Priority
        path: ''
        startLine: 59495
      summary: "\nThe priority of the powerup, which determines whether or not this powerup will get executed before others\n\nFor example, if you have a fire powerup that has a higher priority than a water powerup, then the fire effect will be executed before the water effect.\n"
      example: []
      syntax:
        content:
          CSharp: public int Priority { get; }
          VB: Public ReadOnly Property Priority As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Nitro.CombinablePowerup.Priority*
      implements:
      - Nitro.ICombinablePowerup.Priority
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.CombinablePowerup.GetPowerupChain
      commentId: M:Nitro.CombinablePowerup.GetPowerupChain
      language: CSharp
      name:
        CSharp: GetPowerupChain()
        VB: GetPowerupChain()
      nameWithType:
        CSharp: CombinablePowerup.GetPowerupChain()
        VB: CombinablePowerup.GetPowerupChain()
      qualifiedName:
        CSharp: Nitro.CombinablePowerup.GetPowerupChain()
        VB: Nitro.CombinablePowerup.GetPowerupChain()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: GetPowerupChain
        path: ''
        startLine: 59500
      summary: "\nGets a list of all the powerups in the chain\n"
      example: []
      syntax:
        content:
          CSharp: protected ReadOnlySpan<ICombinablePowerup> GetPowerupChain()
          VB: Protected Function GetPowerupChain As ReadOnlySpan(Of ICombinablePowerup)
        return:
          type: Global.ReadOnlySpan{Nitro.ICombinablePowerup}
      overload: Nitro.CombinablePowerup.GetPowerupChain*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Nitro.CombinablePowerup.HasPowerupInChain``1
      commentId: M:Nitro.CombinablePowerup.HasPowerupInChain``1
      language: CSharp
      name:
        CSharp: HasPowerupInChain<T>()
        VB: HasPowerupInChain(Of T)()
      nameWithType:
        CSharp: CombinablePowerup.HasPowerupInChain<T>()
        VB: CombinablePowerup.HasPowerupInChain(Of T)()
      qualifiedName:
        CSharp: Nitro.CombinablePowerup.HasPowerupInChain<T>()
        VB: Nitro.CombinablePowerup.HasPowerupInChain(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: HasPowerupInChain
        path: ''
        startLine: 59507
      summary: "\nChecks if a certain powerup is within the powerup chain\n"
      example: []
      syntax:
        content:
          CSharp: protected bool HasPowerupInChain<T>()
          VB: Protected Function HasPowerupInChain(Of T) As Boolean
        typeParameters:
        - id: T
          description: The type of powerup to check for
        return:
          type: System.Boolean
          description: Returns true if the powerup type is within the chain
      overload: Nitro.CombinablePowerup.HasPowerupInChain*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Nitro.CombinablePowerup.HasPowerupInChain``1(``0@)
      commentId: M:Nitro.CombinablePowerup.HasPowerupInChain``1(``0@)
      language: CSharp
      name:
        CSharp: HasPowerupInChain<T>(out T)
        VB: HasPowerupInChain(Of T)(ByRef T)
      nameWithType:
        CSharp: CombinablePowerup.HasPowerupInChain<T>(out T)
        VB: CombinablePowerup.HasPowerupInChain(Of T)(ByRef T)
      qualifiedName:
        CSharp: Nitro.CombinablePowerup.HasPowerupInChain<T>(out T)
        VB: Nitro.CombinablePowerup.HasPowerupInChain(Of T)(ByRef T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: HasPowerupInChain
        path: ''
        startLine: 59515
      summary: "\nChecks if a certain powerup is within the powerup chain\n"
      example: []
      syntax:
        content:
          CSharp: protected bool HasPowerupInChain<T>(out T powerup)
          VB: Protected Function HasPowerupInChain(Of T)(ByRef powerup As T) As Boolean
        parameters:
        - id: powerup
          type: '{T}'
          description: The resulting powerup
        typeParameters:
        - id: T
          description: The type of powerup to check for
        return:
          type: System.Boolean
          description: Returns true if the powerup type is within the chain
      overload: Nitro.CombinablePowerup.HasPowerupInChain*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Nitro.CombinablePowerup.HasPowerupInChain(Type)
      commentId: M:Nitro.CombinablePowerup.HasPowerupInChain(Type)
      language: CSharp
      name:
        CSharp: HasPowerupInChain(Type)
        VB: HasPowerupInChain(Type)
      nameWithType:
        CSharp: CombinablePowerup.HasPowerupInChain(Type)
        VB: CombinablePowerup.HasPowerupInChain(Type)
      qualifiedName:
        CSharp: Nitro.CombinablePowerup.HasPowerupInChain(Type)
        VB: Nitro.CombinablePowerup.HasPowerupInChain(Type)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: HasPowerupInChain
        path: ''
        startLine: 59535
      summary: "\nChecks if a certain powerup is within the powerup chain\n"
      example: []
      syntax:
        content:
          CSharp: protected bool HasPowerupInChain(Type powerupType)
          VB: Protected Function HasPowerupInChain(powerupType As Type) As Boolean
        parameters:
        - id: powerupType
          type: Global.Type
          description: The type of powerup to check for
        return:
          type: System.Boolean
          description: Returns true if the powerup type is within the chain
      overload: Nitro.CombinablePowerup.HasPowerupInChain*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Nitro.CombinablePowerup.HasPowerupInChain(Type,Nitro.ICombinablePowerup@)
      commentId: M:Nitro.CombinablePowerup.HasPowerupInChain(Type,Nitro.ICombinablePowerup@)
      language: CSharp
      name:
        CSharp: HasPowerupInChain(Type, out ICombinablePowerup)
        VB: HasPowerupInChain(Type, ByRef ICombinablePowerup)
      nameWithType:
        CSharp: CombinablePowerup.HasPowerupInChain(Type, out ICombinablePowerup)
        VB: CombinablePowerup.HasPowerupInChain(Type, ByRef ICombinablePowerup)
      qualifiedName:
        CSharp: Nitro.CombinablePowerup.HasPowerupInChain(Type, out Nitro.ICombinablePowerup)
        VB: Nitro.CombinablePowerup.HasPowerupInChain(Type, ByRef Nitro.ICombinablePowerup)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: HasPowerupInChain
        path: ''
        startLine: 59553
      summary: "\nChecks if a certain powerup is within the powerup chain\n"
      example: []
      syntax:
        content:
          CSharp: protected bool HasPowerupInChain(Type powerupType, out ICombinablePowerup powerup)
          VB: Protected Function HasPowerupInChain(powerupType As Type, ByRef powerup As ICombinablePowerup) As Boolean
        parameters:
        - id: powerupType
          type: Global.Type
          description: The type of powerup to check for
        - id: powerup
          type: Nitro.ICombinablePowerup
          description: The resulting powerup
        return:
          type: System.Boolean
          description: Returns true if the powerup type is within the chain
      overload: Nitro.CombinablePowerup.HasPowerupInChain*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Nitro.CombinablePowerup.GetPowerupIndex
      commentId: M:Nitro.CombinablePowerup.GetPowerupIndex
      language: CSharp
      name:
        CSharp: GetPowerupIndex()
        VB: GetPowerupIndex()
      nameWithType:
        CSharp: CombinablePowerup.GetPowerupIndex()
        VB: CombinablePowerup.GetPowerupIndex()
      qualifiedName:
        CSharp: Nitro.CombinablePowerup.GetPowerupIndex()
        VB: Nitro.CombinablePowerup.GetPowerupIndex()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: GetPowerupIndex
        path: ''
        startLine: 59571
      summary: "\nRetrieves the index of the current powerup within the powerup chain.\n"
      example: []
      syntax:
        content:
          CSharp: protected int GetPowerupIndex()
          VB: Protected Function GetPowerupIndex As Integer
        return:
          type: System.Int32
          description: ''
      overload: Nitro.CombinablePowerup.GetPowerupIndex*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Nitro.CombinablePowerup.DoAction
      commentId: M:Nitro.CombinablePowerup.DoAction
      language: CSharp
      name:
        CSharp: DoAction()
        VB: DoAction()
      nameWithType:
        CSharp: CombinablePowerup.DoAction()
        VB: CombinablePowerup.DoAction()
      qualifiedName:
        CSharp: Nitro.CombinablePowerup.DoAction()
        VB: Nitro.CombinablePowerup.DoAction()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: DoAction
        path: ''
        startLine: 59574
      example: []
      syntax:
        content:
          CSharp: public sealed override void DoAction()
          VB: Public NotOverridable Overrides Sub DoAction
      overload: Nitro.CombinablePowerup.DoAction*
      overridden: Nitro.Powerup.DoAction
      implements:
      - Nitro.IPowerup.DoAction
      modifiers:
        CSharp:
        - public
        - sealed
        - override
        VB:
        - Public
        - Overrides
        - NotOverridable
    - id: Nitro.CombinablePowerup.Execute(Nitro.ICombinablePowerup,Vector3,Quaternion,Action{Vector3,Quaternion})
      commentId: M:Nitro.CombinablePowerup.Execute(Nitro.ICombinablePowerup,Vector3,Quaternion,Action{Vector3,Quaternion})
      language: CSharp
      name:
        CSharp: Execute(ICombinablePowerup, Vector3, Quaternion, Action<Vector3, Quaternion>)
        VB: Execute(ICombinablePowerup, Vector3, Quaternion, Action(Of Vector3, Quaternion))
      nameWithType:
        CSharp: CombinablePowerup.Execute(ICombinablePowerup, Vector3, Quaternion, Action<Vector3, Quaternion>)
        VB: CombinablePowerup.Execute(ICombinablePowerup, Vector3, Quaternion, Action(Of Vector3, Quaternion))
      qualifiedName:
        CSharp: Nitro.CombinablePowerup.Execute(Nitro.ICombinablePowerup, Vector3, Quaternion, Action<Vector3, Quaternion>)
        VB: Nitro.CombinablePowerup.Execute(Nitro.ICombinablePowerup, Vector3, Quaternion, Action(Of Vector3, Quaternion))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Execute
        path: ''
        startLine: 59606
      summary: "\nThe main action of the combinable powerup\n"
      example: []
      syntax:
        content:
          CSharp: public abstract void Execute(ICombinablePowerup previous, Vector3 position, Quaternion rotation, Action<Vector3, Quaternion> runNextPowerup)
          VB: Public MustOverride Sub Execute(previous As ICombinablePowerup, position As Vector3, rotation As Quaternion, runNextPowerup As Action(Of Vector3, Quaternion))
        parameters:
        - id: previous
          type: Nitro.ICombinablePowerup
          description: The previous powerup in the chain. If this is null, then the currently executing powerup is first in the chain
        - id: position
          type: Global.Vector3
          description: The position of the collector the powerup is from
        - id: rotation
          type: Global.Quaternion
          description: The rotation of the collector the powerup is from
        - id: runNextPowerup
          type: Global.Action{Vector3,Quaternion}
          description: A delegate used to execute the next powerup in the chain. Be sure to call this to make sure all the powerups in the chain get executed
      overload: Nitro.CombinablePowerup.Execute*
      implements:
      - Nitro.ICombinablePowerup.Execute(Nitro.ICombinablePowerup,Vector3,Quaternion,Action{Vector3,Quaternion})
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
    - id: Nitro.CombinablePowerup.GetCallToNextPowerup(System.Int32)
      commentId: M:Nitro.CombinablePowerup.GetCallToNextPowerup(System.Int32)
      language: CSharp
      name:
        CSharp: GetCallToNextPowerup(Int32)
        VB: GetCallToNextPowerup(Int32)
      nameWithType:
        CSharp: CombinablePowerup.GetCallToNextPowerup(Int32)
        VB: CombinablePowerup.GetCallToNextPowerup(Int32)
      qualifiedName:
        CSharp: Nitro.CombinablePowerup.GetCallToNextPowerup(System.Int32)
        VB: Nitro.CombinablePowerup.GetCallToNextPowerup(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: GetCallToNextPowerup
        path: ''
        startLine: 59613
      summary: "\nCreates a delegate to the next powerup in the chain.\n"
      example: []
      syntax:
        content:
          CSharp: public Action<Vector3, Quaternion> GetCallToNextPowerup(int currentIndex)
          VB: Public Function GetCallToNextPowerup(currentIndex As Integer) As Action(Of Vector3, Quaternion)
        parameters:
        - id: currentIndex
          type: System.Int32
          description: The current index in the powerup chain. A delegate will be created that will call the next powerup
        return:
          type: Global.Action{Vector3,Quaternion}
          description: Returns a delgate that executes the next powerup in the chain
      overload: Nitro.CombinablePowerup.GetCallToNextPowerup*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.CombinablePowerup.DoneUsingPowerup
      commentId: M:Nitro.CombinablePowerup.DoneUsingPowerup
      language: CSharp
      name:
        CSharp: DoneUsingPowerup()
        VB: DoneUsingPowerup()
      nameWithType:
        CSharp: CombinablePowerup.DoneUsingPowerup()
        VB: CombinablePowerup.DoneUsingPowerup()
      qualifiedName:
        CSharp: Nitro.CombinablePowerup.DoneUsingPowerup()
        VB: Nitro.CombinablePowerup.DoneUsingPowerup()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: DoneUsingPowerup
        path: ''
        startLine: 59648
      example: []
      syntax:
        content:
          CSharp: public sealed override void DoneUsingPowerup()
          VB: Public NotOverridable Overrides Sub DoneUsingPowerup
      overload: Nitro.CombinablePowerup.DoneUsingPowerup*
      overridden: Nitro.Powerup.DoneUsingPowerup
      implements:
      - Nitro.IPowerup.DoneUsingPowerup
      modifiers:
        CSharp:
        - public
        - sealed
        - override
        VB:
        - Public
        - Overrides
        - NotOverridable
    references:
      Nitro.MultiplePowerupCollector: 
      Nitro.CombinablePowerup.Priority: 
  - id: Nitro.CombinablePowerup.Comparer
    commentId: T:Nitro.CombinablePowerup.Comparer
    language: CSharp
    name:
      CSharp: CombinablePowerup.Comparer
      VB: CombinablePowerup.Comparer
    nameWithType:
      CSharp: CombinablePowerup.Comparer
      VB: CombinablePowerup.Comparer
    qualifiedName:
      CSharp: Nitro.CombinablePowerup.Comparer
      VB: Nitro.CombinablePowerup.Comparer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: Comparer
      path: ''
      startLine: 59461
    summary: "\nA comparer used for sorting combinable powerups by priority\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Comparer : IComparer<ICombinablePowerup>'
        VB: >-
          Public Class Comparer

              Implements IComparer(Of ICombinablePowerup)
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Nitro.CombinablePowerup.Comparer.Compare(Nitro.ICombinablePowerup,Nitro.ICombinablePowerup)
      commentId: M:Nitro.CombinablePowerup.Comparer.Compare(Nitro.ICombinablePowerup,Nitro.ICombinablePowerup)
      language: CSharp
      name:
        CSharp: Compare(ICombinablePowerup, ICombinablePowerup)
        VB: Compare(ICombinablePowerup, ICombinablePowerup)
      nameWithType:
        CSharp: CombinablePowerup.Comparer.Compare(ICombinablePowerup, ICombinablePowerup)
        VB: CombinablePowerup.Comparer.Compare(ICombinablePowerup, ICombinablePowerup)
      qualifiedName:
        CSharp: Nitro.CombinablePowerup.Comparer.Compare(Nitro.ICombinablePowerup, Nitro.ICombinablePowerup)
        VB: Nitro.CombinablePowerup.Comparer.Compare(Nitro.ICombinablePowerup, Nitro.ICombinablePowerup)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Compare
        path: ''
        startLine: 59464
      syntax:
        content:
          CSharp: public int Compare(ICombinablePowerup x, ICombinablePowerup y)
          VB: Public Function Compare(x As ICombinablePowerup, y As ICombinablePowerup) As Integer
        parameters:
        - id: x
          type: Nitro.ICombinablePowerup
        - id: y
          type: Nitro.ICombinablePowerup
        return:
          type: System.Int32
      overload: Nitro.CombinablePowerup.Comparer.Compare*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Nitro.Extensions
    commentId: T:Nitro.Extensions
    language: CSharp
    name:
      CSharp: Extensions
      VB: Extensions
    nameWithType:
      CSharp: Extensions
      VB: Extensions
    qualifiedName:
      CSharp: Nitro.Extensions
      VB: Nitro.Extensions
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: Extensions
      path: ''
      startLine: 59701
    syntax:
      content:
        CSharp: public static class Extensions
        VB: Public Module Extensions
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: Nitro.Extensions.GetGameObject(Nitro.ICollector)
      commentId: M:Nitro.Extensions.GetGameObject(Nitro.ICollector)
      language: CSharp
      name:
        CSharp: GetGameObject(ICollector)
        VB: GetGameObject(ICollector)
      nameWithType:
        CSharp: Extensions.GetGameObject(ICollector)
        VB: Extensions.GetGameObject(ICollector)
      qualifiedName:
        CSharp: Nitro.Extensions.GetGameObject(Nitro.ICollector)
        VB: Nitro.Extensions.GetGameObject(Nitro.ICollector)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: GetGameObject
        path: ''
        startLine: 59706
      summary: "\nGets the <see cref=\"!:GameObject\"></see> this collector is attached to\n"
      example: []
      syntax:
        content:
          CSharp: public static GameObject GetGameObject(this ICollector collector)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GetGameObject(collector As ICollector) As GameObject
        parameters:
        - id: collector
          type: Nitro.ICollector
        return:
          type: Global.GameObject
      overload: Nitro.Extensions.GetGameObject*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Nitro.Extensions.GetTransform(Nitro.ICollector)
      commentId: M:Nitro.Extensions.GetTransform(Nitro.ICollector)
      language: CSharp
      name:
        CSharp: GetTransform(ICollector)
        VB: GetTransform(ICollector)
      nameWithType:
        CSharp: Extensions.GetTransform(ICollector)
        VB: Extensions.GetTransform(ICollector)
      qualifiedName:
        CSharp: Nitro.Extensions.GetTransform(Nitro.ICollector)
        VB: Nitro.Extensions.GetTransform(Nitro.ICollector)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: GetTransform
        path: ''
        startLine: 59718
      summary: "\nGets the <see cref=\"!:Transform\"></see> this collector is attached to\n"
      example: []
      syntax:
        content:
          CSharp: public static Transform GetTransform(this ICollector collector)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GetTransform(collector As ICollector) As Transform
        parameters:
        - id: collector
          type: Nitro.ICollector
        return:
          type: Global.Transform
      overload: Nitro.Extensions.GetTransform*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Nitro.GenericMath
    commentId: T:Nitro.GenericMath
    language: CSharp
    name:
      CSharp: GenericMath
      VB: GenericMath
    nameWithType:
      CSharp: GenericMath
      VB: GenericMath
    qualifiedName:
      CSharp: Nitro.GenericMath
      VB: Nitro.GenericMath
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: GenericMath
      path: ''
      startLine: 59738
    summary: "\nServes as a way of doing basic math operations on generic types.\n"
    example: []
    syntax:
      content:
        CSharp: public static class GenericMath
        VB: Public Module GenericMath
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Nitro.GenericMath.HasAdd``1
      commentId: M:Nitro.GenericMath.HasAdd``1
      language: CSharp
      name:
        CSharp: HasAdd<T>()
        VB: HasAdd(Of T)()
      nameWithType:
        CSharp: GenericMath.HasAdd<T>()
        VB: GenericMath.HasAdd(Of T)()
      qualifiedName:
        CSharp: Nitro.GenericMath.HasAdd<T>()
        VB: Nitro.GenericMath.HasAdd(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: HasAdd
        path: ''
        startLine: 60011
      summary: "\nChecks if a type can be added to\n"
      example: []
      syntax:
        content:
          CSharp: public static bool HasAdd<T>()
          VB: Public Shared Function HasAdd(Of T) As Boolean
        typeParameters:
        - id: T
          description: The type to check
        return:
          type: System.Boolean
          description: Returns true if the type can be added to itself
      overload: Nitro.GenericMath.HasAdd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Nitro.GenericMath.HasSub``1
      commentId: M:Nitro.GenericMath.HasSub``1
      language: CSharp
      name:
        CSharp: HasSub<T>()
        VB: HasSub(Of T)()
      nameWithType:
        CSharp: GenericMath.HasSub<T>()
        VB: GenericMath.HasSub(Of T)()
      qualifiedName:
        CSharp: Nitro.GenericMath.HasSub<T>()
        VB: Nitro.GenericMath.HasSub(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: HasSub
        path: ''
        startLine: 60030
      summary: "\nChecks if a type can be subtracted to\n"
      example: []
      syntax:
        content:
          CSharp: public static bool HasSub<T>()
          VB: Public Shared Function HasSub(Of T) As Boolean
        typeParameters:
        - id: T
          description: The type to check
        return:
          type: System.Boolean
          description: Returns true if the type can be subtracted from itself
      overload: Nitro.GenericMath.HasSub*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Nitro.GenericMath.HasMul``1
      commentId: M:Nitro.GenericMath.HasMul``1
      language: CSharp
      name:
        CSharp: HasMul<T>()
        VB: HasMul(Of T)()
      nameWithType:
        CSharp: GenericMath.HasMul<T>()
        VB: GenericMath.HasMul(Of T)()
      qualifiedName:
        CSharp: Nitro.GenericMath.HasMul<T>()
        VB: Nitro.GenericMath.HasMul(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: HasMul
        path: ''
        startLine: 60049
      summary: "\nChecks if a type can be multiplied with itself\n"
      example: []
      syntax:
        content:
          CSharp: public static bool HasMul<T>()
          VB: Public Shared Function HasMul(Of T) As Boolean
        typeParameters:
        - id: T
          description: The type to check
        return:
          type: System.Boolean
          description: Returns true if the type can be multiplied with itself
      overload: Nitro.GenericMath.HasMul*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Nitro.GenericMath.HasDiv``1
      commentId: M:Nitro.GenericMath.HasDiv``1
      language: CSharp
      name:
        CSharp: HasDiv<T>()
        VB: HasDiv(Of T)()
      nameWithType:
        CSharp: GenericMath.HasDiv<T>()
        VB: GenericMath.HasDiv(Of T)()
      qualifiedName:
        CSharp: Nitro.GenericMath.HasDiv<T>()
        VB: Nitro.GenericMath.HasDiv(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: HasDiv
        path: ''
        startLine: 60068
      summary: "\nChecks if a type can be divided by itself\n"
      example: []
      syntax:
        content:
          CSharp: public static bool HasDiv<T>()
          VB: Public Shared Function HasDiv(Of T) As Boolean
        typeParameters:
        - id: T
          description: The type to check
        return:
          type: System.Boolean
          description: Returns true if the type can be divided by itself
      overload: Nitro.GenericMath.HasDiv*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Nitro.GenericMath.Add``1(``0,``0)
      commentId: M:Nitro.GenericMath.Add``1(``0,``0)
      language: CSharp
      name:
        CSharp: Add<T>(T, T)
        VB: Add(Of T)(T, T)
      nameWithType:
        CSharp: GenericMath.Add<T>(T, T)
        VB: GenericMath.Add(Of T)(T, T)
      qualifiedName:
        CSharp: Nitro.GenericMath.Add<T>(T, T)
        VB: Nitro.GenericMath.Add(Of T)(T, T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Add
        path: ''
        startLine: 60152
      summary: "\nAdds two variables together, if possible\n"
      example: []
      syntax:
        content:
          CSharp: public static T Add<T>(T a, T b)
          VB: Public Shared Function Add(Of T)(a As T, b As T) As T
        parameters:
        - id: a
          type: '{T}'
          description: The first variable
        - id: b
          type: '{T}'
          description: The second variable
        typeParameters:
        - id: T
          description: The type of the variables to add
        return:
          type: '{T}'
          description: Returns the sum of the variables
      overload: Nitro.GenericMath.Add*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Nitro.GenericMath.Sub``1(``0,``0)
      commentId: M:Nitro.GenericMath.Sub``1(``0,``0)
      language: CSharp
      name:
        CSharp: Sub<T>(T, T)
        VB: Sub(Of T)(T, T)
      nameWithType:
        CSharp: GenericMath.Sub<T>(T, T)
        VB: GenericMath.Sub(Of T)(T, T)
      qualifiedName:
        CSharp: Nitro.GenericMath.Sub<T>(T, T)
        VB: Nitro.GenericMath.Sub(Of T)(T, T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Sub
        path: ''
        startLine: 60178
      summary: "\nSubtracts two variables together, if possible\n"
      example: []
      syntax:
        content:
          CSharp: public static T Sub<T>(T a, T b)
          VB: Public Shared Function Sub(Of T)(a As T, b As T) As T
        parameters:
        - id: a
          type: '{T}'
          description: The first variable
        - id: b
          type: '{T}'
          description: The second variable
        typeParameters:
        - id: T
          description: The type of the variables to subtract
        return:
          type: '{T}'
          description: Returns the difference of the variables
      overload: Nitro.GenericMath.Sub*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Nitro.GenericMath.Mul``1(``0,``0)
      commentId: M:Nitro.GenericMath.Mul``1(``0,``0)
      language: CSharp
      name:
        CSharp: Mul<T>(T, T)
        VB: Mul(Of T)(T, T)
      nameWithType:
        CSharp: GenericMath.Mul<T>(T, T)
        VB: GenericMath.Mul(Of T)(T, T)
      qualifiedName:
        CSharp: Nitro.GenericMath.Mul<T>(T, T)
        VB: Nitro.GenericMath.Mul(Of T)(T, T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Mul
        path: ''
        startLine: 60204
      summary: "\nMultiplies two variables together, if possible\n"
      example: []
      syntax:
        content:
          CSharp: public static T Mul<T>(T a, T b)
          VB: Public Shared Function Mul(Of T)(a As T, b As T) As T
        parameters:
        - id: a
          type: '{T}'
          description: The first variable
        - id: b
          type: '{T}'
          description: The second variable
        typeParameters:
        - id: T
          description: The type of the variables to multiply
        return:
          type: '{T}'
          description: Returns the product of the variables
      overload: Nitro.GenericMath.Mul*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Nitro.GenericMath.Div``1(``0,``0)
      commentId: M:Nitro.GenericMath.Div``1(``0,``0)
      language: CSharp
      name:
        CSharp: Div<T>(T, T)
        VB: Div(Of T)(T, T)
      nameWithType:
        CSharp: GenericMath.Div<T>(T, T)
        VB: GenericMath.Div(Of T)(T, T)
      qualifiedName:
        CSharp: Nitro.GenericMath.Div<T>(T, T)
        VB: Nitro.GenericMath.Div(Of T)(T, T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Div
        path: ''
        startLine: 60230
      summary: "\nDivides two variables together, if possible\n"
      example: []
      syntax:
        content:
          CSharp: public static T Div<T>(T a, T b)
          VB: Public Shared Function Div(Of T)(a As T, b As T) As T
        parameters:
        - id: a
          type: '{T}'
          description: The first variable
        - id: b
          type: '{T}'
          description: The second variable
        typeParameters:
        - id: T
          description: The type of the variables to divide
        return:
          type: '{T}'
          description: Returns the quotient of the variables
      overload: Nitro.GenericMath.Div*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Nitro.Modifier`1
    commentId: T:Nitro.Modifier`1
    language: CSharp
    name:
      CSharp: Modifier<T>
      VB: Modifier(Of T)
    nameWithType:
      CSharp: Modifier<T>
      VB: Modifier(Of T)
    qualifiedName:
      CSharp: Nitro.Modifier<T>
      VB: Nitro.Modifier(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: Modifier
      path: ''
      startLine: 60261
    summary: "\nRepresents a modification applied to a <xref href=\"Nitro.RevertableVar%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: 'public sealed class Modifier<T> : IModifier'
        VB: >-
          Public NotInheritable Class Modifier(Of T)

              Implements IModifier
      typeParameters:
      - id: T
        description: ''
    inheritance:
    - System.Object
    implements:
    - Nitro.IModifier
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Nitro.Modifier`1.#ctor(Nitro.IRevertableVar,Operation,`0,System.Int32,System.Single,UnityEngine.Object,System.UInt64)
      commentId: M:Nitro.Modifier`1.#ctor(Nitro.IRevertableVar,Operation,`0,System.Int32,System.Single,UnityEngine.Object,System.UInt64)
      language: CSharp
      name:
        CSharp: Modifier(IRevertableVar, Operation, T, Int32, Single, UnityEngine.Object, UInt64)
        VB: Modifier(IRevertableVar, Operation, T, Int32, Single, UnityEngine.Object, UInt64)
      nameWithType:
        CSharp: Modifier<T>.Modifier(IRevertableVar, Operation, T, Int32, Single, UnityEngine.Object, UInt64)
        VB: Modifier(Of T).Modifier(IRevertableVar, Operation, T, Int32, Single, UnityEngine.Object, UInt64)
      qualifiedName:
        CSharp: Nitro.Modifier<T>.Modifier(Nitro.IRevertableVar, Operation, T, System.Int32, System.Single, UnityEngine.Object, System.UInt64)
        VB: Nitro.Modifier(Of T).Modifier(Nitro.IRevertableVar, Operation, T, System.Int32, System.Single, UnityEngine.Object, System.UInt64)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: .ctor
        path: ''
        startLine: 60263
      syntax:
        content:
          CSharp: public Modifier(IRevertableVar sourceVar, Operation op, T value, int priority, float timeActive, UnityEngine.Object boundObject, ulong id)
          VB: Public Sub New(sourceVar As IRevertableVar, op As Operation, value As T, priority As Integer, timeActive As Single, boundObject As UnityEngine.Object, id As ULong)
        parameters:
        - id: sourceVar
          type: Nitro.IRevertableVar
        - id: op
          type: Global.Operation
        - id: value
          type: '{T}'
        - id: priority
          type: System.Int32
        - id: timeActive
          type: System.Single
        - id: boundObject
          type: Global.UnityEngine.Object
        - id: id
          type: System.UInt64
      overload: Nitro.Modifier`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.Modifier`1.Op
      commentId: P:Nitro.Modifier`1.Op
      language: CSharp
      name:
        CSharp: Op
        VB: Op
      nameWithType:
        CSharp: Modifier<T>.Op
        VB: Modifier(Of T).Op
      qualifiedName:
        CSharp: Nitro.Modifier<T>.Op
        VB: Nitro.Modifier(Of T).Op
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Op
        path: ''
        startLine: 60277
      example: []
      syntax:
        content:
          CSharp: public Operation Op { get; }
          VB: Public ReadOnly Property Op As Operation
        parameters: []
        return:
          type: Global.Operation
      overload: Nitro.Modifier`1.Op*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.Modifier`1.Value
      commentId: P:Nitro.Modifier`1.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: Modifier<T>.Value
        VB: Modifier(Of T).Value
      qualifiedName:
        CSharp: Nitro.Modifier<T>.Value
        VB: Nitro.Modifier(Of T).Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Value
        path: ''
        startLine: 60282
      summary: "\nThe right-hand operand of the modifier\n"
      example: []
      syntax:
        content:
          CSharp: public T Value { get; }
          VB: Public ReadOnly Property Value As T
        parameters: []
        return:
          type: '{T}'
      overload: Nitro.Modifier`1.Value*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.Modifier`1.Priority
      commentId: P:Nitro.Modifier`1.Priority
      language: CSharp
      name:
        CSharp: Priority
        VB: Priority
      nameWithType:
        CSharp: Modifier<T>.Priority
        VB: Modifier(Of T).Priority
      qualifiedName:
        CSharp: Nitro.Modifier<T>.Priority
        VB: Nitro.Modifier(Of T).Priority
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Priority
        path: ''
        startLine: 60285
      example: []
      syntax:
        content:
          CSharp: public int Priority { get; }
          VB: Public ReadOnly Property Priority As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Nitro.Modifier`1.Priority*
      implements:
      - Nitro.IModifier.Priority
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.Modifier`1.TimeAdded
      commentId: P:Nitro.Modifier`1.TimeAdded
      language: CSharp
      name:
        CSharp: TimeAdded
        VB: TimeAdded
      nameWithType:
        CSharp: Modifier<T>.TimeAdded
        VB: Modifier(Of T).TimeAdded
      qualifiedName:
        CSharp: Nitro.Modifier<T>.TimeAdded
        VB: Nitro.Modifier(Of T).TimeAdded
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: TimeAdded
        path: ''
        startLine: 60288
      example: []
      syntax:
        content:
          CSharp: public float TimeAdded { get; }
          VB: Public ReadOnly Property TimeAdded As Single
        parameters: []
        return:
          type: System.Single
      overload: Nitro.Modifier`1.TimeAdded*
      implements:
      - Nitro.IModifier.TimeAdded
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.Modifier`1.SourceVariable
      commentId: P:Nitro.Modifier`1.SourceVariable
      language: CSharp
      name:
        CSharp: SourceVariable
        VB: SourceVariable
      nameWithType:
        CSharp: Modifier<T>.SourceVariable
        VB: Modifier(Of T).SourceVariable
      qualifiedName:
        CSharp: Nitro.Modifier<T>.SourceVariable
        VB: Nitro.Modifier(Of T).SourceVariable
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: SourceVariable
        path: ''
        startLine: 60291
      example: []
      syntax:
        content:
          CSharp: public IRevertableVar SourceVariable { get; }
          VB: Public ReadOnly Property SourceVariable As IRevertableVar
        parameters: []
        return:
          type: Nitro.IRevertableVar
      overload: Nitro.Modifier`1.SourceVariable*
      implements:
      - Nitro.IModifier.SourceVariable
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.Modifier`1.BoundObject
      commentId: P:Nitro.Modifier`1.BoundObject
      language: CSharp
      name:
        CSharp: BoundObject
        VB: BoundObject
      nameWithType:
        CSharp: Modifier<T>.BoundObject
        VB: Modifier(Of T).BoundObject
      qualifiedName:
        CSharp: Nitro.Modifier<T>.BoundObject
        VB: Nitro.Modifier(Of T).BoundObject
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: BoundObject
        path: ''
        startLine: 60294
      example: []
      syntax:
        content:
          CSharp: public UnityEngine.Object BoundObject { get; }
          VB: Public ReadOnly Property BoundObject As UnityEngine.Object
        parameters: []
        return:
          type: Global.UnityEngine.Object
      overload: Nitro.Modifier`1.BoundObject*
      implements:
      - Nitro.IModifier.BoundObject
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.Modifier`1.HasBoundObject
      commentId: P:Nitro.Modifier`1.HasBoundObject
      language: CSharp
      name:
        CSharp: HasBoundObject
        VB: HasBoundObject
      nameWithType:
        CSharp: Modifier<T>.HasBoundObject
        VB: Modifier(Of T).HasBoundObject
      qualifiedName:
        CSharp: Nitro.Modifier<T>.HasBoundObject
        VB: Nitro.Modifier(Of T).HasBoundObject
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: HasBoundObject
        path: ''
        startLine: 60297
      example: []
      syntax:
        content:
          CSharp: public bool HasBoundObject { get; }
          VB: Public ReadOnly Property HasBoundObject As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Nitro.Modifier`1.HasBoundObject*
      implements:
      - Nitro.IModifier.HasBoundObject
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.Modifier`1.TimeActive
      commentId: P:Nitro.Modifier`1.TimeActive
      language: CSharp
      name:
        CSharp: TimeActive
        VB: TimeActive
      nameWithType:
        CSharp: Modifier<T>.TimeActive
        VB: Modifier(Of T).TimeActive
      qualifiedName:
        CSharp: Nitro.Modifier<T>.TimeActive
        VB: Nitro.Modifier(Of T).TimeActive
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: TimeActive
        path: ''
        startLine: 60299
      syntax:
        content:
          CSharp: public float TimeActive { get; }
          VB: Public ReadOnly Property TimeActive As Single
        parameters: []
        return:
          type: System.Single
      overload: Nitro.Modifier`1.TimeActive*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.Modifier`1.ID
      commentId: P:Nitro.Modifier`1.ID
      language: CSharp
      name:
        CSharp: ID
        VB: ID
      nameWithType:
        CSharp: Modifier<T>.ID
        VB: Modifier(Of T).ID
      qualifiedName:
        CSharp: Nitro.Modifier<T>.ID
        VB: Nitro.Modifier(Of T).ID
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: ID
        path: ''
        startLine: 60302
      example: []
      syntax:
        content:
          CSharp: public ulong ID { get; }
          VB: Public ReadOnly Property ID As ULong
        parameters: []
        return:
          type: System.UInt64
      overload: Nitro.Modifier`1.ID*
      implements:
      - Nitro.IModifier.ID
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - isEii: true
      id: Nitro.Modifier`1.Nitro#IModifier#Value
      commentId: P:Nitro.Modifier`1.Nitro#IModifier#Value
      language: CSharp
      name:
        CSharp: IModifier.Value
        VB: Nitro.IModifier.Value
      nameWithType:
        CSharp: Modifier<T>.IModifier.Value
        VB: Modifier(Of T).Nitro.IModifier.Value
      qualifiedName:
        CSharp: Nitro.Modifier<T>.Nitro.IModifier.Value
        VB: Nitro.Modifier(Of T).Nitro.IModifier.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Nitro.IModifier.Value
        path: ''
        startLine: 60305
      example: []
      syntax:
        content:
          CSharp: object IModifier.Value { get; }
          VB: ReadOnly WriteOnly Property Nitro.IModifier.Value As Object Implements IModifier.Value
        parameters: []
        return:
          type: System.Object
      overload: Nitro.Modifier`1.Nitro#IModifier#Value*
      implements:
      - Nitro.IModifier.Value
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Nitro.Modifier`1.Revert
      commentId: M:Nitro.Modifier`1.Revert
      language: CSharp
      name:
        CSharp: Revert()
        VB: Revert()
      nameWithType:
        CSharp: Modifier<T>.Revert()
        VB: Modifier(Of T).Revert()
      qualifiedName:
        CSharp: Nitro.Modifier<T>.Revert()
        VB: Nitro.Modifier(Of T).Revert()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Revert
        path: ''
        startLine: 60333
      example: []
      syntax:
        content:
          CSharp: public void Revert()
          VB: Public Sub Revert
      overload: Nitro.Modifier`1.Revert*
      implements:
      - Nitro.IModifier.Revert
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.Modifier`1.Dispose
      commentId: M:Nitro.Modifier`1.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: Modifier<T>.Dispose()
        VB: Modifier(Of T).Dispose()
      qualifiedName:
        CSharp: Nitro.Modifier<T>.Dispose()
        VB: Nitro.Modifier(Of T).Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Dispose
        path: ''
        startLine: 60338
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: Nitro.Modifier`1.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      Nitro.RevertableVar`1: 
  - id: Nitro.Modifier`1.Sorter
    commentId: T:Nitro.Modifier`1.Sorter
    language: CSharp
    name:
      CSharp: Modifier<T>.Sorter
      VB: Modifier(Of T).Sorter
    nameWithType:
      CSharp: Modifier<T>.Sorter
      VB: Modifier(Of T).Sorter
    qualifiedName:
      CSharp: Nitro.Modifier<T>.Sorter
      VB: Nitro.Modifier(Of T).Sorter
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: Sorter
      path: ''
      startLine: 60307
    syntax:
      content:
        CSharp: 'public class Sorter : IComparer<Modifier<T>>'
        VB: >-
          Public Class Sorter

              Implements IComparer(Of Modifier(Of T))
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Nitro.Modifier`1.Sorter.Compare(Nitro.Modifier{`0},Nitro.Modifier{`0})
      commentId: M:Nitro.Modifier`1.Sorter.Compare(Nitro.Modifier{`0},Nitro.Modifier{`0})
      language: CSharp
      name:
        CSharp: Compare(Modifier<T>, Modifier<T>)
        VB: Compare(Modifier(Of T), Modifier(Of T))
      nameWithType:
        CSharp: Modifier<T>.Sorter.Compare(Modifier<T>, Modifier<T>)
        VB: Modifier(Of T).Sorter.Compare(Modifier(Of T), Modifier(Of T))
      qualifiedName:
        CSharp: Nitro.Modifier<T>.Sorter.Compare(Nitro.Modifier<T>, Nitro.Modifier<T>)
        VB: Nitro.Modifier(Of T).Sorter.Compare(Nitro.Modifier(Of T), Nitro.Modifier(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Compare
        path: ''
        startLine: 60312
      syntax:
        content:
          CSharp: public int Compare(Modifier<T> x, Modifier<T> y)
          VB: Public Function Compare(x As Modifier(Of T), y As Modifier(Of T)) As Integer
        parameters:
        - id: x
          type: Nitro.Modifier`1
        - id: y
          type: Nitro.Modifier`1
        return:
          type: System.Int32
      overload: Nitro.Modifier`1.Sorter.Compare*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Nitro.ModifierCollection
    commentId: T:Nitro.ModifierCollection
    language: CSharp
    name:
      CSharp: ModifierCollection
      VB: ModifierCollection
    nameWithType:
      CSharp: ModifierCollection
      VB: ModifierCollection
    qualifiedName:
      CSharp: Nitro.ModifierCollection
      VB: Nitro.ModifierCollection
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: ModifierCollection
      path: ''
      startLine: 60354
    summary: "\nRepresents a collection of modifiers. This can be used to easily group modifiers together and revert them together as well\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ModifierCollection : ICollection<IModifier>, IReadOnlyList<IModifier>, IReadOnlyCollection<IModifier>, IEnumerable<IModifier>, ICollection, IEnumerable'
        VB: >-
          Public Class ModifierCollection

              Implements ICollection(Of IModifier), IReadOnlyList(Of IModifier), IReadOnlyCollection(Of IModifier), IEnumerable(Of IModifier), ICollection, IEnumerable
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Nitro.ModifierCollection.Count
      commentId: P:Nitro.ModifierCollection.Count
      language: CSharp
      name:
        CSharp: Count
        VB: Count
      nameWithType:
        CSharp: ModifierCollection.Count
        VB: ModifierCollection.Count
      qualifiedName:
        CSharp: Nitro.ModifierCollection.Count
        VB: Nitro.ModifierCollection.Count
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Count
        path: ''
        startLine: 60359
      syntax:
        content:
          CSharp: public int Count { get; }
          VB: Public ReadOnly Property Count As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Nitro.ModifierCollection.Count*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.ModifierCollection.IsReadOnly
      commentId: P:Nitro.ModifierCollection.IsReadOnly
      language: CSharp
      name:
        CSharp: IsReadOnly
        VB: IsReadOnly
      nameWithType:
        CSharp: ModifierCollection.IsReadOnly
        VB: ModifierCollection.IsReadOnly
      qualifiedName:
        CSharp: Nitro.ModifierCollection.IsReadOnly
        VB: Nitro.ModifierCollection.IsReadOnly
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: IsReadOnly
        path: ''
        startLine: 60361
      syntax:
        content:
          CSharp: public bool IsReadOnly { get; }
          VB: Public ReadOnly Property IsReadOnly As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Nitro.ModifierCollection.IsReadOnly*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.ModifierCollection.IsSynchronized
      commentId: P:Nitro.ModifierCollection.IsSynchronized
      language: CSharp
      name:
        CSharp: IsSynchronized
        VB: IsSynchronized
      nameWithType:
        CSharp: ModifierCollection.IsSynchronized
        VB: ModifierCollection.IsSynchronized
      qualifiedName:
        CSharp: Nitro.ModifierCollection.IsSynchronized
        VB: Nitro.ModifierCollection.IsSynchronized
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: IsSynchronized
        path: ''
        startLine: 60363
      syntax:
        content:
          CSharp: public bool IsSynchronized { get; }
          VB: Public ReadOnly Property IsSynchronized As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Nitro.ModifierCollection.IsSynchronized*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.ModifierCollection.SyncRoot
      commentId: P:Nitro.ModifierCollection.SyncRoot
      language: CSharp
      name:
        CSharp: SyncRoot
        VB: SyncRoot
      nameWithType:
        CSharp: ModifierCollection.SyncRoot
        VB: ModifierCollection.SyncRoot
      qualifiedName:
        CSharp: Nitro.ModifierCollection.SyncRoot
        VB: Nitro.ModifierCollection.SyncRoot
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: SyncRoot
        path: ''
        startLine: 60365
      syntax:
        content:
          CSharp: public object SyncRoot { get; }
          VB: Public ReadOnly Property SyncRoot As Object
        parameters: []
        return:
          type: System.Object
      overload: Nitro.ModifierCollection.SyncRoot*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.ModifierCollection.IsFixedSize
      commentId: P:Nitro.ModifierCollection.IsFixedSize
      language: CSharp
      name:
        CSharp: IsFixedSize
        VB: IsFixedSize
      nameWithType:
        CSharp: ModifierCollection.IsFixedSize
        VB: ModifierCollection.IsFixedSize
      qualifiedName:
        CSharp: Nitro.ModifierCollection.IsFixedSize
        VB: Nitro.ModifierCollection.IsFixedSize
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: IsFixedSize
        path: ''
        startLine: 60367
      syntax:
        content:
          CSharp: public bool IsFixedSize { get; }
          VB: Public ReadOnly Property IsFixedSize As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Nitro.ModifierCollection.IsFixedSize*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.ModifierCollection.Item(System.Int32)
      commentId: P:Nitro.ModifierCollection.Item(System.Int32)
      language: CSharp
      name:
        CSharp: Item[Int32]
        VB: Item(Int32)
      nameWithType:
        CSharp: ModifierCollection.Item[Int32]
        VB: ModifierCollection.Item(Int32)
      qualifiedName:
        CSharp: Nitro.ModifierCollection.Item[System.Int32]
        VB: Nitro.ModifierCollection.Item(System.Int32)
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: this[]
        path: ''
        startLine: 60369
      syntax:
        content:
          CSharp: public IModifier this[int index] { get; }
          VB: Public ReadOnly Property Item(index As Integer) As IModifier
        parameters:
        - id: index
          type: System.Int32
        return:
          type: Nitro.IModifier
      overload: Nitro.ModifierCollection.Item*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.ModifierCollection.Add(Nitro.IModifier)
      commentId: M:Nitro.ModifierCollection.Add(Nitro.IModifier)
      language: CSharp
      name:
        CSharp: Add(IModifier)
        VB: Add(IModifier)
      nameWithType:
        CSharp: ModifierCollection.Add(IModifier)
        VB: ModifierCollection.Add(IModifier)
      qualifiedName:
        CSharp: Nitro.ModifierCollection.Add(Nitro.IModifier)
        VB: Nitro.ModifierCollection.Add(Nitro.IModifier)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Add
        path: ''
        startLine: 60375
      summary: "\nAdds a modifier to the collection\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(IModifier modifier)
          VB: Public Sub Add(modifier As IModifier)
        parameters:
        - id: modifier
          type: Nitro.IModifier
          description: The modifier to add
      overload: Nitro.ModifierCollection.Add*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.ModifierCollection.Add(Nitro.IModifier,UnityEngine.Object)
      commentId: M:Nitro.ModifierCollection.Add(Nitro.IModifier,UnityEngine.Object)
      language: CSharp
      name:
        CSharp: Add(IModifier, UnityEngine.Object)
        VB: Add(IModifier, UnityEngine.Object)
      nameWithType:
        CSharp: ModifierCollection.Add(IModifier, UnityEngine.Object)
        VB: ModifierCollection.Add(IModifier, UnityEngine.Object)
      qualifiedName:
        CSharp: Nitro.ModifierCollection.Add(Nitro.IModifier, UnityEngine.Object)
        VB: Nitro.ModifierCollection.Add(Nitro.IModifier, UnityEngine.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Add
        path: ''
        startLine: 60385
      summary: "\nAdds a modifier to the collection\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(IModifier modifier, UnityEngine.Object tiedObject)
          VB: Public Sub Add(modifier As IModifier, tiedObject As UnityEngine.Object)
        parameters:
        - id: modifier
          type: Nitro.IModifier
          description: The modifier to add
        - id: tiedObject
          type: Global.UnityEngine.Object
          description: If an object is specified, then this modifier will become tied to this object. You can then use <xref href="Nitro.ModifierCollection.RevertAllByObject(UnityEngine.Object)" data-throw-if-not-resolved="false"></xref> to revert all modifiers that are tied to that object
      overload: Nitro.ModifierCollection.Add*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Nitro.ModifierCollection.RevertAllByObject(UnityEngine.Object): 
    - id: Nitro.ModifierCollection.RevertAll
      commentId: M:Nitro.ModifierCollection.RevertAll
      language: CSharp
      name:
        CSharp: RevertAll()
        VB: RevertAll()
      nameWithType:
        CSharp: ModifierCollection.RevertAll()
        VB: ModifierCollection.RevertAll()
      qualifiedName:
        CSharp: Nitro.ModifierCollection.RevertAll()
        VB: Nitro.ModifierCollection.RevertAll()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: RevertAll
        path: ''
        startLine: 60394
      summary: "\nReverts all modifiers and removes them from the collection\n"
      example: []
      syntax:
        content:
          CSharp: public void RevertAll()
          VB: Public Sub RevertAll
      overload: Nitro.ModifierCollection.RevertAll*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.ModifierCollection.RevertAllFor``1(Nitro.RevertableVar{``0})
      commentId: M:Nitro.ModifierCollection.RevertAllFor``1(Nitro.RevertableVar{``0})
      language: CSharp
      name:
        CSharp: RevertAllFor<T>(RevertableVar<T>)
        VB: RevertAllFor(Of T)(RevertableVar(Of T))
      nameWithType:
        CSharp: ModifierCollection.RevertAllFor<T>(RevertableVar<T>)
        VB: ModifierCollection.RevertAllFor(Of T)(RevertableVar(Of T))
      qualifiedName:
        CSharp: Nitro.ModifierCollection.RevertAllFor<T>(Nitro.RevertableVar<T>)
        VB: Nitro.ModifierCollection.RevertAllFor(Of T)(Nitro.RevertableVar(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: RevertAllFor
        path: ''
        startLine: 60409
      summary: "\nReverts all modifiers for a specific <xref href=\"Nitro.RevertableVar%601\" data-throw-if-not-resolved=\"false\"></xref>, and removes them from the list\n"
      example: []
      syntax:
        content:
          CSharp: public void RevertAllFor<T>(RevertableVar<T> var)
          VB: Public Sub RevertAllFor(Of T)(var As RevertableVar(Of T))
        parameters:
        - id: var
          type: Nitro.RevertableVar{{T}}
          description: The revertable variable
        typeParameters:
        - id: T
          description: The type of variable
      overload: Nitro.ModifierCollection.RevertAllFor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Nitro.RevertableVar`1: 
    - id: Nitro.ModifierCollection.RevertAllFor(Nitro.IRevertableVar)
      commentId: M:Nitro.ModifierCollection.RevertAllFor(Nitro.IRevertableVar)
      language: CSharp
      name:
        CSharp: RevertAllFor(IRevertableVar)
        VB: RevertAllFor(IRevertableVar)
      nameWithType:
        CSharp: ModifierCollection.RevertAllFor(IRevertableVar)
        VB: ModifierCollection.RevertAllFor(IRevertableVar)
      qualifiedName:
        CSharp: Nitro.ModifierCollection.RevertAllFor(Nitro.IRevertableVar)
        VB: Nitro.ModifierCollection.RevertAllFor(Nitro.IRevertableVar)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: RevertAllFor
        path: ''
        startLine: 60428
      summary: "\nReverts all modifiers for a specific <xref href=\"Nitro.RevertableVar%601\" data-throw-if-not-resolved=\"false\"></xref>, and removes them from the list\n"
      example: []
      syntax:
        content:
          CSharp: public void RevertAllFor(IRevertableVar var)
          VB: Public Sub RevertAllFor(var As IRevertableVar)
        parameters:
        - id: var
          type: Nitro.IRevertableVar
          description: The revertable variable
      overload: Nitro.ModifierCollection.RevertAllFor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Nitro.RevertableVar`1: 
    - id: Nitro.ModifierCollection.RevertAllByObject(UnityEngine.Object)
      commentId: M:Nitro.ModifierCollection.RevertAllByObject(UnityEngine.Object)
      language: CSharp
      name:
        CSharp: RevertAllByObject(UnityEngine.Object)
        VB: RevertAllByObject(UnityEngine.Object)
      nameWithType:
        CSharp: ModifierCollection.RevertAllByObject(UnityEngine.Object)
        VB: ModifierCollection.RevertAllByObject(UnityEngine.Object)
      qualifiedName:
        CSharp: Nitro.ModifierCollection.RevertAllByObject(UnityEngine.Object)
        VB: Nitro.ModifierCollection.RevertAllByObject(UnityEngine.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: RevertAllByObject
        path: ''
        startLine: 60446
      summary: "\nReverts all modifiers that have been tied to a specific object\n"
      example: []
      syntax:
        content:
          CSharp: public void RevertAllByObject(UnityEngine.Object tiedObject)
          VB: Public Sub RevertAllByObject(tiedObject As UnityEngine.Object)
        parameters:
        - id: tiedObject
          type: Global.UnityEngine.Object
          description: The object the modifiers are tied to
      overload: Nitro.ModifierCollection.RevertAllByObject*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.ModifierCollection.Clear
      commentId: M:Nitro.ModifierCollection.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: ModifierCollection.Clear()
        VB: ModifierCollection.Clear()
      qualifiedName:
        CSharp: Nitro.ModifierCollection.Clear()
        VB: Nitro.ModifierCollection.Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Clear
        path: ''
        startLine: 60460
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear
      overload: Nitro.ModifierCollection.Clear*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.ModifierCollection.Contains(Nitro.IModifier)
      commentId: M:Nitro.ModifierCollection.Contains(Nitro.IModifier)
      language: CSharp
      name:
        CSharp: Contains(IModifier)
        VB: Contains(IModifier)
      nameWithType:
        CSharp: ModifierCollection.Contains(IModifier)
        VB: ModifierCollection.Contains(IModifier)
      qualifiedName:
        CSharp: Nitro.ModifierCollection.Contains(Nitro.IModifier)
        VB: Nitro.ModifierCollection.Contains(Nitro.IModifier)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Contains
        path: ''
        startLine: 60466
      syntax:
        content:
          CSharp: public bool Contains(IModifier item)
          VB: Public Function Contains(item As IModifier) As Boolean
        parameters:
        - id: item
          type: Nitro.IModifier
        return:
          type: System.Boolean
      overload: Nitro.ModifierCollection.Contains*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.ModifierCollection.CopyTo(Nitro.IModifier[],System.Int32)
      commentId: M:Nitro.ModifierCollection.CopyTo(Nitro.IModifier[],System.Int32)
      language: CSharp
      name:
        CSharp: CopyTo(IModifier[], Int32)
        VB: CopyTo(IModifier(), Int32)
      nameWithType:
        CSharp: ModifierCollection.CopyTo(IModifier[], Int32)
        VB: ModifierCollection.CopyTo(IModifier(), Int32)
      qualifiedName:
        CSharp: Nitro.ModifierCollection.CopyTo(Nitro.IModifier[], System.Int32)
        VB: Nitro.ModifierCollection.CopyTo(Nitro.IModifier(), System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: CopyTo
        path: ''
        startLine: 60471
      syntax:
        content:
          CSharp: public void CopyTo(IModifier[] array, int arrayIndex)
          VB: Public Sub CopyTo(array As IModifier(), arrayIndex As Integer)
        parameters:
        - id: array
          type: Nitro.IModifier[]
        - id: arrayIndex
          type: System.Int32
      overload: Nitro.ModifierCollection.CopyTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.ModifierCollection.Remove(Nitro.IModifier)
      commentId: M:Nitro.ModifierCollection.Remove(Nitro.IModifier)
      language: CSharp
      name:
        CSharp: Remove(IModifier)
        VB: Remove(IModifier)
      nameWithType:
        CSharp: ModifierCollection.Remove(IModifier)
        VB: ModifierCollection.Remove(IModifier)
      qualifiedName:
        CSharp: Nitro.ModifierCollection.Remove(Nitro.IModifier)
        VB: Nitro.ModifierCollection.Remove(Nitro.IModifier)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Remove
        path: ''
        startLine: 60476
      syntax:
        content:
          CSharp: public bool Remove(IModifier item)
          VB: Public Function Remove(item As IModifier) As Boolean
        parameters:
        - id: item
          type: Nitro.IModifier
        return:
          type: System.Boolean
      overload: Nitro.ModifierCollection.Remove*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.ModifierCollection.GetEnumerator
      commentId: M:Nitro.ModifierCollection.GetEnumerator
      language: CSharp
      name:
        CSharp: GetEnumerator()
        VB: GetEnumerator()
      nameWithType:
        CSharp: ModifierCollection.GetEnumerator()
        VB: ModifierCollection.GetEnumerator()
      qualifiedName:
        CSharp: Nitro.ModifierCollection.GetEnumerator()
        VB: Nitro.ModifierCollection.GetEnumerator()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: GetEnumerator
        path: ''
        startLine: 60491
      syntax:
        content:
          CSharp: public IEnumerator<IModifier> GetEnumerator()
          VB: Public Function GetEnumerator As IEnumerator(Of IModifier)
        return:
          type: System.Collections.Generic.IEnumerator{Nitro.IModifier}
      overload: Nitro.ModifierCollection.GetEnumerator*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.ModifierCollection.IndexOf(Nitro.IModifier)
      commentId: M:Nitro.ModifierCollection.IndexOf(Nitro.IModifier)
      language: CSharp
      name:
        CSharp: IndexOf(IModifier)
        VB: IndexOf(IModifier)
      nameWithType:
        CSharp: ModifierCollection.IndexOf(IModifier)
        VB: ModifierCollection.IndexOf(IModifier)
      qualifiedName:
        CSharp: Nitro.ModifierCollection.IndexOf(Nitro.IModifier)
        VB: Nitro.ModifierCollection.IndexOf(Nitro.IModifier)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: IndexOf
        path: ''
        startLine: 60501
      syntax:
        content:
          CSharp: public int IndexOf(IModifier item)
          VB: Public Function IndexOf(item As IModifier) As Integer
        parameters:
        - id: item
          type: Nitro.IModifier
        return:
          type: System.Int32
      overload: Nitro.ModifierCollection.IndexOf*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.ModifierCollection.CopyTo(Array,System.Int32)
      commentId: M:Nitro.ModifierCollection.CopyTo(Array,System.Int32)
      language: CSharp
      name:
        CSharp: CopyTo(Array, Int32)
        VB: CopyTo(Array, Int32)
      nameWithType:
        CSharp: ModifierCollection.CopyTo(Array, Int32)
        VB: ModifierCollection.CopyTo(Array, Int32)
      qualifiedName:
        CSharp: Nitro.ModifierCollection.CopyTo(Array, System.Int32)
        VB: Nitro.ModifierCollection.CopyTo(Array, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: CopyTo
        path: ''
        startLine: 60506
      syntax:
        content:
          CSharp: public void CopyTo(Array array, int index)
          VB: Public Sub CopyTo(array As Array, index As Integer)
        parameters:
        - id: array
          type: Global.Array
        - id: index
          type: System.Int32
      overload: Nitro.ModifierCollection.CopyTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.ModifierCollection.Contains(System.Object)
      commentId: M:Nitro.ModifierCollection.Contains(System.Object)
      language: CSharp
      name:
        CSharp: Contains(Object)
        VB: Contains(Object)
      nameWithType:
        CSharp: ModifierCollection.Contains(Object)
        VB: ModifierCollection.Contains(Object)
      qualifiedName:
        CSharp: Nitro.ModifierCollection.Contains(System.Object)
        VB: Nitro.ModifierCollection.Contains(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Contains
        path: ''
        startLine: 60511
      syntax:
        content:
          CSharp: public bool Contains(object value)
          VB: Public Function Contains(value As Object) As Boolean
        parameters:
        - id: value
          type: System.Object
        return:
          type: System.Boolean
      overload: Nitro.ModifierCollection.Contains*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.ModifierCollection.IndexOf(System.Object)
      commentId: M:Nitro.ModifierCollection.IndexOf(System.Object)
      language: CSharp
      name:
        CSharp: IndexOf(Object)
        VB: IndexOf(Object)
      nameWithType:
        CSharp: ModifierCollection.IndexOf(Object)
        VB: ModifierCollection.IndexOf(Object)
      qualifiedName:
        CSharp: Nitro.ModifierCollection.IndexOf(System.Object)
        VB: Nitro.ModifierCollection.IndexOf(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: IndexOf
        path: ''
        startLine: 60520
      syntax:
        content:
          CSharp: public int IndexOf(object value)
          VB: Public Function IndexOf(value As Object) As Integer
        parameters:
        - id: value
          type: System.Object
        return:
          type: System.Int32
      overload: Nitro.ModifierCollection.IndexOf*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.ModifierCollection.Remove(System.Object)
      commentId: M:Nitro.ModifierCollection.Remove(System.Object)
      language: CSharp
      name:
        CSharp: Remove(Object)
        VB: Remove(Object)
      nameWithType:
        CSharp: ModifierCollection.Remove(Object)
        VB: ModifierCollection.Remove(Object)
      qualifiedName:
        CSharp: Nitro.ModifierCollection.Remove(System.Object)
        VB: Nitro.ModifierCollection.Remove(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Remove
        path: ''
        startLine: 60529
      syntax:
        content:
          CSharp: public void Remove(object value)
          VB: Public Sub Remove(value As Object)
        parameters:
        - id: value
          type: System.Object
      overload: Nitro.ModifierCollection.Remove*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Nitro.MultiplePowerupCollector
    commentId: T:Nitro.MultiplePowerupCollector
    language: CSharp
    name:
      CSharp: MultiplePowerupCollector
      VB: MultiplePowerupCollector
    nameWithType:
      CSharp: MultiplePowerupCollector
      VB: MultiplePowerupCollector
    qualifiedName:
      CSharp: Nitro.MultiplePowerupCollector
      VB: Nitro.MultiplePowerupCollector
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: MultiplePowerupCollector
      path: ''
      startLine: 60549
    summary: "\nA collector that can collect multiple powerups\n"
    example: []
    syntax:
      content:
        CSharp: 'public class MultiplePowerupCollector : Collector, IMultiplePowerupCollector, ICollector'
        VB: >-
          Public Class MultiplePowerupCollector

              Inherits Collector

              Implements IMultiplePowerupCollector, ICollector
    inheritance:
    - System.Object
    - Nitro.Collector
    implements:
    - Nitro.IMultiplePowerupCollector
    - Nitro.ICollector
    inheritedMembers:
    - Nitro.Collector.CollectorEnabled
    - Nitro.Collector.CollectOnContact
    - Nitro.Collector.PowerupCollectEvent
    - Nitro.Collector.CollectPowerup(Nitro.IPowerup)
    - Nitro.Collector.OnTriggerEnter(Collider)
    - Nitro.Collector.OnTriggerEnter2D(Collider2D)
    - Nitro.Collector.OnCollisionEnter(Collision)
    - Nitro.Collector.OnCollisionEnter2D(Collision2D)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Nitro.MultiplePowerupCollector.maxPowerupsHeld
      commentId: F:Nitro.MultiplePowerupCollector.maxPowerupsHeld
      language: CSharp
      name:
        CSharp: maxPowerupsHeld
        VB: maxPowerupsHeld
      nameWithType:
        CSharp: MultiplePowerupCollector.maxPowerupsHeld
        VB: MultiplePowerupCollector.maxPowerupsHeld
      qualifiedName:
        CSharp: Nitro.MultiplePowerupCollector.maxPowerupsHeld
        VB: Nitro.MultiplePowerupCollector.maxPowerupsHeld
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: maxPowerupsHeld
        path: ''
        startLine: 60552
      syntax:
        content:
          CSharp: public int maxPowerupsHeld
          VB: Public maxPowerupsHeld As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.MultiplePowerupCollector.DifferingTypesRequired
      commentId: F:Nitro.MultiplePowerupCollector.DifferingTypesRequired
      language: CSharp
      name:
        CSharp: DifferingTypesRequired
        VB: DifferingTypesRequired
      nameWithType:
        CSharp: MultiplePowerupCollector.DifferingTypesRequired
        VB: MultiplePowerupCollector.DifferingTypesRequired
      qualifiedName:
        CSharp: Nitro.MultiplePowerupCollector.DifferingTypesRequired
        VB: Nitro.MultiplePowerupCollector.DifferingTypesRequired
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: DifferingTypesRequired
        path: ''
        startLine: 60555
      syntax:
        content:
          CSharp: public bool DifferingTypesRequired
          VB: Public DifferingTypesRequired As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.MultiplePowerupCollector.MaxPowerupsHeld
      commentId: P:Nitro.MultiplePowerupCollector.MaxPowerupsHeld
      language: CSharp
      name:
        CSharp: MaxPowerupsHeld
        VB: MaxPowerupsHeld
      nameWithType:
        CSharp: MultiplePowerupCollector.MaxPowerupsHeld
        VB: MultiplePowerupCollector.MaxPowerupsHeld
      qualifiedName:
        CSharp: Nitro.MultiplePowerupCollector.MaxPowerupsHeld
        VB: Nitro.MultiplePowerupCollector.MaxPowerupsHeld
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: MaxPowerupsHeld
        path: ''
        startLine: 60557
      syntax:
        content:
          CSharp: public int MaxPowerupsHeld { get; }
          VB: Public ReadOnly Property MaxPowerupsHeld As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Nitro.MultiplePowerupCollector.MaxPowerupsHeld*
      implements:
      - Nitro.IMultiplePowerupCollector.MaxPowerupsHeld
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.MultiplePowerupCollector.CollectedPowerups
      commentId: P:Nitro.MultiplePowerupCollector.CollectedPowerups
      language: CSharp
      name:
        CSharp: CollectedPowerups
        VB: CollectedPowerups
      nameWithType:
        CSharp: MultiplePowerupCollector.CollectedPowerups
        VB: MultiplePowerupCollector.CollectedPowerups
      qualifiedName:
        CSharp: Nitro.MultiplePowerupCollector.CollectedPowerups
        VB: Nitro.MultiplePowerupCollector.CollectedPowerups
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: CollectedPowerups
        path: ''
        startLine: 60565
      syntax:
        content:
          CSharp: public IEnumerable<ICombinablePowerup> CollectedPowerups { get; }
          VB: Public ReadOnly Property CollectedPowerups As IEnumerable(Of ICombinablePowerup)
        parameters: []
        return:
          type: System.Collections.Generic.IEnumerable{Nitro.ICombinablePowerup}
      overload: Nitro.MultiplePowerupCollector.CollectedPowerups*
      implements:
      - Nitro.IMultiplePowerupCollector.CollectedPowerups
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.MultiplePowerupCollector.CanCollectPowerup(Nitro.IPowerup)
      commentId: M:Nitro.MultiplePowerupCollector.CanCollectPowerup(Nitro.IPowerup)
      language: CSharp
      name:
        CSharp: CanCollectPowerup(IPowerup)
        VB: CanCollectPowerup(IPowerup)
      nameWithType:
        CSharp: MultiplePowerupCollector.CanCollectPowerup(IPowerup)
        VB: MultiplePowerupCollector.CanCollectPowerup(IPowerup)
      qualifiedName:
        CSharp: Nitro.MultiplePowerupCollector.CanCollectPowerup(Nitro.IPowerup)
        VB: Nitro.MultiplePowerupCollector.CanCollectPowerup(Nitro.IPowerup)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: CanCollectPowerup
        path: ''
        startLine: 60568
      example: []
      syntax:
        content:
          CSharp: public override bool CanCollectPowerup(IPowerup powerup)
          VB: Public Overrides Function CanCollectPowerup(powerup As IPowerup) As Boolean
        parameters:
        - id: powerup
          type: Nitro.IPowerup
        return:
          type: System.Boolean
      overload: Nitro.MultiplePowerupCollector.CanCollectPowerup*
      overridden: Nitro.Collector.CanCollectPowerup(Nitro.IPowerup)
      implements:
      - Nitro.ICollector.CanCollectPowerup(Nitro.IPowerup)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Nitro.MultiplePowerupCollector.Execute
      commentId: M:Nitro.MultiplePowerupCollector.Execute
      language: CSharp
      name:
        CSharp: Execute()
        VB: Execute()
      nameWithType:
        CSharp: MultiplePowerupCollector.Execute()
        VB: MultiplePowerupCollector.Execute()
      qualifiedName:
        CSharp: Nitro.MultiplePowerupCollector.Execute()
        VB: Nitro.MultiplePowerupCollector.Execute()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Execute
        path: ''
        startLine: 60581
      example: []
      syntax:
        content:
          CSharp: public override void Execute()
          VB: Public Overrides Sub Execute
      overload: Nitro.MultiplePowerupCollector.Execute*
      overridden: Nitro.Collector.Execute
      implements:
      - Nitro.ICollector.Execute
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Nitro.MultiplePowerupCollector.OnCollect(Nitro.IPowerup)
      commentId: M:Nitro.MultiplePowerupCollector.OnCollect(Nitro.IPowerup)
      language: CSharp
      name:
        CSharp: OnCollect(IPowerup)
        VB: OnCollect(IPowerup)
      nameWithType:
        CSharp: MultiplePowerupCollector.OnCollect(IPowerup)
        VB: MultiplePowerupCollector.OnCollect(IPowerup)
      qualifiedName:
        CSharp: Nitro.MultiplePowerupCollector.OnCollect(Nitro.IPowerup)
        VB: Nitro.MultiplePowerupCollector.OnCollect(Nitro.IPowerup)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnCollect
        path: ''
        startLine: 60591
      example: []
      syntax:
        content:
          CSharp: protected override void OnCollect(IPowerup powerup)
          VB: Protected Overrides Sub OnCollect(powerup As IPowerup)
        parameters:
        - id: powerup
          type: Nitro.IPowerup
      overload: Nitro.MultiplePowerupCollector.OnCollect*
      overridden: Nitro.Collector.OnCollect(Nitro.IPowerup)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: Nitro.Powerup
    commentId: T:Nitro.Powerup
    language: CSharp
    name:
      CSharp: Powerup
      VB: Powerup
    nameWithType:
      CSharp: Powerup
      VB: Powerup
    qualifiedName:
      CSharp: Nitro.Powerup
      VB: Nitro.Powerup
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: Powerup
      path: ''
      startLine: 60607
    summary: "\nThe base class for all powerups\n"
    example: []
    syntax:
      content:
        CSharp: 'public abstract class Powerup : MonoBehaviour, IPowerup'
        VB: >-
          Public MustInherit Class Powerup

              Inherits MonoBehaviour

              Implements IPowerup
    inheritance:
    - System.Object
    implements:
    - Nitro.IPowerup
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Nitro.Powerup.Collector
      commentId: P:Nitro.Powerup.Collector
      language: CSharp
      name:
        CSharp: Collector
        VB: Collector
      nameWithType:
        CSharp: Powerup.Collector
        VB: Powerup.Collector
      qualifiedName:
        CSharp: Nitro.Powerup.Collector
        VB: Nitro.Powerup.Collector
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Collector
        path: ''
        startLine: 60612
      summary: "\nThe collector that collected the powerup\n"
      example: []
      syntax:
        content:
          CSharp: public ICollector Collector { get; }
          VB: Public ReadOnly Property Collector As ICollector
        parameters: []
        return:
          type: Nitro.ICollector
      overload: Nitro.Powerup.Collector*
      implements:
      - Nitro.IPowerup.Collector
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.Powerup.hideObjectOnCollect
      commentId: F:Nitro.Powerup.hideObjectOnCollect
      language: CSharp
      name:
        CSharp: hideObjectOnCollect
        VB: hideObjectOnCollect
      nameWithType:
        CSharp: Powerup.hideObjectOnCollect
        VB: Powerup.hideObjectOnCollect
      qualifiedName:
        CSharp: Nitro.Powerup.hideObjectOnCollect
        VB: Nitro.Powerup.hideObjectOnCollect
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: hideObjectOnCollect
        path: ''
        startLine: 60616
      syntax:
        content:
          CSharp: protected bool hideObjectOnCollect
          VB: Protected hideObjectOnCollect As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Nitro.Powerup.HideObjectOnCollect
      commentId: P:Nitro.Powerup.HideObjectOnCollect
      language: CSharp
      name:
        CSharp: HideObjectOnCollect
        VB: HideObjectOnCollect
      nameWithType:
        CSharp: Powerup.HideObjectOnCollect
        VB: Powerup.HideObjectOnCollect
      qualifiedName:
        CSharp: Nitro.Powerup.HideObjectOnCollect
        VB: Nitro.Powerup.HideObjectOnCollect
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: HideObjectOnCollect
        path: ''
        startLine: 60618
      syntax:
        content:
          CSharp: public bool HideObjectOnCollect { get; }
          VB: Public ReadOnly Property HideObjectOnCollect As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Nitro.Powerup.HideObjectOnCollect*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.Powerup.DoAction
      commentId: M:Nitro.Powerup.DoAction
      language: CSharp
      name:
        CSharp: DoAction()
        VB: DoAction()
      nameWithType:
        CSharp: Powerup.DoAction()
        VB: Powerup.DoAction()
      qualifiedName:
        CSharp: Nitro.Powerup.DoAction()
        VB: Nitro.Powerup.DoAction()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: DoAction
        path: ''
        startLine: 60624
      summary: "\nThe main action of the powerup\n"
      example: []
      syntax:
        content:
          CSharp: public abstract void DoAction()
          VB: Public MustOverride Sub DoAction
      overload: Nitro.Powerup.DoAction*
      implements:
      - Nitro.IPowerup.DoAction
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
    - id: Nitro.Powerup.OnCollect(Nitro.ICollector)
      commentId: M:Nitro.Powerup.OnCollect(Nitro.ICollector)
      language: CSharp
      name:
        CSharp: OnCollect(ICollector)
        VB: OnCollect(ICollector)
      nameWithType:
        CSharp: Powerup.OnCollect(ICollector)
        VB: Powerup.OnCollect(ICollector)
      qualifiedName:
        CSharp: Nitro.Powerup.OnCollect(Nitro.ICollector)
        VB: Nitro.Powerup.OnCollect(Nitro.ICollector)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnCollect
        path: ''
        startLine: 60630
      summary: "\nCalled when the powerup has been collected\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void OnCollect(ICollector collector)
          VB: Public Overridable Sub OnCollect(collector As ICollector)
        parameters:
        - id: collector
          type: Nitro.ICollector
          description: The collector that has collected the powerup
      overload: Nitro.Powerup.OnCollect*
      implements:
      - Nitro.IPowerup.OnCollect(Nitro.ICollector)
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Nitro.Powerup.DoneUsingPowerup
      commentId: M:Nitro.Powerup.DoneUsingPowerup
      language: CSharp
      name:
        CSharp: DoneUsingPowerup()
        VB: DoneUsingPowerup()
      nameWithType:
        CSharp: Powerup.DoneUsingPowerup()
        VB: Powerup.DoneUsingPowerup()
      qualifiedName:
        CSharp: Nitro.Powerup.DoneUsingPowerup()
        VB: Nitro.Powerup.DoneUsingPowerup()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: DoneUsingPowerup
        path: ''
        startLine: 60661
      summary: "\nUsed to dispose of the powerup when done\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void DoneUsingPowerup()
          VB: Public Overridable Sub DoneUsingPowerup
      overload: Nitro.Powerup.DoneUsingPowerup*
      implements:
      - Nitro.IPowerup.DoneUsingPowerup
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Nitro.Powerup.DoneUsingPowerupAfter(System.Single,Action)
      commentId: M:Nitro.Powerup.DoneUsingPowerupAfter(System.Single,Action)
      language: CSharp
      name:
        CSharp: DoneUsingPowerupAfter(Single, Action)
        VB: DoneUsingPowerupAfter(Single, Action)
      nameWithType:
        CSharp: Powerup.DoneUsingPowerupAfter(Single, Action)
        VB: Powerup.DoneUsingPowerupAfter(Single, Action)
      qualifiedName:
        CSharp: Nitro.Powerup.DoneUsingPowerupAfter(System.Single, Action)
        VB: Nitro.Powerup.DoneUsingPowerupAfter(System.Single, Action)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: DoneUsingPowerupAfter
        path: ''
        startLine: 60671
      summary: "\nUsed to dispose of the powerup after a set amount of time\n"
      example: []
      syntax:
        content:
          CSharp: public void DoneUsingPowerupAfter(float lifetime, Action onDone = null)
          VB: Public Sub DoneUsingPowerupAfter(lifetime As Single, onDone As Action = Nothing)
        parameters:
        - id: lifetime
          type: System.Single
          description: How long before the powerup is destroyed
        - id: onDone
          type: Global.Action
      overload: Nitro.Powerup.DoneUsingPowerupAfter*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Nitro.RevertableVar`1
    commentId: T:Nitro.RevertableVar`1
    language: CSharp
    name:
      CSharp: RevertableVar<T>
      VB: RevertableVar(Of T)
    nameWithType:
      CSharp: RevertableVar<T>
      VB: RevertableVar(Of T)
    qualifiedName:
      CSharp: Nitro.RevertableVar<T>
      VB: Nitro.RevertableVar(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: RevertableVar
      path: ''
      startLine: 60695
    summary: "\nA variable that allows you to easily modify it&apos;s value and revert it back to it&apos;s original value\n"
    example: []
    syntax:
      content:
        CSharp: 'public sealed class RevertableVar<T> : IRevertableVar'
        VB: >-
          Public NotInheritable Class RevertableVar(Of T)

              Implements IRevertableVar
      typeParameters:
      - id: T
        description: The type of variable the RevertableVar is going to hold
    inheritance:
    - System.Object
    implements:
    - Nitro.IRevertableVar
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Nitro.RevertableVar`1.#ctor(`0)
      commentId: M:Nitro.RevertableVar`1.#ctor(`0)
      language: CSharp
      name:
        CSharp: RevertableVar(T)
        VB: RevertableVar(T)
      nameWithType:
        CSharp: RevertableVar<T>.RevertableVar(T)
        VB: RevertableVar(Of T).RevertableVar(T)
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.RevertableVar(T)
        VB: Nitro.RevertableVar(Of T).RevertableVar(T)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: .ctor
        path: ''
        startLine: 60745
      summary: "\nConstructs a new revertable variable\n"
      example: []
      syntax:
        content:
          CSharp: public RevertableVar(T baseValue)
          VB: Public Sub New(baseValue As T)
        parameters:
        - id: baseValue
          type: '{T}'
          description: The base value of the variable
      overload: Nitro.RevertableVar`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.RevertableVar`1.#ctor
      commentId: M:Nitro.RevertableVar`1.#ctor
      language: CSharp
      name:
        CSharp: RevertableVar()
        VB: RevertableVar()
      nameWithType:
        CSharp: RevertableVar<T>.RevertableVar()
        VB: RevertableVar(Of T).RevertableVar()
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.RevertableVar()
        VB: Nitro.RevertableVar(Of T).RevertableVar()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: .ctor
        path: ''
        startLine: 60754
      summary: "\nConstructs a new revertable variable\n"
      example: []
      syntax:
        content:
          CSharp: public RevertableVar()
          VB: Public Sub New
      overload: Nitro.RevertableVar`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - isEii: true
      id: Nitro.RevertableVar`1.Nitro#IRevertableVar#BaseValue
      commentId: P:Nitro.RevertableVar`1.Nitro#IRevertableVar#BaseValue
      language: CSharp
      name:
        CSharp: IRevertableVar.BaseValue
        VB: Nitro.IRevertableVar.BaseValue
      nameWithType:
        CSharp: RevertableVar<T>.IRevertableVar.BaseValue
        VB: RevertableVar(Of T).Nitro.IRevertableVar.BaseValue
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.Nitro.IRevertableVar.BaseValue
        VB: Nitro.RevertableVar(Of T).Nitro.IRevertableVar.BaseValue
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Nitro.IRevertableVar.BaseValue
        path: ''
        startLine: 60758
      example: []
      syntax:
        content:
          CSharp: object IRevertableVar.BaseValue { get; set; }
          VB: ReadOnly WriteOnly Property Nitro.IRevertableVar.BaseValue As Object Implements IRevertableVar.BaseValue
        parameters: []
        return:
          type: System.Object
      overload: Nitro.RevertableVar`1.Nitro#IRevertableVar#BaseValue*
      implements:
      - Nitro.IRevertableVar.BaseValue
      modifiers:
        CSharp:
        - get
        - set
        VB: []
    - isEii: true
      id: Nitro.RevertableVar`1.Nitro#IRevertableVar#Value
      commentId: P:Nitro.RevertableVar`1.Nitro#IRevertableVar#Value
      language: CSharp
      name:
        CSharp: IRevertableVar.Value
        VB: Nitro.IRevertableVar.Value
      nameWithType:
        CSharp: RevertableVar<T>.IRevertableVar.Value
        VB: RevertableVar(Of T).Nitro.IRevertableVar.Value
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.Nitro.IRevertableVar.Value
        VB: Nitro.RevertableVar(Of T).Nitro.IRevertableVar.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Nitro.IRevertableVar.Value
        path: ''
        startLine: 60761
      example: []
      syntax:
        content:
          CSharp: object IRevertableVar.Value { get; }
          VB: ReadOnly WriteOnly Property Nitro.IRevertableVar.Value As Object Implements IRevertableVar.Value
        parameters: []
        return:
          type: System.Object
      overload: Nitro.RevertableVar`1.Nitro#IRevertableVar#Value*
      implements:
      - Nitro.IRevertableVar.Value
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - isEii: true
      id: Nitro.RevertableVar`1.Nitro#IRevertableVar#ModifiersApplied
      commentId: P:Nitro.RevertableVar`1.Nitro#IRevertableVar#ModifiersApplied
      language: CSharp
      name:
        CSharp: IRevertableVar.ModifiersApplied
        VB: Nitro.IRevertableVar.ModifiersApplied
      nameWithType:
        CSharp: RevertableVar<T>.IRevertableVar.ModifiersApplied
        VB: RevertableVar(Of T).Nitro.IRevertableVar.ModifiersApplied
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.Nitro.IRevertableVar.ModifiersApplied
        VB: Nitro.RevertableVar(Of T).Nitro.IRevertableVar.ModifiersApplied
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Nitro.IRevertableVar.ModifiersApplied
        path: ''
        startLine: 60764
      example: []
      syntax:
        content:
          CSharp: int IRevertableVar.ModifiersApplied { get; }
          VB: ReadOnly WriteOnly Property Nitro.IRevertableVar.ModifiersApplied As Integer Implements IRevertableVar.ModifiersApplied
        parameters: []
        return:
          type: System.Int32
      overload: Nitro.RevertableVar`1.Nitro#IRevertableVar#ModifiersApplied*
      implements:
      - Nitro.IRevertableVar.ModifiersApplied
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - isEii: true
      id: Nitro.RevertableVar`1.Nitro#IRevertableVar#ValueType
      commentId: P:Nitro.RevertableVar`1.Nitro#IRevertableVar#ValueType
      language: CSharp
      name:
        CSharp: IRevertableVar.ValueType
        VB: Nitro.IRevertableVar.ValueType
      nameWithType:
        CSharp: RevertableVar<T>.IRevertableVar.ValueType
        VB: RevertableVar(Of T).Nitro.IRevertableVar.ValueType
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.Nitro.IRevertableVar.ValueType
        VB: Nitro.RevertableVar(Of T).Nitro.IRevertableVar.ValueType
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Nitro.IRevertableVar.ValueType
        path: ''
        startLine: 60767
      example: []
      syntax:
        content:
          CSharp: Type IRevertableVar.ValueType { get; }
          VB: ReadOnly WriteOnly Property Nitro.IRevertableVar.ValueType As Type Implements IRevertableVar.ValueType
        parameters: []
        return:
          type: Global.Type
      overload: Nitro.RevertableVar`1.Nitro#IRevertableVar#ValueType*
      implements:
      - Nitro.IRevertableVar.ValueType
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Nitro.RevertableVar`1.Value
      commentId: P:Nitro.RevertableVar`1.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: RevertableVar<T>.Value
        VB: RevertableVar(Of T).Value
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.Value
        VB: Nitro.RevertableVar(Of T).Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Value
        path: ''
        startLine: 60781
      summary: "\nThe current value of the revertable variable, with all of it&apos;s modifiers applied\n"
      example: []
      syntax:
        content:
          CSharp: public T Value { get; }
          VB: Public ReadOnly Property Value As T
        parameters: []
        return:
          type: '{T}'
      overload: Nitro.RevertableVar`1.Value*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.RevertableVar`1.BaseValue
      commentId: P:Nitro.RevertableVar`1.BaseValue
      language: CSharp
      name:
        CSharp: BaseValue
        VB: BaseValue
      nameWithType:
        CSharp: RevertableVar<T>.BaseValue
        VB: RevertableVar(Of T).BaseValue
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.BaseValue
        VB: Nitro.RevertableVar(Of T).BaseValue
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: BaseValue
        path: ''
        startLine: 60787
      summary: "\nThe base value of the revertable variable\n"
      example: []
      syntax:
        content:
          CSharp: public T BaseValue { get; set; }
          VB: Public Property BaseValue As T
        parameters: []
        return:
          type: '{T}'
      overload: Nitro.RevertableVar`1.BaseValue*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Nitro.RevertableVar`1.OnValueUpdated
      commentId: E:Nitro.RevertableVar`1.OnValueUpdated
      language: CSharp
      name:
        CSharp: OnValueUpdated
        VB: OnValueUpdated
      nameWithType:
        CSharp: RevertableVar<T>.OnValueUpdated
        VB: RevertableVar(Of T).OnValueUpdated
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.OnValueUpdated
        VB: Nitro.RevertableVar(Of T).OnValueUpdated
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnValueUpdated
        path: ''
        startLine: 60802
      syntax:
        content:
          CSharp: public event RevertableVar<T>.OnValueUpdatedDelegate OnValueUpdated
          VB: Public Event OnValueUpdated As RevertableVar(Of T).OnValueUpdatedDelegate
        return:
          type: Nitro.RevertableVar`1.OnValueUpdatedDelegate
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Nitro.RevertableVar`1.ModifiersApplied
      commentId: P:Nitro.RevertableVar`1.ModifiersApplied
      language: CSharp
      name:
        CSharp: ModifiersApplied
        VB: ModifiersApplied
      nameWithType:
        CSharp: RevertableVar<T>.ModifiersApplied
        VB: RevertableVar(Of T).ModifiersApplied
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.ModifiersApplied
        VB: Nitro.RevertableVar(Of T).ModifiersApplied
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: ModifiersApplied
        path: ''
        startLine: 60807
      summary: "\nHow many modifiers are currently being applied to this revertible variable\n"
      example: []
      syntax:
        content:
          CSharp: public int ModifiersApplied { get; }
          VB: Public ReadOnly Property ModifiersApplied As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Nitro.RevertableVar`1.ModifiersApplied*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.RevertableVar`1.MultiplyBy(`0,UnityEngine.Object,System.Int32)
      commentId: M:Nitro.RevertableVar`1.MultiplyBy(`0,UnityEngine.Object,System.Int32)
      language: CSharp
      name:
        CSharp: MultiplyBy(T, UnityEngine.Object, Int32)
        VB: MultiplyBy(T, UnityEngine.Object, Int32)
      nameWithType:
        CSharp: RevertableVar<T>.MultiplyBy(T, UnityEngine.Object, Int32)
        VB: RevertableVar(Of T).MultiplyBy(T, UnityEngine.Object, Int32)
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.MultiplyBy(T, UnityEngine.Object, System.Int32)
        VB: Nitro.RevertableVar(Of T).MultiplyBy(T, UnityEngine.Object, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: MultiplyBy
        path: ''
        startLine: 60816
      summary: "\nApplies a multiplication to the variable.\n"
      example: []
      syntax:
        content:
          CSharp: public Modifier<T> MultiplyBy(T value, UnityEngine.Object boundObject = null, int priority = 0)
          VB: Public Function MultiplyBy(value As T, boundObject As UnityEngine.Object = Nothing, priority As Integer = 0) As Modifier(Of T)
        parameters:
        - id: value
          type: '{T}'
          description: The value to multiply the variable with
        - id: boundObject
          type: Global.UnityEngine.Object
          description: The object this modifier is bound to. When the bound object gets destroyed, the modifier gets reverted
        - id: priority
          type: System.Int32
          description: The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers
        return:
          type: Nitro.Modifier{{T}}
          description: Returns a reference to the modifier currently applied to this variable. Use <xref href="Nitro.Modifier%601.Revert" data-throw-if-not-resolved="false"></xref> to revert the modification
      overload: Nitro.RevertableVar`1.MultiplyBy*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Nitro.Modifier`1.Revert: 
    - id: Nitro.RevertableVar`1.DivideBy(`0,UnityEngine.Object,System.Int32)
      commentId: M:Nitro.RevertableVar`1.DivideBy(`0,UnityEngine.Object,System.Int32)
      language: CSharp
      name:
        CSharp: DivideBy(T, UnityEngine.Object, Int32)
        VB: DivideBy(T, UnityEngine.Object, Int32)
      nameWithType:
        CSharp: RevertableVar<T>.DivideBy(T, UnityEngine.Object, Int32)
        VB: RevertableVar(Of T).DivideBy(T, UnityEngine.Object, Int32)
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.DivideBy(T, UnityEngine.Object, System.Int32)
        VB: Nitro.RevertableVar(Of T).DivideBy(T, UnityEngine.Object, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: DivideBy
        path: ''
        startLine: 60828
      summary: "\nApplies a division to the variable.\n"
      example: []
      syntax:
        content:
          CSharp: public Modifier<T> DivideBy(T value, UnityEngine.Object boundObject = null, int priority = 0)
          VB: Public Function DivideBy(value As T, boundObject As UnityEngine.Object = Nothing, priority As Integer = 0) As Modifier(Of T)
        parameters:
        - id: value
          type: '{T}'
          description: The value to divide the variable with
        - id: boundObject
          type: Global.UnityEngine.Object
          description: The object this modifier is bound to. When the bound object gets destroyed, the modifier gets reverted
        - id: priority
          type: System.Int32
          description: The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers
        return:
          type: Nitro.Modifier{{T}}
          description: Returns a reference to the modifier currently applied to this variable. Use <xref href="Nitro.Modifier%601.Revert" data-throw-if-not-resolved="false"></xref> to revert the modification
      overload: Nitro.RevertableVar`1.DivideBy*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Nitro.Modifier`1.Revert: 
    - id: Nitro.RevertableVar`1.AddBy(`0,UnityEngine.Object,System.Int32)
      commentId: M:Nitro.RevertableVar`1.AddBy(`0,UnityEngine.Object,System.Int32)
      language: CSharp
      name:
        CSharp: AddBy(T, UnityEngine.Object, Int32)
        VB: AddBy(T, UnityEngine.Object, Int32)
      nameWithType:
        CSharp: RevertableVar<T>.AddBy(T, UnityEngine.Object, Int32)
        VB: RevertableVar(Of T).AddBy(T, UnityEngine.Object, Int32)
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.AddBy(T, UnityEngine.Object, System.Int32)
        VB: Nitro.RevertableVar(Of T).AddBy(T, UnityEngine.Object, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: AddBy
        path: ''
        startLine: 60840
      summary: "\nApplies an addition to the variable.\n"
      example: []
      syntax:
        content:
          CSharp: public Modifier<T> AddBy(T value, UnityEngine.Object boundObject = null, int priority = 0)
          VB: Public Function AddBy(value As T, boundObject As UnityEngine.Object = Nothing, priority As Integer = 0) As Modifier(Of T)
        parameters:
        - id: value
          type: '{T}'
          description: The value to add onto the variable
        - id: boundObject
          type: Global.UnityEngine.Object
          description: The object this modifier is bound to. When the bound object gets destroyed, the modifier gets reverted
        - id: priority
          type: System.Int32
          description: The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers
        return:
          type: Nitro.Modifier{{T}}
          description: Returns a reference to the modifier currently applied to this variable. Use <xref href="Nitro.Modifier%601.Revert" data-throw-if-not-resolved="false"></xref> to revert the modification
      overload: Nitro.RevertableVar`1.AddBy*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Nitro.Modifier`1.Revert: 
    - id: Nitro.RevertableVar`1.SubtractBy(`0,UnityEngine.Object,System.Int32)
      commentId: M:Nitro.RevertableVar`1.SubtractBy(`0,UnityEngine.Object,System.Int32)
      language: CSharp
      name:
        CSharp: SubtractBy(T, UnityEngine.Object, Int32)
        VB: SubtractBy(T, UnityEngine.Object, Int32)
      nameWithType:
        CSharp: RevertableVar<T>.SubtractBy(T, UnityEngine.Object, Int32)
        VB: RevertableVar(Of T).SubtractBy(T, UnityEngine.Object, Int32)
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.SubtractBy(T, UnityEngine.Object, System.Int32)
        VB: Nitro.RevertableVar(Of T).SubtractBy(T, UnityEngine.Object, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: SubtractBy
        path: ''
        startLine: 60852
      summary: "\nApplies an subtraction to the variable.\n"
      example: []
      syntax:
        content:
          CSharp: public Modifier<T> SubtractBy(T value, UnityEngine.Object boundObject = null, int priority = 0)
          VB: Public Function SubtractBy(value As T, boundObject As UnityEngine.Object = Nothing, priority As Integer = 0) As Modifier(Of T)
        parameters:
        - id: value
          type: '{T}'
          description: The value to subtract from the variable
        - id: boundObject
          type: Global.UnityEngine.Object
          description: The object this modifier is bound to. When the bound object gets destroyed, the modifier gets reverted
        - id: priority
          type: System.Int32
          description: The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers
        return:
          type: Nitro.Modifier{{T}}
          description: Returns a reference to the modifier currently applied to this variable. Use <xref href="Nitro.Modifier%601.Revert" data-throw-if-not-resolved="false"></xref> to revert the modification
      overload: Nitro.RevertableVar`1.SubtractBy*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Nitro.Modifier`1.Revert: 
    - id: Nitro.RevertableVar`1.Set(`0,UnityEngine.Object,System.Int32)
      commentId: M:Nitro.RevertableVar`1.Set(`0,UnityEngine.Object,System.Int32)
      language: CSharp
      name:
        CSharp: Set(T, UnityEngine.Object, Int32)
        VB: Set(T, UnityEngine.Object, Int32)
      nameWithType:
        CSharp: RevertableVar<T>.Set(T, UnityEngine.Object, Int32)
        VB: RevertableVar(Of T).Set(T, UnityEngine.Object, Int32)
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.Set(T, UnityEngine.Object, System.Int32)
        VB: Nitro.RevertableVar(Of T).Set(T, UnityEngine.Object, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Set
        path: ''
        startLine: 60864
      summary: "\nApplies an subtraction to the variable.\n"
      example: []
      syntax:
        content:
          CSharp: public Modifier<T> Set(T value, UnityEngine.Object boundObject = null, int priority = 0)
          VB: Public Function Set(value As T, boundObject As UnityEngine.Object = Nothing, priority As Integer = 0) As Modifier(Of T)
        parameters:
        - id: value
          type: '{T}'
          description: The value to subtract from the variable
        - id: boundObject
          type: Global.UnityEngine.Object
          description: The object this modifier is bound to. When the bound object gets destroyed, the modifier gets reverted
        - id: priority
          type: System.Int32
          description: The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers
        return:
          type: Nitro.Modifier{{T}}
          description: Returns a reference to the modifier currently applied to this variable. Use <xref href="Nitro.Modifier%601.Revert" data-throw-if-not-resolved="false"></xref> to revert the modification
      overload: Nitro.RevertableVar`1.Set*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Nitro.Modifier`1.Revert: 
    - id: Nitro.RevertableVar`1.MultiplyBy(`0,UnityEngine.Object,System.Int32,System.Single)
      commentId: M:Nitro.RevertableVar`1.MultiplyBy(`0,UnityEngine.Object,System.Int32,System.Single)
      language: CSharp
      name:
        CSharp: MultiplyBy(T, UnityEngine.Object, Int32, Single)
        VB: MultiplyBy(T, UnityEngine.Object, Int32, Single)
      nameWithType:
        CSharp: RevertableVar<T>.MultiplyBy(T, UnityEngine.Object, Int32, Single)
        VB: RevertableVar(Of T).MultiplyBy(T, UnityEngine.Object, Int32, Single)
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.MultiplyBy(T, UnityEngine.Object, System.Int32, System.Single)
        VB: Nitro.RevertableVar(Of T).MultiplyBy(T, UnityEngine.Object, System.Int32, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: MultiplyBy
        path: ''
        startLine: 60878
      summary: "\nApplies a multiplication to the variable.\n"
      example: []
      syntax:
        content:
          CSharp: public Modifier<T> MultiplyBy(T value, UnityEngine.Object boundObject, int priority, float timeActive)
          VB: Public Function MultiplyBy(value As T, boundObject As UnityEngine.Object, priority As Integer, timeActive As Single) As Modifier(Of T)
        parameters:
        - id: value
          type: '{T}'
          description: The value to multiply the variable with
        - id: boundObject
          type: Global.UnityEngine.Object
          description: The object this modifier is bound to. When the bound object gets destroyed, the modifier gets reverted
        - id: priority
          type: System.Int32
          description: The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers
        - id: timeActive
          type: System.Single
          description: The amount of time this modifier should remain active. Once the time is up, the modifier will be reverted
        return:
          type: Nitro.Modifier{{T}}
          description: Returns a reference to the modifier currently applied to this variable. Use <xref href="Nitro.Modifier%601.Revert" data-throw-if-not-resolved="false"></xref> to revert the modification
      overload: Nitro.RevertableVar`1.MultiplyBy*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Nitro.Modifier`1.Revert: 
    - id: Nitro.RevertableVar`1.DivideBy(`0,UnityEngine.Object,System.Int32,System.Single)
      commentId: M:Nitro.RevertableVar`1.DivideBy(`0,UnityEngine.Object,System.Int32,System.Single)
      language: CSharp
      name:
        CSharp: DivideBy(T, UnityEngine.Object, Int32, Single)
        VB: DivideBy(T, UnityEngine.Object, Int32, Single)
      nameWithType:
        CSharp: RevertableVar<T>.DivideBy(T, UnityEngine.Object, Int32, Single)
        VB: RevertableVar(Of T).DivideBy(T, UnityEngine.Object, Int32, Single)
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.DivideBy(T, UnityEngine.Object, System.Int32, System.Single)
        VB: Nitro.RevertableVar(Of T).DivideBy(T, UnityEngine.Object, System.Int32, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: DivideBy
        path: ''
        startLine: 60891
      summary: "\nApplies a division to the variable.\n"
      example: []
      syntax:
        content:
          CSharp: public Modifier<T> DivideBy(T value, UnityEngine.Object boundObject, int priority, float timeActive)
          VB: Public Function DivideBy(value As T, boundObject As UnityEngine.Object, priority As Integer, timeActive As Single) As Modifier(Of T)
        parameters:
        - id: value
          type: '{T}'
          description: The value to divide the variable with
        - id: boundObject
          type: Global.UnityEngine.Object
          description: The object this modifier is bound to. When the bound object gets destroyed, the modifier gets reverted
        - id: priority
          type: System.Int32
          description: The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers
        - id: timeActive
          type: System.Single
          description: The amount of time this modifier should remain active. Once the time is up, the modifier will be reverted
        return:
          type: Nitro.Modifier{{T}}
          description: Returns a reference to the modifier currently applied to this variable. Use <xref href="Nitro.Modifier%601.Revert" data-throw-if-not-resolved="false"></xref> to revert the modification
      overload: Nitro.RevertableVar`1.DivideBy*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Nitro.Modifier`1.Revert: 
    - id: Nitro.RevertableVar`1.AddBy(`0,UnityEngine.Object,System.Int32,System.Single)
      commentId: M:Nitro.RevertableVar`1.AddBy(`0,UnityEngine.Object,System.Int32,System.Single)
      language: CSharp
      name:
        CSharp: AddBy(T, UnityEngine.Object, Int32, Single)
        VB: AddBy(T, UnityEngine.Object, Int32, Single)
      nameWithType:
        CSharp: RevertableVar<T>.AddBy(T, UnityEngine.Object, Int32, Single)
        VB: RevertableVar(Of T).AddBy(T, UnityEngine.Object, Int32, Single)
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.AddBy(T, UnityEngine.Object, System.Int32, System.Single)
        VB: Nitro.RevertableVar(Of T).AddBy(T, UnityEngine.Object, System.Int32, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: AddBy
        path: ''
        startLine: 60904
      summary: "\nApplies an addition to the variable.\n"
      example: []
      syntax:
        content:
          CSharp: public Modifier<T> AddBy(T value, UnityEngine.Object boundObject, int priority, float timeActive)
          VB: Public Function AddBy(value As T, boundObject As UnityEngine.Object, priority As Integer, timeActive As Single) As Modifier(Of T)
        parameters:
        - id: value
          type: '{T}'
          description: The value to add onto the variable
        - id: boundObject
          type: Global.UnityEngine.Object
          description: The object this modifier is bound to. When the bound object gets destroyed, the modifier gets reverted
        - id: priority
          type: System.Int32
          description: The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers
        - id: timeActive
          type: System.Single
          description: The amount of time this modifier should remain active. Once the time is up, the modifier will be reverted
        return:
          type: Nitro.Modifier{{T}}
          description: Returns a reference to the modifier currently applied to this variable. Use <xref href="Nitro.Modifier%601.Revert" data-throw-if-not-resolved="false"></xref> to revert the modification
      overload: Nitro.RevertableVar`1.AddBy*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Nitro.Modifier`1.Revert: 
    - id: Nitro.RevertableVar`1.SubtractBy(`0,UnityEngine.Object,System.Int32,System.Single)
      commentId: M:Nitro.RevertableVar`1.SubtractBy(`0,UnityEngine.Object,System.Int32,System.Single)
      language: CSharp
      name:
        CSharp: SubtractBy(T, UnityEngine.Object, Int32, Single)
        VB: SubtractBy(T, UnityEngine.Object, Int32, Single)
      nameWithType:
        CSharp: RevertableVar<T>.SubtractBy(T, UnityEngine.Object, Int32, Single)
        VB: RevertableVar(Of T).SubtractBy(T, UnityEngine.Object, Int32, Single)
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.SubtractBy(T, UnityEngine.Object, System.Int32, System.Single)
        VB: Nitro.RevertableVar(Of T).SubtractBy(T, UnityEngine.Object, System.Int32, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: SubtractBy
        path: ''
        startLine: 60917
      summary: "\nApplies an subtraction to the variable.\n"
      example: []
      syntax:
        content:
          CSharp: public Modifier<T> SubtractBy(T value, UnityEngine.Object boundObject, int priority, float timeActive)
          VB: Public Function SubtractBy(value As T, boundObject As UnityEngine.Object, priority As Integer, timeActive As Single) As Modifier(Of T)
        parameters:
        - id: value
          type: '{T}'
          description: The value to subtract from the variable
        - id: boundObject
          type: Global.UnityEngine.Object
          description: The object this modifier is bound to. When the bound object gets destroyed, the modifier gets reverted
        - id: priority
          type: System.Int32
          description: The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers
        - id: timeActive
          type: System.Single
          description: The amount of time this modifier should remain active. Once the time is up, the modifier will be reverted
        return:
          type: Nitro.Modifier{{T}}
          description: Returns a reference to the modifier currently applied to this variable. Use <xref href="Nitro.Modifier%601.Revert" data-throw-if-not-resolved="false"></xref> to revert the modification
      overload: Nitro.RevertableVar`1.SubtractBy*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Nitro.Modifier`1.Revert: 
    - id: Nitro.RevertableVar`1.Set(`0,UnityEngine.Object,System.Int32,System.Single)
      commentId: M:Nitro.RevertableVar`1.Set(`0,UnityEngine.Object,System.Int32,System.Single)
      language: CSharp
      name:
        CSharp: Set(T, UnityEngine.Object, Int32, Single)
        VB: Set(T, UnityEngine.Object, Int32, Single)
      nameWithType:
        CSharp: RevertableVar<T>.Set(T, UnityEngine.Object, Int32, Single)
        VB: RevertableVar(Of T).Set(T, UnityEngine.Object, Int32, Single)
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.Set(T, UnityEngine.Object, System.Int32, System.Single)
        VB: Nitro.RevertableVar(Of T).Set(T, UnityEngine.Object, System.Int32, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Set
        path: ''
        startLine: 60930
      summary: "\nApplies an subtraction to the variable.\n"
      example: []
      syntax:
        content:
          CSharp: public Modifier<T> Set(T value, UnityEngine.Object boundObject, int priority, float timeActive)
          VB: Public Function Set(value As T, boundObject As UnityEngine.Object, priority As Integer, timeActive As Single) As Modifier(Of T)
        parameters:
        - id: value
          type: '{T}'
          description: The value to subtract from the variable
        - id: boundObject
          type: Global.UnityEngine.Object
          description: The object this modifier is bound to. When the bound object gets destroyed, the modifier gets reverted
        - id: priority
          type: System.Int32
          description: The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers
        - id: timeActive
          type: System.Single
          description: The amount of time this modifier should remain active. Once the time is up, the modifier will be reverted
        return:
          type: Nitro.Modifier{{T}}
          description: Returns a reference to the modifier currently applied to this variable. Use <xref href="Nitro.Modifier%601.Revert" data-throw-if-not-resolved="false"></xref> to revert the modification
      overload: Nitro.RevertableVar`1.Set*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Nitro.Modifier`1.Revert: 
    - id: Nitro.RevertableVar`1.Revert(Nitro.Modifier{`0})
      commentId: M:Nitro.RevertableVar`1.Revert(Nitro.Modifier{`0})
      language: CSharp
      name:
        CSharp: Revert(Modifier<T>)
        VB: Revert(Modifier(Of T))
      nameWithType:
        CSharp: RevertableVar<T>.Revert(Modifier<T>)
        VB: RevertableVar(Of T).Revert(Modifier(Of T))
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.Revert(Nitro.Modifier<T>)
        VB: Nitro.RevertableVar(Of T).Revert(Nitro.Modifier(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Revert
        path: ''
        startLine: 60962
      summary: "\nReverts a modifier\n"
      example: []
      syntax:
        content:
          CSharp: public void Revert(Modifier<T> modifier)
          VB: Public Sub Revert(modifier As Modifier(Of T))
        parameters:
        - id: modifier
          type: Nitro.Modifier{{T}}
          description: The modifier to revert
      overload: Nitro.RevertableVar`1.Revert*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - isEii: true
      id: Nitro.RevertableVar`1.Nitro#IRevertableVar#Revert(Nitro.IModifier)
      commentId: M:Nitro.RevertableVar`1.Nitro#IRevertableVar#Revert(Nitro.IModifier)
      language: CSharp
      name:
        CSharp: IRevertableVar.Revert(IModifier)
        VB: Nitro.IRevertableVar.Revert(IModifier)
      nameWithType:
        CSharp: RevertableVar<T>.IRevertableVar.Revert(IModifier)
        VB: RevertableVar(Of T).Nitro.IRevertableVar.Revert(IModifier)
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.Nitro.IRevertableVar.Revert(Nitro.IModifier)
        VB: Nitro.RevertableVar(Of T).Nitro.IRevertableVar.Revert(Nitro.IModifier)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Nitro.IRevertableVar.Revert
        path: ''
        startLine: 60967
      syntax:
        content:
          CSharp: void IRevertableVar.Revert(IModifier modifier)
          VB: Sub Nitro.IRevertableVar.Revert(modifier As IModifier) Implements IRevertableVar.Revert
        parameters:
        - id: modifier
          type: Nitro.IModifier
      overload: Nitro.RevertableVar`1.Nitro#IRevertableVar#Revert*
      implements:
      - Nitro.IRevertableVar.Revert(Nitro.IModifier)
      modifiers:
        CSharp: []
        VB: []
    - id: Nitro.RevertableVar`1.op_Implicit(Nitro.RevertableVar{`0})~`0
      commentId: M:Nitro.RevertableVar`1.op_Implicit(Nitro.RevertableVar{`0})~`0
      language: CSharp
      name:
        CSharp: Implicit(RevertableVar<T> to T)
        VB: Widening(RevertableVar(Of T) to T)
      nameWithType:
        CSharp: RevertableVar<T>.Implicit(RevertableVar<T> to T)
        VB: RevertableVar(Of T).Widening(RevertableVar(Of T) to T)
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.Implicit(Nitro.RevertableVar<T> to T)
        VB: Nitro.RevertableVar(Of T).Widening(Nitro.RevertableVar(Of T) to T)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: op_Implicit
        path: ''
        startLine: 61011
      summary: "\nImplicitly converts from a revertable variable to the variable of type T\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator T(RevertableVar<T> v)
          VB: Public Shared Widening Operator CType(v As RevertableVar(Of T)) As T
        parameters:
        - id: v
          type: Nitro.RevertableVar`1
          description: The revertable variable
        return:
          type: '{T}'
      overload: Nitro.RevertableVar`1.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Nitro.RevertableVar`1.op_Implicit(`0)~Nitro.RevertableVar{`0}
      commentId: M:Nitro.RevertableVar`1.op_Implicit(`0)~Nitro.RevertableVar{`0}
      language: CSharp
      name:
        CSharp: Implicit(T to RevertableVar<T>)
        VB: Widening(T to RevertableVar(Of T))
      nameWithType:
        CSharp: RevertableVar<T>.Implicit(T to RevertableVar<T>)
        VB: RevertableVar(Of T).Widening(T to RevertableVar(Of T))
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.Implicit(T to Nitro.RevertableVar<T>)
        VB: Nitro.RevertableVar(Of T).Widening(T to Nitro.RevertableVar(Of T))
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: op_Implicit
        path: ''
        startLine: 61020
      summary: "\nImplicitly converts from a variable of type T to a revertable variable\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator RevertableVar<T>(T value)
          VB: Public Shared Widening Operator CType(value As T) As RevertableVar(Of T)
        parameters:
        - id: value
          type: '{T}'
          description: The variable
        return:
          type: Nitro.RevertableVar`1
      overload: Nitro.RevertableVar`1.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Nitro.RevertableVar`1.op_Equality(Nitro.RevertableVar{`0},Nitro.RevertableVar{`0})
      commentId: M:Nitro.RevertableVar`1.op_Equality(Nitro.RevertableVar{`0},Nitro.RevertableVar{`0})
      language: CSharp
      name:
        CSharp: Equality(RevertableVar<T>, RevertableVar<T>)
        VB: Equality(RevertableVar(Of T), RevertableVar(Of T))
      nameWithType:
        CSharp: RevertableVar<T>.Equality(RevertableVar<T>, RevertableVar<T>)
        VB: RevertableVar(Of T).Equality(RevertableVar(Of T), RevertableVar(Of T))
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.Equality(Nitro.RevertableVar<T>, Nitro.RevertableVar<T>)
        VB: Nitro.RevertableVar(Of T).Equality(Nitro.RevertableVar(Of T), Nitro.RevertableVar(Of T))
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: op_Equality
        path: ''
        startLine: 61025
      syntax:
        content:
          CSharp: public static bool operator ==(RevertableVar<T> a, RevertableVar<T> b)
          VB: Public Shared Operator =(a As RevertableVar(Of T), b As RevertableVar(Of T)) As Boolean
        parameters:
        - id: a
          type: Nitro.RevertableVar`1
        - id: b
          type: Nitro.RevertableVar`1
        return:
          type: System.Boolean
      overload: Nitro.RevertableVar`1.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Nitro.RevertableVar`1.op_Inequality(Nitro.RevertableVar{`0},Nitro.RevertableVar{`0})
      commentId: M:Nitro.RevertableVar`1.op_Inequality(Nitro.RevertableVar{`0},Nitro.RevertableVar{`0})
      language: CSharp
      name:
        CSharp: Inequality(RevertableVar<T>, RevertableVar<T>)
        VB: Inequality(RevertableVar(Of T), RevertableVar(Of T))
      nameWithType:
        CSharp: RevertableVar<T>.Inequality(RevertableVar<T>, RevertableVar<T>)
        VB: RevertableVar(Of T).Inequality(RevertableVar(Of T), RevertableVar(Of T))
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.Inequality(Nitro.RevertableVar<T>, Nitro.RevertableVar<T>)
        VB: Nitro.RevertableVar(Of T).Inequality(Nitro.RevertableVar(Of T), Nitro.RevertableVar(Of T))
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: op_Inequality
        path: ''
        startLine: 61030
      syntax:
        content:
          CSharp: public static bool operator !=(RevertableVar<T> a, RevertableVar<T> b)
          VB: Public Shared Operator <>(a As RevertableVar(Of T), b As RevertableVar(Of T)) As Boolean
        parameters:
        - id: a
          type: Nitro.RevertableVar`1
        - id: b
          type: Nitro.RevertableVar`1
        return:
          type: System.Boolean
      overload: Nitro.RevertableVar`1.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Nitro.RevertableVar`1.op_Equality(Nitro.RevertableVar{`0},`0)
      commentId: M:Nitro.RevertableVar`1.op_Equality(Nitro.RevertableVar{`0},`0)
      language: CSharp
      name:
        CSharp: Equality(RevertableVar<T>, T)
        VB: Equality(RevertableVar(Of T), T)
      nameWithType:
        CSharp: RevertableVar<T>.Equality(RevertableVar<T>, T)
        VB: RevertableVar(Of T).Equality(RevertableVar(Of T), T)
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.Equality(Nitro.RevertableVar<T>, T)
        VB: Nitro.RevertableVar(Of T).Equality(Nitro.RevertableVar(Of T), T)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: op_Equality
        path: ''
        startLine: 61035
      syntax:
        content:
          CSharp: public static bool operator ==(RevertableVar<T> a, T b)
          VB: Public Shared Operator =(a As RevertableVar(Of T), b As T) As Boolean
        parameters:
        - id: a
          type: Nitro.RevertableVar`1
        - id: b
          type: '{T}'
        return:
          type: System.Boolean
      overload: Nitro.RevertableVar`1.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Nitro.RevertableVar`1.op_Inequality(Nitro.RevertableVar{`0},`0)
      commentId: M:Nitro.RevertableVar`1.op_Inequality(Nitro.RevertableVar{`0},`0)
      language: CSharp
      name:
        CSharp: Inequality(RevertableVar<T>, T)
        VB: Inequality(RevertableVar(Of T), T)
      nameWithType:
        CSharp: RevertableVar<T>.Inequality(RevertableVar<T>, T)
        VB: RevertableVar(Of T).Inequality(RevertableVar(Of T), T)
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.Inequality(Nitro.RevertableVar<T>, T)
        VB: Nitro.RevertableVar(Of T).Inequality(Nitro.RevertableVar(Of T), T)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: op_Inequality
        path: ''
        startLine: 61040
      syntax:
        content:
          CSharp: public static bool operator !=(RevertableVar<T> a, T b)
          VB: Public Shared Operator <>(a As RevertableVar(Of T), b As T) As Boolean
        parameters:
        - id: a
          type: Nitro.RevertableVar`1
        - id: b
          type: '{T}'
        return:
          type: System.Boolean
      overload: Nitro.RevertableVar`1.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Nitro.RevertableVar`1.Equals(System.Object)
      commentId: M:Nitro.RevertableVar`1.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: RevertableVar<T>.Equals(Object)
        VB: RevertableVar(Of T).Equals(Object)
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.Equals(System.Object)
        VB: Nitro.RevertableVar(Of T).Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Equals
        path: ''
        startLine: 61045
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Nitro.RevertableVar`1.Equals*
      overridden: System.Object.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Nitro.RevertableVar`1.GetHashCode
      commentId: M:Nitro.RevertableVar`1.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: RevertableVar<T>.GetHashCode()
        VB: RevertableVar(Of T).GetHashCode()
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.GetHashCode()
        VB: Nitro.RevertableVar(Of T).GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: GetHashCode
        path: ''
        startLine: 61050
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Nitro.RevertableVar`1.GetHashCode*
      overridden: System.Object.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Nitro.RevertableVar`1.ToString
      commentId: M:Nitro.RevertableVar`1.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: RevertableVar<T>.ToString()
        VB: RevertableVar(Of T).ToString()
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.ToString()
        VB: Nitro.RevertableVar(Of T).ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: ToString
        path: ''
        startLine: 61055
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: Nitro.RevertableVar`1.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - isEii: true
      id: Nitro.RevertableVar`1.Nitro#IRevertableVar#GetModifiers
      commentId: M:Nitro.RevertableVar`1.Nitro#IRevertableVar#GetModifiers
      language: CSharp
      name:
        CSharp: IRevertableVar.GetModifiers()
        VB: Nitro.IRevertableVar.GetModifiers()
      nameWithType:
        CSharp: RevertableVar<T>.IRevertableVar.GetModifiers()
        VB: RevertableVar(Of T).Nitro.IRevertableVar.GetModifiers()
      qualifiedName:
        CSharp: Nitro.RevertableVar<T>.Nitro.IRevertableVar.GetModifiers()
        VB: Nitro.RevertableVar(Of T).Nitro.IRevertableVar.GetModifiers()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Nitro.IRevertableVar.GetModifiers
        path: ''
        startLine: 61060
      syntax:
        content:
          CSharp: IEnumerable<IModifier> IRevertableVar.GetModifiers()
          VB: Function Nitro.IRevertableVar.GetModifiers As IEnumerable(Of IModifier) Implements IRevertableVar.GetModifiers
        return:
          type: System.Collections.Generic.IEnumerable{Nitro.IModifier}
      overload: Nitro.RevertableVar`1.Nitro#IRevertableVar#GetModifiers*
      implements:
      - Nitro.IRevertableVar.GetModifiers
      modifiers:
        CSharp: []
        VB: []
  - id: Nitro.RevertableVar`1.OnValueUpdatedDelegate
    commentId: T:Nitro.RevertableVar`1.OnValueUpdatedDelegate
    language: CSharp
    name:
      CSharp: RevertableVar<T>.OnValueUpdatedDelegate
      VB: RevertableVar(Of T).OnValueUpdatedDelegate
    nameWithType:
      CSharp: RevertableVar<T>.OnValueUpdatedDelegate
      VB: RevertableVar(Of T).OnValueUpdatedDelegate
    qualifiedName:
      CSharp: Nitro.RevertableVar<T>.OnValueUpdatedDelegate
      VB: Nitro.RevertableVar(Of T).OnValueUpdatedDelegate
    type: Delegate
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: OnValueUpdatedDelegate
      path: ''
      startLine: 60800
    syntax:
      content:
        CSharp: public delegate void OnValueUpdatedDelegate(T oldValue, T newValue);
        VB: Public Delegate Sub OnValueUpdatedDelegate(oldValue As T, newValue As T)
      parameters:
      - id: oldValue
        type: '{T}'
      - id: newValue
        type: '{T}'
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
  - id: Nitro.SinglePowerupCollector
    commentId: T:Nitro.SinglePowerupCollector
    language: CSharp
    name:
      CSharp: SinglePowerupCollector
      VB: SinglePowerupCollector
    nameWithType:
      CSharp: SinglePowerupCollector
      VB: SinglePowerupCollector
    qualifiedName:
      CSharp: Nitro.SinglePowerupCollector
      VB: Nitro.SinglePowerupCollector
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: SinglePowerupCollector
      path: ''
      startLine: 61080
    summary: "\nA simple powerup collector that collects and stores a single powerup\n"
    example: []
    syntax:
      content:
        CSharp: 'public class SinglePowerupCollector : Collector, ICollector'
        VB: >-
          Public Class SinglePowerupCollector

              Inherits Collector

              Implements ICollector
    inheritance:
    - System.Object
    - Nitro.Collector
    implements:
    - Nitro.ICollector
    inheritedMembers:
    - Nitro.Collector.CollectorEnabled
    - Nitro.Collector.CollectOnContact
    - Nitro.Collector.PowerupCollectEvent
    - Nitro.Collector.CollectPowerup(Nitro.IPowerup)
    - Nitro.Collector.OnTriggerEnter(Collider)
    - Nitro.Collector.OnTriggerEnter2D(Collider2D)
    - Nitro.Collector.OnCollisionEnter(Collision)
    - Nitro.Collector.OnCollisionEnter2D(Collision2D)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Nitro.SinglePowerupCollector.CurrentPowerup
      commentId: P:Nitro.SinglePowerupCollector.CurrentPowerup
      language: CSharp
      name:
        CSharp: CurrentPowerup
        VB: CurrentPowerup
      nameWithType:
        CSharp: SinglePowerupCollector.CurrentPowerup
        VB: SinglePowerupCollector.CurrentPowerup
      qualifiedName:
        CSharp: Nitro.SinglePowerupCollector.CurrentPowerup
        VB: Nitro.SinglePowerupCollector.CurrentPowerup
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: CurrentPowerup
        path: ''
        startLine: 61085
      summary: "\nThe currently collected powerup\n"
      example: []
      syntax:
        content:
          CSharp: public IPowerup CurrentPowerup { get; }
          VB: Public ReadOnly Property CurrentPowerup As IPowerup
        parameters: []
        return:
          type: Nitro.IPowerup
      overload: Nitro.SinglePowerupCollector.CurrentPowerup*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Nitro.SinglePowerupCollector.CanCollectPowerup(Nitro.IPowerup)
      commentId: M:Nitro.SinglePowerupCollector.CanCollectPowerup(Nitro.IPowerup)
      language: CSharp
      name:
        CSharp: CanCollectPowerup(IPowerup)
        VB: CanCollectPowerup(IPowerup)
      nameWithType:
        CSharp: SinglePowerupCollector.CanCollectPowerup(IPowerup)
        VB: SinglePowerupCollector.CanCollectPowerup(IPowerup)
      qualifiedName:
        CSharp: Nitro.SinglePowerupCollector.CanCollectPowerup(Nitro.IPowerup)
        VB: Nitro.SinglePowerupCollector.CanCollectPowerup(Nitro.IPowerup)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: CanCollectPowerup
        path: ''
        startLine: 61088
      example: []
      syntax:
        content:
          CSharp: public override bool CanCollectPowerup(IPowerup powerup)
          VB: Public Overrides Function CanCollectPowerup(powerup As IPowerup) As Boolean
        parameters:
        - id: powerup
          type: Nitro.IPowerup
        return:
          type: System.Boolean
      overload: Nitro.SinglePowerupCollector.CanCollectPowerup*
      overridden: Nitro.Collector.CanCollectPowerup(Nitro.IPowerup)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Nitro.SinglePowerupCollector.Execute
      commentId: M:Nitro.SinglePowerupCollector.Execute
      language: CSharp
      name:
        CSharp: Execute()
        VB: Execute()
      nameWithType:
        CSharp: SinglePowerupCollector.Execute()
        VB: SinglePowerupCollector.Execute()
      qualifiedName:
        CSharp: Nitro.SinglePowerupCollector.Execute()
        VB: Nitro.SinglePowerupCollector.Execute()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Execute
        path: ''
        startLine: 61094
      example: []
      syntax:
        content:
          CSharp: public override void Execute()
          VB: Public Overrides Sub Execute
      overload: Nitro.SinglePowerupCollector.Execute*
      overridden: Nitro.Collector.Execute
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Nitro.SinglePowerupCollector.OnCollect(Nitro.IPowerup)
      commentId: M:Nitro.SinglePowerupCollector.OnCollect(Nitro.IPowerup)
      language: CSharp
      name:
        CSharp: OnCollect(IPowerup)
        VB: OnCollect(IPowerup)
      nameWithType:
        CSharp: SinglePowerupCollector.OnCollect(IPowerup)
        VB: SinglePowerupCollector.OnCollect(IPowerup)
      qualifiedName:
        CSharp: Nitro.SinglePowerupCollector.OnCollect(Nitro.IPowerup)
        VB: Nitro.SinglePowerupCollector.OnCollect(Nitro.IPowerup)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnCollect
        path: ''
        startLine: 61104
      example: []
      syntax:
        content:
          CSharp: protected override void OnCollect(IPowerup powerup)
          VB: Protected Overrides Sub OnCollect(powerup As IPowerup)
        parameters:
        - id: powerup
          type: Nitro.IPowerup
      overload: Nitro.SinglePowerupCollector.OnCollect*
      overridden: Nitro.Collector.OnCollect(Nitro.IPowerup)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Nitro.SinglePowerupCollector.RemovePowerup
      commentId: M:Nitro.SinglePowerupCollector.RemovePowerup
      language: CSharp
      name:
        CSharp: RemovePowerup()
        VB: RemovePowerup()
      nameWithType:
        CSharp: SinglePowerupCollector.RemovePowerup()
        VB: SinglePowerupCollector.RemovePowerup()
      qualifiedName:
        CSharp: Nitro.SinglePowerupCollector.RemovePowerup()
        VB: Nitro.SinglePowerupCollector.RemovePowerup()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: RemovePowerup
        path: ''
        startLine: 61112
      summary: "\nRemoves the <xref href=\"Nitro.SinglePowerupCollector.CurrentPowerup\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public void RemovePowerup()
          VB: Public Sub RemovePowerup
      overload: Nitro.SinglePowerupCollector.RemovePowerup*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Nitro.SinglePowerupCollector.CurrentPowerup: 
  - id: Nitro.Utilities
    commentId: T:Nitro.Utilities
    language: CSharp
    name:
      CSharp: Utilities
      VB: Utilities
    nameWithType:
      CSharp: Utilities
      VB: Utilities
    qualifiedName:
      CSharp: Nitro.Utilities
      VB: Nitro.Utilities
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: Utilities
      path: ''
      startLine: 61127
    syntax:
      content:
        CSharp: public static class Utilities
        VB: Public Module Utilities
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Nitro.Utilities.Prettify(System.String)
      commentId: M:Nitro.Utilities.Prettify(System.String)
      language: CSharp
      name:
        CSharp: Prettify(String)
        VB: Prettify(String)
      nameWithType:
        CSharp: Utilities.Prettify(String)
        VB: Utilities.Prettify(String)
      qualifiedName:
        CSharp: Nitro.Utilities.Prettify(System.String)
        VB: Nitro.Utilities.Prettify(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Prettify
        path: ''
        startLine: 61134
      summary: "\nMakes a string look nicer (example: converts &quot;thisIsATest123&quot; to &quot;This is a test 123&quot;\n"
      example: []
      syntax:
        content:
          CSharp: public static string Prettify(string input)
          VB: Public Shared Function Prettify(input As String) As String
        parameters:
        - id: input
          type: System.String
          description: The input string
        return:
          type: System.String
          description: The prettified string
      overload: Nitro.Utilities.Prettify*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Nitro.Utilities.CalculatePlacement(System.Int32)
      commentId: M:Nitro.Utilities.CalculatePlacement(System.Int32)
      language: CSharp
      name:
        CSharp: CalculatePlacement(Int32)
        VB: CalculatePlacement(Int32)
      nameWithType:
        CSharp: Utilities.CalculatePlacement(Int32)
        VB: Utilities.CalculatePlacement(Int32)
      qualifiedName:
        CSharp: Nitro.Utilities.CalculatePlacement(System.Int32)
        VB: Nitro.Utilities.CalculatePlacement(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: CalculatePlacement
        path: ''
        startLine: 61156
      syntax:
        content:
          CSharp: public static string CalculatePlacement(int position)
          VB: Public Shared Function CalculatePlacement(position As Integer) As String
        parameters:
        - id: position
          type: System.Int32
        return:
          type: System.String
      overload: Nitro.Utilities.CalculatePlacement*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Nitro.ICollector
    commentId: T:Nitro.ICollector
    language: CSharp
    name:
      CSharp: ICollector
      VB: ICollector
    nameWithType:
      CSharp: ICollector
      VB: ICollector
    qualifiedName:
      CSharp: Nitro.ICollector
      VB: Nitro.ICollector
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: ICollector
      path: ''
      startLine: 61375
    summary: "\nBase interface for all collectors\n"
    example: []
    syntax:
      content:
        CSharp: public interface ICollector
        VB: Public Interface ICollector
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Nitro.ICollector.CanCollectPowerup(Nitro.IPowerup)
      commentId: M:Nitro.ICollector.CanCollectPowerup(Nitro.IPowerup)
      language: CSharp
      name:
        CSharp: CanCollectPowerup(IPowerup)
        VB: CanCollectPowerup(IPowerup)
      nameWithType:
        CSharp: ICollector.CanCollectPowerup(IPowerup)
        VB: ICollector.CanCollectPowerup(IPowerup)
      qualifiedName:
        CSharp: Nitro.ICollector.CanCollectPowerup(Nitro.IPowerup)
        VB: Nitro.ICollector.CanCollectPowerup(Nitro.IPowerup)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: CanCollectPowerup
        path: ''
        startLine: 61382
      summary: "\nChecks if a powerup can be collected by this collector\n"
      example: []
      syntax:
        content:
          CSharp: bool CanCollectPowerup(IPowerup powerup)
          VB: Function CanCollectPowerup(powerup As IPowerup) As Boolean
        parameters:
        - id: powerup
          type: Nitro.IPowerup
          description: The powerup to check
        return:
          type: System.Boolean
          description: Returns true of the powerup can be collected
      overload: Nitro.ICollector.CanCollectPowerup*
      modifiers:
        CSharp: []
        VB: []
    - id: Nitro.ICollector.CollectPowerup(Nitro.IPowerup)
      commentId: M:Nitro.ICollector.CollectPowerup(Nitro.IPowerup)
      language: CSharp
      name:
        CSharp: CollectPowerup(IPowerup)
        VB: CollectPowerup(IPowerup)
      nameWithType:
        CSharp: ICollector.CollectPowerup(IPowerup)
        VB: ICollector.CollectPowerup(IPowerup)
      qualifiedName:
        CSharp: Nitro.ICollector.CollectPowerup(Nitro.IPowerup)
        VB: Nitro.ICollector.CollectPowerup(Nitro.IPowerup)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: CollectPowerup
        path: ''
        startLine: 61389
      summary: "\nCollects a powerup\n"
      example: []
      syntax:
        content:
          CSharp: bool CollectPowerup(IPowerup powerup)
          VB: Function CollectPowerup(powerup As IPowerup) As Boolean
        parameters:
        - id: powerup
          type: Nitro.IPowerup
          description: The powerup to collect
        return:
          type: System.Boolean
          description: Returns true if the powerup has been collected
      overload: Nitro.ICollector.CollectPowerup*
      modifiers:
        CSharp: []
        VB: []
    - id: Nitro.ICollector.Execute
      commentId: M:Nitro.ICollector.Execute
      language: CSharp
      name:
        CSharp: Execute()
        VB: Execute()
      nameWithType:
        CSharp: ICollector.Execute()
        VB: ICollector.Execute()
      qualifiedName:
        CSharp: Nitro.ICollector.Execute()
        VB: Nitro.ICollector.Execute()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Execute
        path: ''
        startLine: 61394
      summary: "\nExecutes the powerups that have been collected\n"
      example: []
      syntax:
        content:
          CSharp: void Execute()
          VB: Sub Execute
      overload: Nitro.ICollector.Execute*
      modifiers:
        CSharp: []
        VB: []
  - id: Nitro.ICombinablePowerup
    commentId: T:Nitro.ICombinablePowerup
    language: CSharp
    name:
      CSharp: ICombinablePowerup
      VB: ICombinablePowerup
    nameWithType:
      CSharp: ICombinablePowerup
      VB: ICombinablePowerup
    qualifiedName:
      CSharp: Nitro.ICombinablePowerup
      VB: Nitro.ICombinablePowerup
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: ICombinablePowerup
      path: ''
      startLine: 61406
    summary: "\nThe base class for all combinable powerups\n"
    example: []
    syntax:
      content:
        CSharp: 'public interface ICombinablePowerup : IPowerup'
        VB: >-
          Public Interface ICombinablePowerup

              Inherits IPowerup
    inheritedMembers:
    - Nitro.IPowerup.Collector
    - Nitro.IPowerup.DoAction
    - Nitro.IPowerup.DoneUsingPowerup
    - Nitro.IPowerup.OnCollect(Nitro.ICollector)
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Nitro.ICombinablePowerup.Priority
      commentId: P:Nitro.ICombinablePowerup.Priority
      language: CSharp
      name:
        CSharp: Priority
        VB: Priority
      nameWithType:
        CSharp: ICombinablePowerup.Priority
        VB: ICombinablePowerup.Priority
      qualifiedName:
        CSharp: Nitro.ICombinablePowerup.Priority
        VB: Nitro.ICombinablePowerup.Priority
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Priority
        path: ''
        startLine: 61413
      summary: "\nThe priority of the powerup, which determines whether or not this powerup will get executed before others\n\nFor example, if you have a fire powerup that has a higher priority than a water powerup, then the fire effect will be executed before the water effect.\n"
      example: []
      syntax:
        content:
          CSharp: int Priority { get; }
          VB: ReadOnly Property Priority As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Nitro.ICombinablePowerup.Priority*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Nitro.ICombinablePowerup.Execute(Nitro.ICombinablePowerup,Vector3,Quaternion,Action{Vector3,Quaternion})
      commentId: M:Nitro.ICombinablePowerup.Execute(Nitro.ICombinablePowerup,Vector3,Quaternion,Action{Vector3,Quaternion})
      language: CSharp
      name:
        CSharp: Execute(ICombinablePowerup, Vector3, Quaternion, Action<Vector3, Quaternion>)
        VB: Execute(ICombinablePowerup, Vector3, Quaternion, Action(Of Vector3, Quaternion))
      nameWithType:
        CSharp: ICombinablePowerup.Execute(ICombinablePowerup, Vector3, Quaternion, Action<Vector3, Quaternion>)
        VB: ICombinablePowerup.Execute(ICombinablePowerup, Vector3, Quaternion, Action(Of Vector3, Quaternion))
      qualifiedName:
        CSharp: Nitro.ICombinablePowerup.Execute(Nitro.ICombinablePowerup, Vector3, Quaternion, Action<Vector3, Quaternion>)
        VB: Nitro.ICombinablePowerup.Execute(Nitro.ICombinablePowerup, Vector3, Quaternion, Action(Of Vector3, Quaternion))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Execute
        path: ''
        startLine: 61423
      summary: "\nThe main action of the combinable powerup\n"
      example: []
      syntax:
        content:
          CSharp: void Execute(ICombinablePowerup previous, Vector3 position, Quaternion rotation, Action<Vector3, Quaternion> runNextPowerup)
          VB: Sub Execute(previous As ICombinablePowerup, position As Vector3, rotation As Quaternion, runNextPowerup As Action(Of Vector3, Quaternion))
        parameters:
        - id: previous
          type: Nitro.ICombinablePowerup
          description: The previous powerup in the chain. If this is null, then the currently executing powerup is first in the chain
        - id: position
          type: Global.Vector3
          description: The position of the collector the powerup is from
        - id: rotation
          type: Global.Quaternion
          description: The rotation of the collector the powerup is from
        - id: runNextPowerup
          type: Global.Action{Vector3,Quaternion}
          description: A delegate used to execute the next powerup in the chain. Be sure to call this to make sure all the powerups in the chain get executed
      overload: Nitro.ICombinablePowerup.Execute*
      modifiers:
        CSharp: []
        VB: []
  - id: Nitro.IModifier
    commentId: T:Nitro.IModifier
    language: CSharp
    name:
      CSharp: IModifier
      VB: IModifier
    nameWithType:
      CSharp: IModifier
      VB: IModifier
    qualifiedName:
      CSharp: Nitro.IModifier
      VB: Nitro.IModifier
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: IModifier
      path: ''
      startLine: 61433
    summary: "\nBase class for all modifiers\n"
    example: []
    syntax:
      content:
        CSharp: public interface IModifier
        VB: >-
          Public Interface IModifier

              Inherits IDisposable
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Nitro.IModifier.Priority
      commentId: P:Nitro.IModifier.Priority
      language: CSharp
      name:
        CSharp: Priority
        VB: Priority
      nameWithType:
        CSharp: IModifier.Priority
        VB: IModifier.Priority
      qualifiedName:
        CSharp: Nitro.IModifier.Priority
        VB: Nitro.IModifier.Priority
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Priority
        path: ''
        startLine: 61447
      summary: "\nThe priority of the modifier. The lower the number, the sooner it will be processed before other modifiers\n"
      example: []
      syntax:
        content:
          CSharp: int Priority { get; }
          VB: ReadOnly Property Priority As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Nitro.IModifier.Priority*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Nitro.IModifier.TimeAdded
      commentId: P:Nitro.IModifier.TimeAdded
      language: CSharp
      name:
        CSharp: TimeAdded
        VB: TimeAdded
      nameWithType:
        CSharp: IModifier.TimeAdded
        VB: IModifier.TimeAdded
      qualifiedName:
        CSharp: Nitro.IModifier.TimeAdded
        VB: Nitro.IModifier.TimeAdded
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: TimeAdded
        path: ''
        startLine: 61452
      summary: "\nThe time this modifer was created and added to a revertable variable\n"
      example: []
      syntax:
        content:
          CSharp: float TimeAdded { get; }
          VB: ReadOnly Property TimeAdded As Single
        parameters: []
        return:
          type: System.Single
      overload: Nitro.IModifier.TimeAdded*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Nitro.IModifier.SourceVariable
      commentId: P:Nitro.IModifier.SourceVariable
      language: CSharp
      name:
        CSharp: SourceVariable
        VB: SourceVariable
      nameWithType:
        CSharp: IModifier.SourceVariable
        VB: IModifier.SourceVariable
      qualifiedName:
        CSharp: Nitro.IModifier.SourceVariable
        VB: Nitro.IModifier.SourceVariable
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: SourceVariable
        path: ''
        startLine: 61457
      summary: "\nThe revertable variable that this modifier is a part of\n"
      example: []
      syntax:
        content:
          CSharp: IRevertableVar SourceVariable { get; }
          VB: ReadOnly Property SourceVariable As IRevertableVar
        parameters: []
        return:
          type: Nitro.IRevertableVar
      overload: Nitro.IModifier.SourceVariable*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Nitro.IModifier.BoundObject
      commentId: P:Nitro.IModifier.BoundObject
      language: CSharp
      name:
        CSharp: BoundObject
        VB: BoundObject
      nameWithType:
        CSharp: IModifier.BoundObject
        VB: IModifier.BoundObject
      qualifiedName:
        CSharp: Nitro.IModifier.BoundObject
        VB: Nitro.IModifier.BoundObject
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: BoundObject
        path: ''
        startLine: 61462
      summary: "\nThe object this modification is bound to. When this object gets destroyed, the modification gets reverted\n"
      example: []
      syntax:
        content:
          CSharp: UnityEngine.Object BoundObject { get; }
          VB: ReadOnly Property BoundObject As UnityEngine.Object
        parameters: []
        return:
          type: Global.UnityEngine.Object
      overload: Nitro.IModifier.BoundObject*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Nitro.IModifier.HasBoundObject
      commentId: P:Nitro.IModifier.HasBoundObject
      language: CSharp
      name:
        CSharp: HasBoundObject
        VB: HasBoundObject
      nameWithType:
        CSharp: IModifier.HasBoundObject
        VB: IModifier.HasBoundObject
      qualifiedName:
        CSharp: Nitro.IModifier.HasBoundObject
        VB: Nitro.IModifier.HasBoundObject
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: HasBoundObject
        path: ''
        startLine: 61467
      summary: "\nReturns true if this modifier is bound to a specific object\n"
      example: []
      syntax:
        content:
          CSharp: bool HasBoundObject { get; }
          VB: ReadOnly Property HasBoundObject As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Nitro.IModifier.HasBoundObject*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Nitro.IModifier.ID
      commentId: P:Nitro.IModifier.ID
      language: CSharp
      name:
        CSharp: ID
        VB: ID
      nameWithType:
        CSharp: IModifier.ID
        VB: IModifier.ID
      qualifiedName:
        CSharp: Nitro.IModifier.ID
        VB: Nitro.IModifier.ID
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: ID
        path: ''
        startLine: 61472
      summary: "\nA number that uniquely identifies this modifier\n"
      example: []
      syntax:
        content:
          CSharp: ulong ID { get; }
          VB: ReadOnly Property ID As ULong
        parameters: []
        return:
          type: System.UInt64
      overload: Nitro.IModifier.ID*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Nitro.IModifier.Op
      commentId: P:Nitro.IModifier.Op
      language: CSharp
      name:
        CSharp: Op
        VB: Op
      nameWithType:
        CSharp: IModifier.Op
        VB: IModifier.Op
      qualifiedName:
        CSharp: Nitro.IModifier.Op
        VB: Nitro.IModifier.Op
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Op
        path: ''
        startLine: 61477
      summary: "\nThe operator of the modifier. This determines how the <xref href=\"Nitro.IModifier.SourceVariable\" data-throw-if-not-resolved=\"false\"></xref> gets adjusted\n"
      example: []
      syntax:
        content:
          CSharp: IModifier.Operation Op { get; }
          VB: ReadOnly Property Op As IModifier.Operation
        parameters: []
        return:
          type: Nitro.IModifier.Operation
      overload: Nitro.IModifier.Op*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
      references:
        Nitro.IModifier.SourceVariable: 
    - id: Nitro.IModifier.Value
      commentId: P:Nitro.IModifier.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: IModifier.Value
        VB: IModifier.Value
      qualifiedName:
        CSharp: Nitro.IModifier.Value
        VB: Nitro.IModifier.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Value
        path: ''
        startLine: 61482
      summary: "\nThe right-hand operand of the modifier\n"
      example: []
      syntax:
        content:
          CSharp: object Value { get; }
          VB: ReadOnly Property Value As Object
        parameters: []
        return:
          type: System.Object
      overload: Nitro.IModifier.Value*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Nitro.IModifier.Revert
      commentId: M:Nitro.IModifier.Revert
      language: CSharp
      name:
        CSharp: Revert()
        VB: Revert()
      nameWithType:
        CSharp: IModifier.Revert()
        VB: IModifier.Revert()
      qualifiedName:
        CSharp: Nitro.IModifier.Revert()
        VB: Nitro.IModifier.Revert()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Revert
        path: ''
        startLine: 61487
      summary: "\nReverts the modifier and removes it from the revertable variable it is a part of\n"
      example: []
      syntax:
        content:
          CSharp: void Revert()
          VB: Sub Revert
      overload: Nitro.IModifier.Revert*
      modifiers:
        CSharp: []
        VB: []
  - id: Nitro.IModifier.Operation
    commentId: T:Nitro.IModifier.Operation
    language: CSharp
    name:
      CSharp: IModifier.Operation
      VB: IModifier.Operation
    nameWithType:
      CSharp: IModifier.Operation
      VB: IModifier.Operation
    qualifiedName:
      CSharp: Nitro.IModifier.Operation
      VB: Nitro.IModifier.Operation
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: Operation
      path: ''
      startLine: 61435
    syntax:
      content:
        CSharp: public enum Operation
        VB: Public Enum Operation
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Nitro.IModifier.Operation.Set
      commentId: F:Nitro.IModifier.Operation.Set
      language: CSharp
      name:
        CSharp: Set
        VB: Set
      nameWithType:
        CSharp: IModifier.Operation.Set
        VB: IModifier.Operation.Set
      qualifiedName:
        CSharp: Nitro.IModifier.Operation.Set
        VB: Nitro.IModifier.Operation.Set
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Set
        path: ''
        startLine: 61437
      syntax:
        content:
          CSharp: Set = 0
          VB: Set = 0
        return:
          type: Nitro.IModifier.Operation
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Nitro.IModifier.Operation.Multiply
      commentId: F:Nitro.IModifier.Operation.Multiply
      language: CSharp
      name:
        CSharp: Multiply
        VB: Multiply
      nameWithType:
        CSharp: IModifier.Operation.Multiply
        VB: IModifier.Operation.Multiply
      qualifiedName:
        CSharp: Nitro.IModifier.Operation.Multiply
        VB: Nitro.IModifier.Operation.Multiply
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Multiply
        path: ''
        startLine: 61438
      syntax:
        content:
          CSharp: Multiply = 1
          VB: Multiply = 1
        return:
          type: Nitro.IModifier.Operation
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Nitro.IModifier.Operation.Divide
      commentId: F:Nitro.IModifier.Operation.Divide
      language: CSharp
      name:
        CSharp: Divide
        VB: Divide
      nameWithType:
        CSharp: IModifier.Operation.Divide
        VB: IModifier.Operation.Divide
      qualifiedName:
        CSharp: Nitro.IModifier.Operation.Divide
        VB: Nitro.IModifier.Operation.Divide
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Divide
        path: ''
        startLine: 61439
      syntax:
        content:
          CSharp: Divide = 2
          VB: Divide = 2
        return:
          type: Nitro.IModifier.Operation
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Nitro.IModifier.Operation.Add
      commentId: F:Nitro.IModifier.Operation.Add
      language: CSharp
      name:
        CSharp: Add
        VB: Add
      nameWithType:
        CSharp: IModifier.Operation.Add
        VB: IModifier.Operation.Add
      qualifiedName:
        CSharp: Nitro.IModifier.Operation.Add
        VB: Nitro.IModifier.Operation.Add
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Add
        path: ''
        startLine: 61440
      syntax:
        content:
          CSharp: Add = 3
          VB: Add = 3
        return:
          type: Nitro.IModifier.Operation
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Nitro.IModifier.Operation.Subtract
      commentId: F:Nitro.IModifier.Operation.Subtract
      language: CSharp
      name:
        CSharp: Subtract
        VB: Subtract
      nameWithType:
        CSharp: IModifier.Operation.Subtract
        VB: IModifier.Operation.Subtract
      qualifiedName:
        CSharp: Nitro.IModifier.Operation.Subtract
        VB: Nitro.IModifier.Operation.Subtract
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Subtract
        path: ''
        startLine: 61441
      syntax:
        content:
          CSharp: Subtract = 4
          VB: Subtract = 4
        return:
          type: Nitro.IModifier.Operation
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Nitro.IMultiplePowerupCollector
    commentId: T:Nitro.IMultiplePowerupCollector
    language: CSharp
    name:
      CSharp: IMultiplePowerupCollector
      VB: IMultiplePowerupCollector
    nameWithType:
      CSharp: IMultiplePowerupCollector
      VB: IMultiplePowerupCollector
    qualifiedName:
      CSharp: Nitro.IMultiplePowerupCollector
      VB: Nitro.IMultiplePowerupCollector
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: IMultiplePowerupCollector
      path: ''
      startLine: 61498
    summary: "\nThe base class for a powerup collector that can collect multiple powerups\n"
    example: []
    syntax:
      content:
        CSharp: 'public interface IMultiplePowerupCollector : ICollector'
        VB: >-
          Public Interface IMultiplePowerupCollector

              Inherits ICollector
    inheritedMembers:
    - Nitro.ICollector.CanCollectPowerup(Nitro.IPowerup)
    - Nitro.ICollector.CollectPowerup(Nitro.IPowerup)
    - Nitro.ICollector.Execute
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Nitro.IMultiplePowerupCollector.MaxPowerupsHeld
      commentId: P:Nitro.IMultiplePowerupCollector.MaxPowerupsHeld
      language: CSharp
      name:
        CSharp: MaxPowerupsHeld
        VB: MaxPowerupsHeld
      nameWithType:
        CSharp: IMultiplePowerupCollector.MaxPowerupsHeld
        VB: IMultiplePowerupCollector.MaxPowerupsHeld
      qualifiedName:
        CSharp: Nitro.IMultiplePowerupCollector.MaxPowerupsHeld
        VB: Nitro.IMultiplePowerupCollector.MaxPowerupsHeld
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: MaxPowerupsHeld
        path: ''
        startLine: 61503
      summary: "\nThe maximum amount of powerups this collector can hold\n"
      example: []
      syntax:
        content:
          CSharp: int MaxPowerupsHeld { get; }
          VB: ReadOnly Property MaxPowerupsHeld As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Nitro.IMultiplePowerupCollector.MaxPowerupsHeld*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Nitro.IMultiplePowerupCollector.CollectedPowerups
      commentId: P:Nitro.IMultiplePowerupCollector.CollectedPowerups
      language: CSharp
      name:
        CSharp: CollectedPowerups
        VB: CollectedPowerups
      nameWithType:
        CSharp: IMultiplePowerupCollector.CollectedPowerups
        VB: IMultiplePowerupCollector.CollectedPowerups
      qualifiedName:
        CSharp: Nitro.IMultiplePowerupCollector.CollectedPowerups
        VB: Nitro.IMultiplePowerupCollector.CollectedPowerups
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: CollectedPowerups
        path: ''
        startLine: 61508
      summary: "\nA list of all collected powerups\n"
      example: []
      syntax:
        content:
          CSharp: IEnumerable<ICombinablePowerup> CollectedPowerups { get; }
          VB: ReadOnly Property CollectedPowerups As IEnumerable(Of ICombinablePowerup)
        parameters: []
        return:
          type: System.Collections.Generic.IEnumerable{Nitro.ICombinablePowerup}
      overload: Nitro.IMultiplePowerupCollector.CollectedPowerups*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
  - id: Nitro.IPowerup
    commentId: T:Nitro.IPowerup
    language: CSharp
    name:
      CSharp: IPowerup
      VB: IPowerup
    nameWithType:
      CSharp: IPowerup
      VB: IPowerup
    qualifiedName:
      CSharp: Nitro.IPowerup
      VB: Nitro.IPowerup
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: IPowerup
      path: ''
      startLine: 61516
    summary: "\nThe base class for all powerups\n"
    example: []
    syntax:
      content:
        CSharp: public interface IPowerup
        VB: Public Interface IPowerup
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Nitro.IPowerup.Collector
      commentId: P:Nitro.IPowerup.Collector
      language: CSharp
      name:
        CSharp: Collector
        VB: Collector
      nameWithType:
        CSharp: IPowerup.Collector
        VB: IPowerup.Collector
      qualifiedName:
        CSharp: Nitro.IPowerup.Collector
        VB: Nitro.IPowerup.Collector
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Collector
        path: ''
        startLine: 61521
      summary: "\nIf this powerup has been collected, this is the collector that collected it\n"
      example: []
      syntax:
        content:
          CSharp: ICollector Collector { get; }
          VB: ReadOnly Property Collector As ICollector
        parameters: []
        return:
          type: Nitro.ICollector
      overload: Nitro.IPowerup.Collector*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Nitro.IPowerup.DoAction
      commentId: M:Nitro.IPowerup.DoAction
      language: CSharp
      name:
        CSharp: DoAction()
        VB: DoAction()
      nameWithType:
        CSharp: IPowerup.DoAction()
        VB: IPowerup.DoAction()
      qualifiedName:
        CSharp: Nitro.IPowerup.DoAction()
        VB: Nitro.IPowerup.DoAction()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: DoAction
        path: ''
        startLine: 61526
      summary: "\nThe main action of the powerup\n"
      example: []
      syntax:
        content:
          CSharp: void DoAction()
          VB: Sub DoAction
      overload: Nitro.IPowerup.DoAction*
      modifiers:
        CSharp: []
        VB: []
    - id: Nitro.IPowerup.DoneUsingPowerup
      commentId: M:Nitro.IPowerup.DoneUsingPowerup
      language: CSharp
      name:
        CSharp: DoneUsingPowerup()
        VB: DoneUsingPowerup()
      nameWithType:
        CSharp: IPowerup.DoneUsingPowerup()
        VB: IPowerup.DoneUsingPowerup()
      qualifiedName:
        CSharp: Nitro.IPowerup.DoneUsingPowerup()
        VB: Nitro.IPowerup.DoneUsingPowerup()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: DoneUsingPowerup
        path: ''
        startLine: 61531
      summary: "\nUsed to mark when a powerup is done executing\n"
      example: []
      syntax:
        content:
          CSharp: void DoneUsingPowerup()
          VB: Sub DoneUsingPowerup
      overload: Nitro.IPowerup.DoneUsingPowerup*
      modifiers:
        CSharp: []
        VB: []
    - id: Nitro.IPowerup.OnCollect(Nitro.ICollector)
      commentId: M:Nitro.IPowerup.OnCollect(Nitro.ICollector)
      language: CSharp
      name:
        CSharp: OnCollect(ICollector)
        VB: OnCollect(ICollector)
      nameWithType:
        CSharp: IPowerup.OnCollect(ICollector)
        VB: IPowerup.OnCollect(ICollector)
      qualifiedName:
        CSharp: Nitro.IPowerup.OnCollect(Nitro.ICollector)
        VB: Nitro.IPowerup.OnCollect(Nitro.ICollector)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: OnCollect
        path: ''
        startLine: 61537
      summary: "\nCalled when the powerup has been collected by a collector\n"
      example: []
      syntax:
        content:
          CSharp: void OnCollect(ICollector collector)
          VB: Sub OnCollect(collector As ICollector)
        parameters:
        - id: collector
          type: Nitro.ICollector
          description: The collector that collected the powerup
      overload: Nitro.IPowerup.OnCollect*
      modifiers:
        CSharp: []
        VB: []
  - id: Nitro.IRevertableVar
    commentId: T:Nitro.IRevertableVar
    language: CSharp
    name:
      CSharp: IRevertableVar
      VB: IRevertableVar
    nameWithType:
      CSharp: IRevertableVar
      VB: IRevertableVar
    qualifiedName:
      CSharp: Nitro.IRevertableVar
      VB: Nitro.IRevertableVar
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: Nitro
    source:
      id: IRevertableVar
      path: ''
      startLine: 61548
    syntax:
      content:
        CSharp: public interface IRevertableVar
        VB: Public Interface IRevertableVar
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Nitro.IRevertableVar.BaseValue
      commentId: P:Nitro.IRevertableVar.BaseValue
      language: CSharp
      name:
        CSharp: BaseValue
        VB: BaseValue
      nameWithType:
        CSharp: IRevertableVar.BaseValue
        VB: IRevertableVar.BaseValue
      qualifiedName:
        CSharp: Nitro.IRevertableVar.BaseValue
        VB: Nitro.IRevertableVar.BaseValue
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: BaseValue
        path: ''
        startLine: 61553
      summary: "\nThe base value of the revertible variable\n"
      example: []
      syntax:
        content:
          CSharp: object BaseValue { get; set; }
          VB: Property BaseValue As Object
        parameters: []
        return:
          type: System.Object
      overload: Nitro.IRevertableVar.BaseValue*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
    - id: Nitro.IRevertableVar.Value
      commentId: P:Nitro.IRevertableVar.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: IRevertableVar.Value
        VB: IRevertableVar.Value
      qualifiedName:
        CSharp: Nitro.IRevertableVar.Value
        VB: Nitro.IRevertableVar.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Value
        path: ''
        startLine: 61557
      summary: "\nThe current value of the revertible variable\n"
      example: []
      syntax:
        content:
          CSharp: object Value { get; }
          VB: ReadOnly Property Value As Object
        parameters: []
        return:
          type: System.Object
      overload: Nitro.IRevertableVar.Value*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Nitro.IRevertableVar.ModifiersApplied
      commentId: P:Nitro.IRevertableVar.ModifiersApplied
      language: CSharp
      name:
        CSharp: ModifiersApplied
        VB: ModifiersApplied
      nameWithType:
        CSharp: IRevertableVar.ModifiersApplied
        VB: IRevertableVar.ModifiersApplied
      qualifiedName:
        CSharp: Nitro.IRevertableVar.ModifiersApplied
        VB: Nitro.IRevertableVar.ModifiersApplied
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: ModifiersApplied
        path: ''
        startLine: 61561
      summary: "\nHow many variable modifiers are currently applied to the revertible variable\n"
      example: []
      syntax:
        content:
          CSharp: int ModifiersApplied { get; }
          VB: ReadOnly Property ModifiersApplied As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Nitro.IRevertableVar.ModifiersApplied*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Nitro.IRevertableVar.ValueType
      commentId: P:Nitro.IRevertableVar.ValueType
      language: CSharp
      name:
        CSharp: ValueType
        VB: ValueType
      nameWithType:
        CSharp: IRevertableVar.ValueType
        VB: IRevertableVar.ValueType
      qualifiedName:
        CSharp: Nitro.IRevertableVar.ValueType
        VB: Nitro.IRevertableVar.ValueType
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: ValueType
        path: ''
        startLine: 61565
      summary: "\nThe type of the value being held by the revertible variable\n"
      example: []
      syntax:
        content:
          CSharp: Type ValueType { get; }
          VB: ReadOnly Property ValueType As Type
        parameters: []
        return:
          type: Global.Type
      overload: Nitro.IRevertableVar.ValueType*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: Nitro.IRevertableVar.GetModifiers
      commentId: M:Nitro.IRevertableVar.GetModifiers
      language: CSharp
      name:
        CSharp: GetModifiers()
        VB: GetModifiers()
      nameWithType:
        CSharp: IRevertableVar.GetModifiers()
        VB: IRevertableVar.GetModifiers()
      qualifiedName:
        CSharp: Nitro.IRevertableVar.GetModifiers()
        VB: Nitro.IRevertableVar.GetModifiers()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: GetModifiers
        path: ''
        startLine: 61571
      summary: "\nGets a list of all the added modifiers to this revertable variable\n"
      example: []
      syntax:
        content:
          CSharp: IEnumerable<IModifier> GetModifiers()
          VB: Function GetModifiers As IEnumerable(Of IModifier)
        return:
          type: System.Collections.Generic.IEnumerable{Nitro.IModifier}
          description: ''
      overload: Nitro.IRevertableVar.GetModifiers*
      modifiers:
        CSharp: []
        VB: []
    - id: Nitro.IRevertableVar.Revert(Nitro.IModifier)
      commentId: M:Nitro.IRevertableVar.Revert(Nitro.IModifier)
      language: CSharp
      name:
        CSharp: Revert(IModifier)
        VB: Revert(IModifier)
      nameWithType:
        CSharp: IRevertableVar.Revert(IModifier)
        VB: IRevertableVar.Revert(IModifier)
      qualifiedName:
        CSharp: Nitro.IRevertableVar.Revert(Nitro.IModifier)
        VB: Nitro.IRevertableVar.Revert(Nitro.IModifier)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro
      source:
        id: Revert
        path: ''
        startLine: 61577
      summary: "\nReverts a modifier\n"
      example: []
      syntax:
        content:
          CSharp: void Revert(IModifier modifier)
          VB: Sub Revert(modifier As IModifier)
        parameters:
        - id: modifier
          type: Nitro.IModifier
          description: The modifier to revert
      overload: Nitro.IRevertableVar.Revert*
      modifiers:
        CSharp: []
        VB: []
- id: Nitro.Mirror
  commentId: N:Nitro.Mirror
  language: CSharp
  name:
    CSharp: Nitro.Mirror
    VB: Nitro.Mirror
  nameWithType:
    CSharp: Nitro.Mirror
    VB: Nitro.Mirror
  qualifiedName:
    CSharp: Nitro.Mirror
    VB: Nitro.Mirror
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Nitro.Mirror.RevertableVarReaderWriter
    commentId: T:Nitro.Mirror.RevertableVarReaderWriter
    language: CSharp
    name:
      CSharp: RevertableVarReaderWriter
      VB: RevertableVarReaderWriter
    nameWithType:
      CSharp: RevertableVarReaderWriter
      VB: RevertableVarReaderWriter
    qualifiedName:
      CSharp: Nitro.Mirror.RevertableVarReaderWriter
      VB: Nitro.Mirror.RevertableVarReaderWriter
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Nitro.Mirror
    source:
      id: RevertableVarReaderWriter
      path: ''
      startLine: 61993
    syntax:
      content:
        CSharp: public static class RevertableVarReaderWriter
        VB: Public Module RevertableVarReaderWriter
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Nitro.Mirror.RevertableVarReaderWriter.SyncTest``1(Nitro.RevertableVar{``0},System.String,System.String,System.Int32)
      commentId: M:Nitro.Mirror.RevertableVarReaderWriter.SyncTest``1(Nitro.RevertableVar{``0},System.String,System.String,System.Int32)
      language: CSharp
      name:
        CSharp: SyncTest<T>(RevertableVar<T>, String, String, Int32)
        VB: SyncTest(Of T)(RevertableVar(Of T), String, String, Int32)
      nameWithType:
        CSharp: RevertableVarReaderWriter.SyncTest<T>(RevertableVar<T>, String, String, Int32)
        VB: RevertableVarReaderWriter.SyncTest(Of T)(RevertableVar(Of T), String, String, Int32)
      qualifiedName:
        CSharp: Nitro.Mirror.RevertableVarReaderWriter.SyncTest<T>(Nitro.RevertableVar<T>, System.String, System.String, System.Int32)
        VB: Nitro.Mirror.RevertableVarReaderWriter.SyncTest(Of T)(Nitro.RevertableVar(Of T), System.String, System.String, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Nitro.Mirror
      source:
        id: SyncTest
        path: ''
        startLine: 61995
      syntax:
        content:
          CSharp: public static void SyncTest<T>(RevertableVar<T> revertableVar, string memberName = "", string sourceFilePath = "", int sourceLineNumber = 0)
          VB: Public Shared Sub SyncTest(Of T)(revertableVar As RevertableVar(Of T), memberName As String = "", sourceFilePath As String = "", sourceLineNumber As Integer = 0)
        parameters:
        - id: revertableVar
          type: Nitro.RevertableVar{{T}}
        - id: memberName
          type: System.String
        - id: sourceFilePath
          type: System.String
        - id: sourceLineNumber
          type: System.Int32
        typeParameters:
        - id: T
      overload: Nitro.Mirror.RevertableVarReaderWriter.SyncTest*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
references:
  Nitro:
    name:
      CSharp:
      - name: Nitro
        nameWithType: Nitro
        qualifiedName: Nitro
      VB:
      - name: Nitro
        nameWithType: Nitro
        qualifiedName: Nitro
    isDefinition: true
    commentId: N:Nitro
  Nitro.ICollector:
    name:
      CSharp:
      - id: Nitro.ICollector
        name: ICollector
        nameWithType: ICollector
        qualifiedName: Nitro.ICollector
      VB:
      - id: Nitro.ICollector
        name: ICollector
        nameWithType: ICollector
        qualifiedName: Nitro.ICollector
    isDefinition: true
    parent: Nitro
    commentId: T:Nitro.ICollector
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  Nitro.Collector.CollectorEnabled*:
    name:
      CSharp:
      - id: Nitro.Collector.CollectorEnabled*
        name: CollectorEnabled
        nameWithType: Collector.CollectorEnabled
        qualifiedName: Nitro.Collector.CollectorEnabled
      VB:
      - id: Nitro.Collector.CollectorEnabled*
        name: CollectorEnabled
        nameWithType: Collector.CollectorEnabled
        qualifiedName: Nitro.Collector.CollectorEnabled
    isDefinition: true
    commentId: Overload:Nitro.Collector.CollectorEnabled
  Nitro.Collector.CollectOnContact*:
    name:
      CSharp:
      - id: Nitro.Collector.CollectOnContact*
        name: CollectOnContact
        nameWithType: Collector.CollectOnContact
        qualifiedName: Nitro.Collector.CollectOnContact
      VB:
      - id: Nitro.Collector.CollectOnContact*
        name: CollectOnContact
        nameWithType: Collector.CollectOnContact
        qualifiedName: Nitro.Collector.CollectOnContact
    isDefinition: true
    commentId: Overload:Nitro.Collector.CollectOnContact
  Nitro.IPowerup:
    name:
      CSharp:
      - id: Nitro.IPowerup
        name: IPowerup
        nameWithType: IPowerup
        qualifiedName: Nitro.IPowerup
      VB:
      - id: Nitro.IPowerup
        name: IPowerup
        nameWithType: IPowerup
        qualifiedName: Nitro.IPowerup
    isDefinition: true
    parent: Nitro
    commentId: T:Nitro.IPowerup
  Nitro.Collector.CanCollectPowerup*:
    name:
      CSharp:
      - id: Nitro.Collector.CanCollectPowerup*
        name: CanCollectPowerup
        nameWithType: Collector.CanCollectPowerup
        qualifiedName: Nitro.Collector.CanCollectPowerup
      VB:
      - id: Nitro.Collector.CanCollectPowerup*
        name: CanCollectPowerup
        nameWithType: Collector.CanCollectPowerup
        qualifiedName: Nitro.Collector.CanCollectPowerup
    isDefinition: true
    commentId: Overload:Nitro.Collector.CanCollectPowerup
  Nitro.ICollector.CanCollectPowerup(Nitro.IPowerup):
    name:
      CSharp:
      - id: Nitro.ICollector.CanCollectPowerup(Nitro.IPowerup)
        name: CanCollectPowerup
        nameWithType: ICollector.CanCollectPowerup
        qualifiedName: Nitro.ICollector.CanCollectPowerup
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Nitro.IPowerup
        name: IPowerup
        nameWithType: IPowerup
        qualifiedName: Nitro.IPowerup
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.ICollector.CanCollectPowerup(Nitro.IPowerup)
        name: CanCollectPowerup
        nameWithType: ICollector.CanCollectPowerup
        qualifiedName: Nitro.ICollector.CanCollectPowerup
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Nitro.IPowerup
        name: IPowerup
        nameWithType: IPowerup
        qualifiedName: Nitro.IPowerup
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.ICollector
    commentId: M:Nitro.ICollector.CanCollectPowerup(Nitro.IPowerup)
  Nitro.Collector.OnCollect*:
    name:
      CSharp:
      - id: Nitro.Collector.OnCollect*
        name: OnCollect
        nameWithType: Collector.OnCollect
        qualifiedName: Nitro.Collector.OnCollect
      VB:
      - id: Nitro.Collector.OnCollect*
        name: OnCollect
        nameWithType: Collector.OnCollect
        qualifiedName: Nitro.Collector.OnCollect
    isDefinition: true
    commentId: Overload:Nitro.Collector.OnCollect
  Nitro.Collector.Execute*:
    name:
      CSharp:
      - id: Nitro.Collector.Execute*
        name: Execute
        nameWithType: Collector.Execute
        qualifiedName: Nitro.Collector.Execute
      VB:
      - id: Nitro.Collector.Execute*
        name: Execute
        nameWithType: Collector.Execute
        qualifiedName: Nitro.Collector.Execute
    isDefinition: true
    commentId: Overload:Nitro.Collector.Execute
  Nitro.ICollector.Execute:
    name:
      CSharp:
      - id: Nitro.ICollector.Execute
        name: Execute
        nameWithType: ICollector.Execute
        qualifiedName: Nitro.ICollector.Execute
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.ICollector.Execute
        name: Execute
        nameWithType: ICollector.Execute
        qualifiedName: Nitro.ICollector.Execute
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.ICollector
    commentId: M:Nitro.ICollector.Execute
  Global.UnityEvent`1:
    name:
      CSharp:
      - id: Global.UnityEvent`1
        name: UnityEvent
        nameWithType: UnityEvent
        qualifiedName: UnityEvent
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.UnityEvent`1
        name: UnityEvent
        nameWithType: UnityEvent
        qualifiedName: UnityEvent
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:Global.UnityEvent`1'
  Global.UnityEvent{Nitro.IPowerup}:
    name:
      CSharp:
      - id: Global.UnityEvent`1
        name: UnityEvent
        nameWithType: UnityEvent
        qualifiedName: UnityEvent
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Nitro.IPowerup
        name: IPowerup
        nameWithType: IPowerup
        qualifiedName: Nitro.IPowerup
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.UnityEvent`1
        name: UnityEvent
        nameWithType: UnityEvent
        qualifiedName: UnityEvent
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Nitro.IPowerup
        name: IPowerup
        nameWithType: IPowerup
        qualifiedName: Nitro.IPowerup
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.UnityEvent`1
    commentId: '!:Global.UnityEvent{Nitro.IPowerup}'
  Nitro.Collector.CollectPowerup*:
    name:
      CSharp:
      - id: Nitro.Collector.CollectPowerup*
        name: CollectPowerup
        nameWithType: Collector.CollectPowerup
        qualifiedName: Nitro.Collector.CollectPowerup
      VB:
      - id: Nitro.Collector.CollectPowerup*
        name: CollectPowerup
        nameWithType: Collector.CollectPowerup
        qualifiedName: Nitro.Collector.CollectPowerup
    isDefinition: true
    commentId: Overload:Nitro.Collector.CollectPowerup
  Nitro.ICollector.CollectPowerup(Nitro.IPowerup):
    name:
      CSharp:
      - id: Nitro.ICollector.CollectPowerup(Nitro.IPowerup)
        name: CollectPowerup
        nameWithType: ICollector.CollectPowerup
        qualifiedName: Nitro.ICollector.CollectPowerup
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Nitro.IPowerup
        name: IPowerup
        nameWithType: IPowerup
        qualifiedName: Nitro.IPowerup
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.ICollector.CollectPowerup(Nitro.IPowerup)
        name: CollectPowerup
        nameWithType: ICollector.CollectPowerup
        qualifiedName: Nitro.ICollector.CollectPowerup
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Nitro.IPowerup
        name: IPowerup
        nameWithType: IPowerup
        qualifiedName: Nitro.IPowerup
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.ICollector
    commentId: M:Nitro.ICollector.CollectPowerup(Nitro.IPowerup)
  Global.Collider:
    name:
      CSharp:
      - id: Global.Collider
        name: Collider
        nameWithType: Collider
        qualifiedName: Collider
        isExternal: true
      VB:
      - id: Global.Collider
        name: Collider
        nameWithType: Collider
        qualifiedName: Collider
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Collider'
  Nitro.Collector.OnTriggerEnter*:
    name:
      CSharp:
      - id: Nitro.Collector.OnTriggerEnter*
        name: OnTriggerEnter
        nameWithType: Collector.OnTriggerEnter
        qualifiedName: Nitro.Collector.OnTriggerEnter
      VB:
      - id: Nitro.Collector.OnTriggerEnter*
        name: OnTriggerEnter
        nameWithType: Collector.OnTriggerEnter
        qualifiedName: Nitro.Collector.OnTriggerEnter
    isDefinition: true
    commentId: Overload:Nitro.Collector.OnTriggerEnter
  Global.Collider2D:
    name:
      CSharp:
      - id: Global.Collider2D
        name: Collider2D
        nameWithType: Collider2D
        qualifiedName: Collider2D
        isExternal: true
      VB:
      - id: Global.Collider2D
        name: Collider2D
        nameWithType: Collider2D
        qualifiedName: Collider2D
        isExternal: true
    isDefinition: true
  Nitro.Collector.OnTriggerEnter2D*:
    name:
      CSharp:
      - id: Nitro.Collector.OnTriggerEnter2D*
        name: OnTriggerEnter2D
        nameWithType: Collector.OnTriggerEnter2D
        qualifiedName: Nitro.Collector.OnTriggerEnter2D
      VB:
      - id: Nitro.Collector.OnTriggerEnter2D*
        name: OnTriggerEnter2D
        nameWithType: Collector.OnTriggerEnter2D
        qualifiedName: Nitro.Collector.OnTriggerEnter2D
    isDefinition: true
    commentId: Overload:Nitro.Collector.OnTriggerEnter2D
  Global.Collision:
    name:
      CSharp:
      - id: Global.Collision
        name: Collision
        nameWithType: Collision
        qualifiedName: Collision
        isExternal: true
      VB:
      - id: Global.Collision
        name: Collision
        nameWithType: Collision
        qualifiedName: Collision
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Collision'
  Nitro.Collector.OnCollisionEnter*:
    name:
      CSharp:
      - id: Nitro.Collector.OnCollisionEnter*
        name: OnCollisionEnter
        nameWithType: Collector.OnCollisionEnter
        qualifiedName: Nitro.Collector.OnCollisionEnter
      VB:
      - id: Nitro.Collector.OnCollisionEnter*
        name: OnCollisionEnter
        nameWithType: Collector.OnCollisionEnter
        qualifiedName: Nitro.Collector.OnCollisionEnter
    isDefinition: true
    commentId: Overload:Nitro.Collector.OnCollisionEnter
  Global.Collision2D:
    name:
      CSharp:
      - id: Global.Collision2D
        name: Collision2D
        nameWithType: Collision2D
        qualifiedName: Collision2D
        isExternal: true
      VB:
      - id: Global.Collision2D
        name: Collision2D
        nameWithType: Collision2D
        qualifiedName: Collision2D
        isExternal: true
    isDefinition: true
  Nitro.Collector.OnCollisionEnter2D*:
    name:
      CSharp:
      - id: Nitro.Collector.OnCollisionEnter2D*
        name: OnCollisionEnter2D
        nameWithType: Collector.OnCollisionEnter2D
        qualifiedName: Nitro.Collector.OnCollisionEnter2D
      VB:
      - id: Nitro.Collector.OnCollisionEnter2D*
        name: OnCollisionEnter2D
        nameWithType: Collector.OnCollisionEnter2D
        qualifiedName: Nitro.Collector.OnCollisionEnter2D
    isDefinition: true
    commentId: Overload:Nitro.Collector.OnCollisionEnter2D
  Nitro.Collector:
    name:
      CSharp:
      - id: Nitro.Collector
        name: Collector
        nameWithType: Collector
        qualifiedName: Nitro.Collector
      VB:
      - id: Nitro.Collector
        name: Collector
        nameWithType: Collector
        qualifiedName: Nitro.Collector
    isDefinition: true
    parent: Nitro
    commentId: T:Nitro.Collector
  System.Collections.Generic.IEnumerable`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerable`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.IEnumerable{Collider}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.Collider
        name: Collider
        nameWithType: Collider
        qualifiedName: Collider
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.Collider
        name: Collider
        nameWithType: Collider
        qualifiedName: Collider
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{Collider}
  Nitro.Collidable.Collisions*:
    name:
      CSharp:
      - id: Nitro.Collidable.Collisions*
        name: Collisions
        nameWithType: Collidable.Collisions
        qualifiedName: Nitro.Collidable.Collisions
      VB:
      - id: Nitro.Collidable.Collisions*
        name: Collisions
        nameWithType: Collidable.Collisions
        qualifiedName: Nitro.Collidable.Collisions
    isDefinition: true
    commentId: Overload:Nitro.Collidable.Collisions
  Global.Action`1:
    name:
      CSharp:
      - id: Global.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:Global.Action`1'
  Global.Action{Collider}:
    name:
      CSharp:
      - id: Global.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.Collider
        name: Collider
        nameWithType: Collider
        qualifiedName: Collider
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.Collider
        name: Collider
        nameWithType: Collider
        qualifiedName: Collider
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.Action`1
    commentId: '!:Global.Action{Collider}'
  Global.Action`2:
    name:
      CSharp:
      - id: Global.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  Global.Action{Collider,System.Boolean}:
    name:
      CSharp:
      - id: Global.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.Collider
        name: Collider
        nameWithType: Collider
        qualifiedName: Collider
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.Collider
        name: Collider
        nameWithType: Collider
        qualifiedName: Collider
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.Action`2
    commentId: '!:Global.Action{Collider,System.Boolean}'
  Nitro.Collidable:
    name:
      CSharp:
      - id: Nitro.Collidable
        name: Collidable
        nameWithType: Collidable
        qualifiedName: Nitro.Collidable
      VB:
      - id: Nitro.Collidable
        name: Collidable
        nameWithType: Collidable
        qualifiedName: Nitro.Collidable
    isDefinition: true
    commentId: T:Nitro.Collidable
  System.Collections.Generic.IEnumerable{Collider2D}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.Collider2D
        name: Collider2D
        nameWithType: Collider2D
        qualifiedName: Collider2D
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.Collider2D
        name: Collider2D
        nameWithType: Collider2D
        qualifiedName: Collider2D
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{Collider2D}
  Nitro.Collidable2D.CollidedBodies*:
    name:
      CSharp:
      - id: Nitro.Collidable2D.CollidedBodies*
        name: CollidedBodies
        nameWithType: Collidable2D.CollidedBodies
        qualifiedName: Nitro.Collidable2D.CollidedBodies
      VB:
      - id: Nitro.Collidable2D.CollidedBodies*
        name: CollidedBodies
        nameWithType: Collidable2D.CollidedBodies
        qualifiedName: Nitro.Collidable2D.CollidedBodies
    isDefinition: true
    commentId: Overload:Nitro.Collidable2D.CollidedBodies
  Nitro.Collidable2D.OnCollideStart*:
    name:
      CSharp:
      - id: Nitro.Collidable2D.OnCollideStart*
        name: OnCollideStart
        nameWithType: Collidable2D.OnCollideStart
        qualifiedName: Nitro.Collidable2D.OnCollideStart
      VB:
      - id: Nitro.Collidable2D.OnCollideStart*
        name: OnCollideStart
        nameWithType: Collidable2D.OnCollideStart
        qualifiedName: Nitro.Collidable2D.OnCollideStart
    isDefinition: true
    commentId: Overload:Nitro.Collidable2D.OnCollideStart
  Nitro.Collidable2D.OnCollideStop*:
    name:
      CSharp:
      - id: Nitro.Collidable2D.OnCollideStop*
        name: OnCollideStop
        nameWithType: Collidable2D.OnCollideStop
        qualifiedName: Nitro.Collidable2D.OnCollideStop
      VB:
      - id: Nitro.Collidable2D.OnCollideStop*
        name: OnCollideStop
        nameWithType: Collidable2D.OnCollideStop
        qualifiedName: Nitro.Collidable2D.OnCollideStop
    isDefinition: true
    commentId: Overload:Nitro.Collidable2D.OnCollideStop
  Nitro.Collidable2D.OnTriggerEnter2D*:
    name:
      CSharp:
      - id: Nitro.Collidable2D.OnTriggerEnter2D*
        name: OnTriggerEnter2D
        nameWithType: Collidable2D.OnTriggerEnter2D
        qualifiedName: Nitro.Collidable2D.OnTriggerEnter2D
      VB:
      - id: Nitro.Collidable2D.OnTriggerEnter2D*
        name: OnTriggerEnter2D
        nameWithType: Collidable2D.OnTriggerEnter2D
        qualifiedName: Nitro.Collidable2D.OnTriggerEnter2D
    isDefinition: true
    commentId: Overload:Nitro.Collidable2D.OnTriggerEnter2D
  Nitro.Collidable2D.OnTriggerExit2D*:
    name:
      CSharp:
      - id: Nitro.Collidable2D.OnTriggerExit2D*
        name: OnTriggerExit2D
        nameWithType: Collidable2D.OnTriggerExit2D
        qualifiedName: Nitro.Collidable2D.OnTriggerExit2D
      VB:
      - id: Nitro.Collidable2D.OnTriggerExit2D*
        name: OnTriggerExit2D
        nameWithType: Collidable2D.OnTriggerExit2D
        qualifiedName: Nitro.Collidable2D.OnTriggerExit2D
    isDefinition: true
    commentId: Overload:Nitro.Collidable2D.OnTriggerExit2D
  Nitro.Collidable2D.OnCollisionEnter2D*:
    name:
      CSharp:
      - id: Nitro.Collidable2D.OnCollisionEnter2D*
        name: OnCollisionEnter2D
        nameWithType: Collidable2D.OnCollisionEnter2D
        qualifiedName: Nitro.Collidable2D.OnCollisionEnter2D
      VB:
      - id: Nitro.Collidable2D.OnCollisionEnter2D*
        name: OnCollisionEnter2D
        nameWithType: Collidable2D.OnCollisionEnter2D
        qualifiedName: Nitro.Collidable2D.OnCollisionEnter2D
    isDefinition: true
    commentId: Overload:Nitro.Collidable2D.OnCollisionEnter2D
  Nitro.Collidable2D.OnCollisionExit2D*:
    name:
      CSharp:
      - id: Nitro.Collidable2D.OnCollisionExit2D*
        name: OnCollisionExit2D
        nameWithType: Collidable2D.OnCollisionExit2D
        qualifiedName: Nitro.Collidable2D.OnCollisionExit2D
      VB:
      - id: Nitro.Collidable2D.OnCollisionExit2D*
        name: OnCollisionExit2D
        nameWithType: Collidable2D.OnCollisionExit2D
        qualifiedName: Nitro.Collidable2D.OnCollisionExit2D
    isDefinition: true
    commentId: Overload:Nitro.Collidable2D.OnCollisionExit2D
  Nitro.Collidable2D.LateUpdate*:
    name:
      CSharp:
      - id: Nitro.Collidable2D.LateUpdate*
        name: LateUpdate
        nameWithType: Collidable2D.LateUpdate
        qualifiedName: Nitro.Collidable2D.LateUpdate
      VB:
      - id: Nitro.Collidable2D.LateUpdate*
        name: LateUpdate
        nameWithType: Collidable2D.LateUpdate
        qualifiedName: Nitro.Collidable2D.LateUpdate
    isDefinition: true
    commentId: Overload:Nitro.Collidable2D.LateUpdate
  Nitro.Collidable2D.OnDisable*:
    name:
      CSharp:
      - id: Nitro.Collidable2D.OnDisable*
        name: OnDisable
        nameWithType: Collidable2D.OnDisable
        qualifiedName: Nitro.Collidable2D.OnDisable
      VB:
      - id: Nitro.Collidable2D.OnDisable*
        name: OnDisable
        nameWithType: Collidable2D.OnDisable
        qualifiedName: Nitro.Collidable2D.OnDisable
    isDefinition: true
    commentId: Overload:Nitro.Collidable2D.OnDisable
  Nitro.Collidable2D.OnEnable*:
    name:
      CSharp:
      - id: Nitro.Collidable2D.OnEnable*
        name: OnEnable
        nameWithType: Collidable2D.OnEnable
        qualifiedName: Nitro.Collidable2D.OnEnable
      VB:
      - id: Nitro.Collidable2D.OnEnable*
        name: OnEnable
        nameWithType: Collidable2D.OnEnable
        qualifiedName: Nitro.Collidable2D.OnEnable
    isDefinition: true
    commentId: Overload:Nitro.Collidable2D.OnEnable
  Nitro.Collidable2D.OnDestroy*:
    name:
      CSharp:
      - id: Nitro.Collidable2D.OnDestroy*
        name: OnDestroy
        nameWithType: Collidable2D.OnDestroy
        qualifiedName: Nitro.Collidable2D.OnDestroy
      VB:
      - id: Nitro.Collidable2D.OnDestroy*
        name: OnDestroy
        nameWithType: Collidable2D.OnDestroy
        qualifiedName: Nitro.Collidable2D.OnDestroy
    isDefinition: true
    commentId: Overload:Nitro.Collidable2D.OnDestroy
  Nitro.Collidable2D:
    name:
      CSharp:
      - id: Nitro.Collidable2D
        name: Collidable2D
        nameWithType: Collidable2D
        qualifiedName: Nitro.Collidable2D
      VB:
      - id: Nitro.Collidable2D
        name: Collidable2D
        nameWithType: Collidable2D
        qualifiedName: Nitro.Collidable2D
    isDefinition: true
    commentId: T:Nitro.Collidable2D
  Nitro.MultiplePowerupCollector:
    name:
      CSharp:
      - id: Nitro.MultiplePowerupCollector
        name: MultiplePowerupCollector
        nameWithType: MultiplePowerupCollector
        qualifiedName: Nitro.MultiplePowerupCollector
      VB:
      - id: Nitro.MultiplePowerupCollector
        name: MultiplePowerupCollector
        nameWithType: MultiplePowerupCollector
        qualifiedName: Nitro.MultiplePowerupCollector
    isDefinition: true
    commentId: T:Nitro.MultiplePowerupCollector
  Nitro.CombinablePowerup.Priority:
    commentId: P:Nitro.CombinablePowerup.Priority
  Nitro.Powerup:
    name:
      CSharp:
      - id: Nitro.Powerup
        name: Powerup
        nameWithType: Powerup
        qualifiedName: Nitro.Powerup
      VB:
      - id: Nitro.Powerup
        name: Powerup
        nameWithType: Powerup
        qualifiedName: Nitro.Powerup
    isDefinition: true
    parent: Nitro
    commentId: T:Nitro.Powerup
  Nitro.Powerup.Collector:
    name:
      CSharp:
      - id: Nitro.Powerup.Collector
        name: Collector
        nameWithType: Powerup.Collector
        qualifiedName: Nitro.Powerup.Collector
      VB:
      - id: Nitro.Powerup.Collector
        name: Collector
        nameWithType: Powerup.Collector
        qualifiedName: Nitro.Powerup.Collector
    isDefinition: true
    parent: Nitro.Powerup
    commentId: P:Nitro.Powerup.Collector
  Nitro.Powerup.hideObjectOnCollect:
    name:
      CSharp:
      - id: Nitro.Powerup.hideObjectOnCollect
        name: hideObjectOnCollect
        nameWithType: Powerup.hideObjectOnCollect
        qualifiedName: Nitro.Powerup.hideObjectOnCollect
      VB:
      - id: Nitro.Powerup.hideObjectOnCollect
        name: hideObjectOnCollect
        nameWithType: Powerup.hideObjectOnCollect
        qualifiedName: Nitro.Powerup.hideObjectOnCollect
    isDefinition: true
    parent: Nitro.Powerup
    commentId: F:Nitro.Powerup.hideObjectOnCollect
  Nitro.Powerup.HideObjectOnCollect:
    name:
      CSharp:
      - id: Nitro.Powerup.HideObjectOnCollect
        name: HideObjectOnCollect
        nameWithType: Powerup.HideObjectOnCollect
        qualifiedName: Nitro.Powerup.HideObjectOnCollect
      VB:
      - id: Nitro.Powerup.HideObjectOnCollect
        name: HideObjectOnCollect
        nameWithType: Powerup.HideObjectOnCollect
        qualifiedName: Nitro.Powerup.HideObjectOnCollect
    isDefinition: true
    parent: Nitro.Powerup
    commentId: P:Nitro.Powerup.HideObjectOnCollect
  Nitro.Powerup.OnCollect(Nitro.ICollector):
    name:
      CSharp:
      - id: Nitro.Powerup.OnCollect(Nitro.ICollector)
        name: OnCollect
        nameWithType: Powerup.OnCollect
        qualifiedName: Nitro.Powerup.OnCollect
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Nitro.ICollector
        name: ICollector
        nameWithType: ICollector
        qualifiedName: Nitro.ICollector
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.Powerup.OnCollect(Nitro.ICollector)
        name: OnCollect
        nameWithType: Powerup.OnCollect
        qualifiedName: Nitro.Powerup.OnCollect
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Nitro.ICollector
        name: ICollector
        nameWithType: ICollector
        qualifiedName: Nitro.ICollector
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.Powerup
    commentId: M:Nitro.Powerup.OnCollect(Nitro.ICollector)
  Nitro.Powerup.DoneUsingPowerupAfter(System.Single,Action):
    name:
      CSharp:
      - id: Nitro.Powerup.DoneUsingPowerupAfter(System.Single,Action)
        name: DoneUsingPowerupAfter
        nameWithType: Powerup.DoneUsingPowerupAfter
        qualifiedName: Nitro.Powerup.DoneUsingPowerupAfter
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.Action
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.Powerup.DoneUsingPowerupAfter(System.Single,Action)
        name: DoneUsingPowerupAfter
        nameWithType: Powerup.DoneUsingPowerupAfter
        qualifiedName: Nitro.Powerup.DoneUsingPowerupAfter
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.Action
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.Powerup
    commentId: M:Nitro.Powerup.DoneUsingPowerupAfter(System.Single,Action)
  Nitro.ICombinablePowerup:
    name:
      CSharp:
      - id: Nitro.ICombinablePowerup
        name: ICombinablePowerup
        nameWithType: ICombinablePowerup
        qualifiedName: Nitro.ICombinablePowerup
      VB:
      - id: Nitro.ICombinablePowerup
        name: ICombinablePowerup
        nameWithType: ICombinablePowerup
        qualifiedName: Nitro.ICombinablePowerup
    isDefinition: true
    parent: Nitro
    commentId: T:Nitro.ICombinablePowerup
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  Nitro.CombinablePowerup.Priority*:
    name:
      CSharp:
      - id: Nitro.CombinablePowerup.Priority*
        name: Priority
        nameWithType: CombinablePowerup.Priority
        qualifiedName: Nitro.CombinablePowerup.Priority
      VB:
      - id: Nitro.CombinablePowerup.Priority*
        name: Priority
        nameWithType: CombinablePowerup.Priority
        qualifiedName: Nitro.CombinablePowerup.Priority
    isDefinition: true
    commentId: Overload:Nitro.CombinablePowerup.Priority
  Nitro.ICombinablePowerup.Priority:
    name:
      CSharp:
      - id: Nitro.ICombinablePowerup.Priority
        name: Priority
        nameWithType: ICombinablePowerup.Priority
        qualifiedName: Nitro.ICombinablePowerup.Priority
      VB:
      - id: Nitro.ICombinablePowerup.Priority
        name: Priority
        nameWithType: ICombinablePowerup.Priority
        qualifiedName: Nitro.ICombinablePowerup.Priority
    isDefinition: true
    parent: Nitro.ICombinablePowerup
    commentId: P:Nitro.ICombinablePowerup.Priority
  Global.ReadOnlySpan`1:
    name:
      CSharp:
      - id: Global.ReadOnlySpan`1
        name: ReadOnlySpan
        nameWithType: ReadOnlySpan
        qualifiedName: ReadOnlySpan
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.ReadOnlySpan`1
        name: ReadOnlySpan
        nameWithType: ReadOnlySpan
        qualifiedName: ReadOnlySpan
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:Global.ReadOnlySpan`1'
  Global.ReadOnlySpan{Nitro.ICombinablePowerup}:
    name:
      CSharp:
      - id: Global.ReadOnlySpan`1
        name: ReadOnlySpan
        nameWithType: ReadOnlySpan
        qualifiedName: ReadOnlySpan
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Nitro.ICombinablePowerup
        name: ICombinablePowerup
        nameWithType: ICombinablePowerup
        qualifiedName: Nitro.ICombinablePowerup
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.ReadOnlySpan`1
        name: ReadOnlySpan
        nameWithType: ReadOnlySpan
        qualifiedName: ReadOnlySpan
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Nitro.ICombinablePowerup
        name: ICombinablePowerup
        nameWithType: ICombinablePowerup
        qualifiedName: Nitro.ICombinablePowerup
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.ReadOnlySpan`1
    commentId: '!:Global.ReadOnlySpan{Nitro.ICombinablePowerup}'
  Nitro.CombinablePowerup.GetPowerupChain*:
    name:
      CSharp:
      - id: Nitro.CombinablePowerup.GetPowerupChain*
        name: GetPowerupChain
        nameWithType: CombinablePowerup.GetPowerupChain
        qualifiedName: Nitro.CombinablePowerup.GetPowerupChain
      VB:
      - id: Nitro.CombinablePowerup.GetPowerupChain*
        name: GetPowerupChain
        nameWithType: CombinablePowerup.GetPowerupChain
        qualifiedName: Nitro.CombinablePowerup.GetPowerupChain
    isDefinition: true
    commentId: Overload:Nitro.CombinablePowerup.GetPowerupChain
  Nitro.CombinablePowerup.HasPowerupInChain*:
    name:
      CSharp:
      - id: Nitro.CombinablePowerup.HasPowerupInChain*
        name: HasPowerupInChain
        nameWithType: CombinablePowerup.HasPowerupInChain
        qualifiedName: Nitro.CombinablePowerup.HasPowerupInChain
      VB:
      - id: Nitro.CombinablePowerup.HasPowerupInChain*
        name: HasPowerupInChain
        nameWithType: CombinablePowerup.HasPowerupInChain
        qualifiedName: Nitro.CombinablePowerup.HasPowerupInChain
    isDefinition: true
    commentId: Overload:Nitro.CombinablePowerup.HasPowerupInChain
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  Global.Type:
    name:
      CSharp:
      - id: Global.Type
        name: Type
        nameWithType: Type
        qualifiedName: Type
        isExternal: true
      VB:
      - id: Global.Type
        name: Type
        nameWithType: Type
        qualifiedName: Type
        isExternal: true
    isDefinition: true
  Nitro.CombinablePowerup.GetPowerupIndex*:
    name:
      CSharp:
      - id: Nitro.CombinablePowerup.GetPowerupIndex*
        name: GetPowerupIndex
        nameWithType: CombinablePowerup.GetPowerupIndex
        qualifiedName: Nitro.CombinablePowerup.GetPowerupIndex
      VB:
      - id: Nitro.CombinablePowerup.GetPowerupIndex*
        name: GetPowerupIndex
        nameWithType: CombinablePowerup.GetPowerupIndex
        qualifiedName: Nitro.CombinablePowerup.GetPowerupIndex
    isDefinition: true
    commentId: Overload:Nitro.CombinablePowerup.GetPowerupIndex
  Nitro.Powerup.DoAction:
    name:
      CSharp:
      - id: Nitro.Powerup.DoAction
        name: DoAction
        nameWithType: Powerup.DoAction
        qualifiedName: Nitro.Powerup.DoAction
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.Powerup.DoAction
        name: DoAction
        nameWithType: Powerup.DoAction
        qualifiedName: Nitro.Powerup.DoAction
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.Powerup
    commentId: M:Nitro.Powerup.DoAction
  Nitro.CombinablePowerup.DoAction*:
    name:
      CSharp:
      - id: Nitro.CombinablePowerup.DoAction*
        name: DoAction
        nameWithType: CombinablePowerup.DoAction
        qualifiedName: Nitro.CombinablePowerup.DoAction
      VB:
      - id: Nitro.CombinablePowerup.DoAction*
        name: DoAction
        nameWithType: CombinablePowerup.DoAction
        qualifiedName: Nitro.CombinablePowerup.DoAction
    isDefinition: true
    commentId: Overload:Nitro.CombinablePowerup.DoAction
  Nitro.IPowerup.DoAction:
    name:
      CSharp:
      - id: Nitro.IPowerup.DoAction
        name: DoAction
        nameWithType: IPowerup.DoAction
        qualifiedName: Nitro.IPowerup.DoAction
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.IPowerup.DoAction
        name: DoAction
        nameWithType: IPowerup.DoAction
        qualifiedName: Nitro.IPowerup.DoAction
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.IPowerup
    commentId: M:Nitro.IPowerup.DoAction
  Global.Vector3:
    name:
      CSharp:
      - id: Global.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      VB:
      - id: Global.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
    isDefinition: true
  Global.Quaternion:
    name:
      CSharp:
      - id: Global.Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
      VB:
      - id: Global.Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
    isDefinition: true
  Global.Action{Vector3,Quaternion}:
    name:
      CSharp:
      - id: Global.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.Action`2
    commentId: '!:Global.Action{Vector3,Quaternion}'
  Nitro.CombinablePowerup.Execute*:
    name:
      CSharp:
      - id: Nitro.CombinablePowerup.Execute*
        name: Execute
        nameWithType: CombinablePowerup.Execute
        qualifiedName: Nitro.CombinablePowerup.Execute
      VB:
      - id: Nitro.CombinablePowerup.Execute*
        name: Execute
        nameWithType: CombinablePowerup.Execute
        qualifiedName: Nitro.CombinablePowerup.Execute
    isDefinition: true
    commentId: Overload:Nitro.CombinablePowerup.Execute
  Nitro.ICombinablePowerup.Execute(Nitro.ICombinablePowerup,Vector3,Quaternion,Action{Vector3,Quaternion}):
    name:
      CSharp:
      - id: Nitro.ICombinablePowerup.Execute(Nitro.ICombinablePowerup,Vector3,Quaternion,Action{Vector3,Quaternion})
        name: Execute
        nameWithType: ICombinablePowerup.Execute
        qualifiedName: Nitro.ICombinablePowerup.Execute
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Nitro.ICombinablePowerup
        name: ICombinablePowerup
        nameWithType: ICombinablePowerup
        qualifiedName: Nitro.ICombinablePowerup
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.ICombinablePowerup.Execute(Nitro.ICombinablePowerup,Vector3,Quaternion,Action{Vector3,Quaternion})
        name: Execute
        nameWithType: ICombinablePowerup.Execute
        qualifiedName: Nitro.ICombinablePowerup.Execute
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Nitro.ICombinablePowerup
        name: ICombinablePowerup
        nameWithType: ICombinablePowerup
        qualifiedName: Nitro.ICombinablePowerup
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.ICombinablePowerup
    commentId: M:Nitro.ICombinablePowerup.Execute(Nitro.ICombinablePowerup,Vector3,Quaternion,Action{Vector3,Quaternion})
  Nitro.CombinablePowerup.GetCallToNextPowerup*:
    name:
      CSharp:
      - id: Nitro.CombinablePowerup.GetCallToNextPowerup*
        name: GetCallToNextPowerup
        nameWithType: CombinablePowerup.GetCallToNextPowerup
        qualifiedName: Nitro.CombinablePowerup.GetCallToNextPowerup
      VB:
      - id: Nitro.CombinablePowerup.GetCallToNextPowerup*
        name: GetCallToNextPowerup
        nameWithType: CombinablePowerup.GetCallToNextPowerup
        qualifiedName: Nitro.CombinablePowerup.GetCallToNextPowerup
    isDefinition: true
    commentId: Overload:Nitro.CombinablePowerup.GetCallToNextPowerup
  Nitro.Powerup.DoneUsingPowerup:
    name:
      CSharp:
      - id: Nitro.Powerup.DoneUsingPowerup
        name: DoneUsingPowerup
        nameWithType: Powerup.DoneUsingPowerup
        qualifiedName: Nitro.Powerup.DoneUsingPowerup
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.Powerup.DoneUsingPowerup
        name: DoneUsingPowerup
        nameWithType: Powerup.DoneUsingPowerup
        qualifiedName: Nitro.Powerup.DoneUsingPowerup
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.Powerup
    commentId: M:Nitro.Powerup.DoneUsingPowerup
  Nitro.CombinablePowerup.DoneUsingPowerup*:
    name:
      CSharp:
      - id: Nitro.CombinablePowerup.DoneUsingPowerup*
        name: DoneUsingPowerup
        nameWithType: CombinablePowerup.DoneUsingPowerup
        qualifiedName: Nitro.CombinablePowerup.DoneUsingPowerup
      VB:
      - id: Nitro.CombinablePowerup.DoneUsingPowerup*
        name: DoneUsingPowerup
        nameWithType: CombinablePowerup.DoneUsingPowerup
        qualifiedName: Nitro.CombinablePowerup.DoneUsingPowerup
    isDefinition: true
    commentId: Overload:Nitro.CombinablePowerup.DoneUsingPowerup
  Nitro.IPowerup.DoneUsingPowerup:
    name:
      CSharp:
      - id: Nitro.IPowerup.DoneUsingPowerup
        name: DoneUsingPowerup
        nameWithType: IPowerup.DoneUsingPowerup
        qualifiedName: Nitro.IPowerup.DoneUsingPowerup
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.IPowerup.DoneUsingPowerup
        name: DoneUsingPowerup
        nameWithType: IPowerup.DoneUsingPowerup
        qualifiedName: Nitro.IPowerup.DoneUsingPowerup
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.IPowerup
    commentId: M:Nitro.IPowerup.DoneUsingPowerup
  Nitro.CombinablePowerup:
    name:
      CSharp:
      - id: Nitro.CombinablePowerup
        name: CombinablePowerup
        nameWithType: CombinablePowerup
        qualifiedName: Nitro.CombinablePowerup
      VB:
      - id: Nitro.CombinablePowerup
        name: CombinablePowerup
        nameWithType: CombinablePowerup
        qualifiedName: Nitro.CombinablePowerup
    isDefinition: true
    commentId: T:Nitro.CombinablePowerup
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  Nitro.CombinablePowerup.Comparer.Compare*:
    name:
      CSharp:
      - id: Nitro.CombinablePowerup.Comparer.Compare*
        name: Compare
        nameWithType: CombinablePowerup.Comparer.Compare
        qualifiedName: Nitro.CombinablePowerup.Comparer.Compare
      VB:
      - id: Nitro.CombinablePowerup.Comparer.Compare*
        name: Compare
        nameWithType: CombinablePowerup.Comparer.Compare
        qualifiedName: Nitro.CombinablePowerup.Comparer.Compare
    isDefinition: true
    commentId: Overload:Nitro.CombinablePowerup.Comparer.Compare
  Nitro.CombinablePowerup.Comparer:
    name:
      CSharp:
      - id: Nitro.CombinablePowerup.Comparer
        name: CombinablePowerup.Comparer
        nameWithType: CombinablePowerup.Comparer
        qualifiedName: Nitro.CombinablePowerup.Comparer
      VB:
      - id: Nitro.CombinablePowerup.Comparer
        name: CombinablePowerup.Comparer
        nameWithType: CombinablePowerup.Comparer
        qualifiedName: Nitro.CombinablePowerup.Comparer
    isDefinition: true
    commentId: T:Nitro.CombinablePowerup.Comparer
  Global.GameObject:
    name:
      CSharp:
      - id: Global.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: GameObject
        isExternal: true
      VB:
      - id: Global.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: GameObject
        isExternal: true
    isDefinition: true
    commentId: '!:Global.GameObject'
  Nitro.Extensions.GetGameObject*:
    name:
      CSharp:
      - id: Nitro.Extensions.GetGameObject*
        name: GetGameObject
        nameWithType: Extensions.GetGameObject
        qualifiedName: Nitro.Extensions.GetGameObject
      VB:
      - id: Nitro.Extensions.GetGameObject*
        name: GetGameObject
        nameWithType: Extensions.GetGameObject
        qualifiedName: Nitro.Extensions.GetGameObject
    isDefinition: true
    commentId: Overload:Nitro.Extensions.GetGameObject
  Global.Transform:
    name:
      CSharp:
      - id: Global.Transform
        name: Transform
        nameWithType: Transform
        qualifiedName: Transform
        isExternal: true
      VB:
      - id: Global.Transform
        name: Transform
        nameWithType: Transform
        qualifiedName: Transform
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Transform'
  Nitro.Extensions.GetTransform*:
    name:
      CSharp:
      - id: Nitro.Extensions.GetTransform*
        name: GetTransform
        nameWithType: Extensions.GetTransform
        qualifiedName: Nitro.Extensions.GetTransform
      VB:
      - id: Nitro.Extensions.GetTransform*
        name: GetTransform
        nameWithType: Extensions.GetTransform
        qualifiedName: Nitro.Extensions.GetTransform
    isDefinition: true
    commentId: Overload:Nitro.Extensions.GetTransform
  Nitro.Extensions:
    name:
      CSharp:
      - id: Nitro.Extensions
        name: Extensions
        nameWithType: Extensions
        qualifiedName: Nitro.Extensions
      VB:
      - id: Nitro.Extensions
        name: Extensions
        nameWithType: Extensions
        qualifiedName: Nitro.Extensions
    isDefinition: true
    commentId: T:Nitro.Extensions
  Nitro.GenericMath.HasAdd*:
    name:
      CSharp:
      - id: Nitro.GenericMath.HasAdd*
        name: HasAdd
        nameWithType: GenericMath.HasAdd
        qualifiedName: Nitro.GenericMath.HasAdd
      VB:
      - id: Nitro.GenericMath.HasAdd*
        name: HasAdd
        nameWithType: GenericMath.HasAdd
        qualifiedName: Nitro.GenericMath.HasAdd
    isDefinition: true
    commentId: Overload:Nitro.GenericMath.HasAdd
  Nitro.GenericMath.HasSub*:
    name:
      CSharp:
      - id: Nitro.GenericMath.HasSub*
        name: HasSub
        nameWithType: GenericMath.HasSub
        qualifiedName: Nitro.GenericMath.HasSub
      VB:
      - id: Nitro.GenericMath.HasSub*
        name: HasSub
        nameWithType: GenericMath.HasSub
        qualifiedName: Nitro.GenericMath.HasSub
    isDefinition: true
    commentId: Overload:Nitro.GenericMath.HasSub
  Nitro.GenericMath.HasMul*:
    name:
      CSharp:
      - id: Nitro.GenericMath.HasMul*
        name: HasMul
        nameWithType: GenericMath.HasMul
        qualifiedName: Nitro.GenericMath.HasMul
      VB:
      - id: Nitro.GenericMath.HasMul*
        name: HasMul
        nameWithType: GenericMath.HasMul
        qualifiedName: Nitro.GenericMath.HasMul
    isDefinition: true
    commentId: Overload:Nitro.GenericMath.HasMul
  Nitro.GenericMath.HasDiv*:
    name:
      CSharp:
      - id: Nitro.GenericMath.HasDiv*
        name: HasDiv
        nameWithType: GenericMath.HasDiv
        qualifiedName: Nitro.GenericMath.HasDiv
      VB:
      - id: Nitro.GenericMath.HasDiv*
        name: HasDiv
        nameWithType: GenericMath.HasDiv
        qualifiedName: Nitro.GenericMath.HasDiv
    isDefinition: true
    commentId: Overload:Nitro.GenericMath.HasDiv
  Nitro.GenericMath.Add*:
    name:
      CSharp:
      - id: Nitro.GenericMath.Add*
        name: Add
        nameWithType: GenericMath.Add
        qualifiedName: Nitro.GenericMath.Add
      VB:
      - id: Nitro.GenericMath.Add*
        name: Add
        nameWithType: GenericMath.Add
        qualifiedName: Nitro.GenericMath.Add
    isDefinition: true
    commentId: Overload:Nitro.GenericMath.Add
  Nitro.GenericMath.Sub*:
    name:
      CSharp:
      - id: Nitro.GenericMath.Sub*
        name: Sub
        nameWithType: GenericMath.Sub
        qualifiedName: Nitro.GenericMath.Sub
      VB:
      - id: Nitro.GenericMath.Sub*
        name: Sub
        nameWithType: GenericMath.Sub
        qualifiedName: Nitro.GenericMath.Sub
    isDefinition: true
    commentId: Overload:Nitro.GenericMath.Sub
  Nitro.GenericMath.Mul*:
    name:
      CSharp:
      - id: Nitro.GenericMath.Mul*
        name: Mul
        nameWithType: GenericMath.Mul
        qualifiedName: Nitro.GenericMath.Mul
      VB:
      - id: Nitro.GenericMath.Mul*
        name: Mul
        nameWithType: GenericMath.Mul
        qualifiedName: Nitro.GenericMath.Mul
    isDefinition: true
    commentId: Overload:Nitro.GenericMath.Mul
  Nitro.GenericMath.Div*:
    name:
      CSharp:
      - id: Nitro.GenericMath.Div*
        name: Div
        nameWithType: GenericMath.Div
        qualifiedName: Nitro.GenericMath.Div
      VB:
      - id: Nitro.GenericMath.Div*
        name: Div
        nameWithType: GenericMath.Div
        qualifiedName: Nitro.GenericMath.Div
    isDefinition: true
    commentId: Overload:Nitro.GenericMath.Div
  Nitro.GenericMath:
    name:
      CSharp:
      - id: Nitro.GenericMath
        name: GenericMath
        nameWithType: GenericMath
        qualifiedName: Nitro.GenericMath
      VB:
      - id: Nitro.GenericMath
        name: GenericMath
        nameWithType: GenericMath
        qualifiedName: Nitro.GenericMath
    isDefinition: true
    commentId: T:Nitro.GenericMath
  Nitro.RevertableVar`1:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1
        name: RevertableVar
        nameWithType: RevertableVar
        qualifiedName: Nitro.RevertableVar
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Nitro.RevertableVar`1
        name: RevertableVar
        nameWithType: RevertableVar
        qualifiedName: Nitro.RevertableVar
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro
    commentId: T:Nitro.RevertableVar`1
  Nitro.IModifier:
    name:
      CSharp:
      - id: Nitro.IModifier
        name: IModifier
        nameWithType: IModifier
        qualifiedName: Nitro.IModifier
      VB:
      - id: Nitro.IModifier
        name: IModifier
        nameWithType: IModifier
        qualifiedName: Nitro.IModifier
    isDefinition: true
    parent: Nitro
    commentId: T:Nitro.IModifier
  Nitro.IRevertableVar:
    name:
      CSharp:
      - id: Nitro.IRevertableVar
        name: IRevertableVar
        nameWithType: IRevertableVar
        qualifiedName: Nitro.IRevertableVar
      VB:
      - id: Nitro.IRevertableVar
        name: IRevertableVar
        nameWithType: IRevertableVar
        qualifiedName: Nitro.IRevertableVar
    isDefinition: true
    parent: Nitro
    commentId: T:Nitro.IRevertableVar
  Global.Operation:
    name:
      CSharp:
      - id: Global.Operation
        name: Operation
        nameWithType: Operation
        qualifiedName: Operation
        isExternal: true
      VB:
      - id: Global.Operation
        name: Operation
        nameWithType: Operation
        qualifiedName: Operation
        isExternal: true
    isDefinition: true
  System.Single:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Single
  Global.UnityEngine.Object:
    name:
      CSharp:
      - id: Global.UnityEngine.Object
        name: UnityEngine.Object
        nameWithType: UnityEngine.Object
        qualifiedName: UnityEngine.Object
        isExternal: true
      VB:
      - id: Global.UnityEngine.Object
        name: UnityEngine.Object
        nameWithType: UnityEngine.Object
        qualifiedName: UnityEngine.Object
        isExternal: true
    isDefinition: true
  System.UInt64:
    name:
      CSharp:
      - id: System.UInt64
        name: UInt64
        nameWithType: UInt64
        qualifiedName: System.UInt64
        isExternal: true
      VB:
      - id: System.UInt64
        name: UInt64
        nameWithType: UInt64
        qualifiedName: System.UInt64
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt64
  Nitro.Modifier`1.#ctor*:
    name:
      CSharp:
      - id: Nitro.Modifier`1.#ctor*
        name: Modifier
        nameWithType: Modifier<T>.Modifier
        qualifiedName: Nitro.Modifier<T>.Modifier
      VB:
      - id: Nitro.Modifier`1.#ctor*
        name: Modifier
        nameWithType: Modifier(Of T).Modifier
        qualifiedName: Nitro.Modifier(Of T).Modifier
    isDefinition: true
    commentId: Overload:Nitro.Modifier`1.#ctor
  Nitro.Modifier`1.Op*:
    name:
      CSharp:
      - id: Nitro.Modifier`1.Op*
        name: Op
        nameWithType: Modifier<T>.Op
        qualifiedName: Nitro.Modifier<T>.Op
      VB:
      - id: Nitro.Modifier`1.Op*
        name: Op
        nameWithType: Modifier(Of T).Op
        qualifiedName: Nitro.Modifier(Of T).Op
    isDefinition: true
    commentId: Overload:Nitro.Modifier`1.Op
  Nitro.Modifier`1.Value*:
    name:
      CSharp:
      - id: Nitro.Modifier`1.Value*
        name: Value
        nameWithType: Modifier<T>.Value
        qualifiedName: Nitro.Modifier<T>.Value
      VB:
      - id: Nitro.Modifier`1.Value*
        name: Value
        nameWithType: Modifier(Of T).Value
        qualifiedName: Nitro.Modifier(Of T).Value
    isDefinition: true
    commentId: Overload:Nitro.Modifier`1.Value
  Nitro.Modifier`1.Priority*:
    name:
      CSharp:
      - id: Nitro.Modifier`1.Priority*
        name: Priority
        nameWithType: Modifier<T>.Priority
        qualifiedName: Nitro.Modifier<T>.Priority
      VB:
      - id: Nitro.Modifier`1.Priority*
        name: Priority
        nameWithType: Modifier(Of T).Priority
        qualifiedName: Nitro.Modifier(Of T).Priority
    isDefinition: true
    commentId: Overload:Nitro.Modifier`1.Priority
  Nitro.IModifier.Priority:
    name:
      CSharp:
      - id: Nitro.IModifier.Priority
        name: Priority
        nameWithType: IModifier.Priority
        qualifiedName: Nitro.IModifier.Priority
      VB:
      - id: Nitro.IModifier.Priority
        name: Priority
        nameWithType: IModifier.Priority
        qualifiedName: Nitro.IModifier.Priority
    isDefinition: true
    parent: Nitro.IModifier
    commentId: P:Nitro.IModifier.Priority
  Nitro.Modifier`1.TimeAdded*:
    name:
      CSharp:
      - id: Nitro.Modifier`1.TimeAdded*
        name: TimeAdded
        nameWithType: Modifier<T>.TimeAdded
        qualifiedName: Nitro.Modifier<T>.TimeAdded
      VB:
      - id: Nitro.Modifier`1.TimeAdded*
        name: TimeAdded
        nameWithType: Modifier(Of T).TimeAdded
        qualifiedName: Nitro.Modifier(Of T).TimeAdded
    isDefinition: true
    commentId: Overload:Nitro.Modifier`1.TimeAdded
  Nitro.IModifier.TimeAdded:
    name:
      CSharp:
      - id: Nitro.IModifier.TimeAdded
        name: TimeAdded
        nameWithType: IModifier.TimeAdded
        qualifiedName: Nitro.IModifier.TimeAdded
      VB:
      - id: Nitro.IModifier.TimeAdded
        name: TimeAdded
        nameWithType: IModifier.TimeAdded
        qualifiedName: Nitro.IModifier.TimeAdded
    isDefinition: true
    parent: Nitro.IModifier
    commentId: P:Nitro.IModifier.TimeAdded
  Nitro.Modifier`1.SourceVariable*:
    name:
      CSharp:
      - id: Nitro.Modifier`1.SourceVariable*
        name: SourceVariable
        nameWithType: Modifier<T>.SourceVariable
        qualifiedName: Nitro.Modifier<T>.SourceVariable
      VB:
      - id: Nitro.Modifier`1.SourceVariable*
        name: SourceVariable
        nameWithType: Modifier(Of T).SourceVariable
        qualifiedName: Nitro.Modifier(Of T).SourceVariable
    isDefinition: true
    commentId: Overload:Nitro.Modifier`1.SourceVariable
  Nitro.IModifier.SourceVariable:
    name:
      CSharp:
      - id: Nitro.IModifier.SourceVariable
        name: SourceVariable
        nameWithType: IModifier.SourceVariable
        qualifiedName: Nitro.IModifier.SourceVariable
      VB:
      - id: Nitro.IModifier.SourceVariable
        name: SourceVariable
        nameWithType: IModifier.SourceVariable
        qualifiedName: Nitro.IModifier.SourceVariable
    isDefinition: true
    parent: Nitro.IModifier
    commentId: P:Nitro.IModifier.SourceVariable
  Nitro.Modifier`1.BoundObject*:
    name:
      CSharp:
      - id: Nitro.Modifier`1.BoundObject*
        name: BoundObject
        nameWithType: Modifier<T>.BoundObject
        qualifiedName: Nitro.Modifier<T>.BoundObject
      VB:
      - id: Nitro.Modifier`1.BoundObject*
        name: BoundObject
        nameWithType: Modifier(Of T).BoundObject
        qualifiedName: Nitro.Modifier(Of T).BoundObject
    isDefinition: true
    commentId: Overload:Nitro.Modifier`1.BoundObject
  Nitro.IModifier.BoundObject:
    name:
      CSharp:
      - id: Nitro.IModifier.BoundObject
        name: BoundObject
        nameWithType: IModifier.BoundObject
        qualifiedName: Nitro.IModifier.BoundObject
      VB:
      - id: Nitro.IModifier.BoundObject
        name: BoundObject
        nameWithType: IModifier.BoundObject
        qualifiedName: Nitro.IModifier.BoundObject
    isDefinition: true
    parent: Nitro.IModifier
    commentId: P:Nitro.IModifier.BoundObject
  Nitro.Modifier`1.HasBoundObject*:
    name:
      CSharp:
      - id: Nitro.Modifier`1.HasBoundObject*
        name: HasBoundObject
        nameWithType: Modifier<T>.HasBoundObject
        qualifiedName: Nitro.Modifier<T>.HasBoundObject
      VB:
      - id: Nitro.Modifier`1.HasBoundObject*
        name: HasBoundObject
        nameWithType: Modifier(Of T).HasBoundObject
        qualifiedName: Nitro.Modifier(Of T).HasBoundObject
    isDefinition: true
    commentId: Overload:Nitro.Modifier`1.HasBoundObject
  Nitro.IModifier.HasBoundObject:
    name:
      CSharp:
      - id: Nitro.IModifier.HasBoundObject
        name: HasBoundObject
        nameWithType: IModifier.HasBoundObject
        qualifiedName: Nitro.IModifier.HasBoundObject
      VB:
      - id: Nitro.IModifier.HasBoundObject
        name: HasBoundObject
        nameWithType: IModifier.HasBoundObject
        qualifiedName: Nitro.IModifier.HasBoundObject
    isDefinition: true
    parent: Nitro.IModifier
    commentId: P:Nitro.IModifier.HasBoundObject
  Nitro.Modifier`1.TimeActive*:
    name:
      CSharp:
      - id: Nitro.Modifier`1.TimeActive*
        name: TimeActive
        nameWithType: Modifier<T>.TimeActive
        qualifiedName: Nitro.Modifier<T>.TimeActive
      VB:
      - id: Nitro.Modifier`1.TimeActive*
        name: TimeActive
        nameWithType: Modifier(Of T).TimeActive
        qualifiedName: Nitro.Modifier(Of T).TimeActive
    isDefinition: true
    commentId: Overload:Nitro.Modifier`1.TimeActive
  Nitro.Modifier`1.ID*:
    name:
      CSharp:
      - id: Nitro.Modifier`1.ID*
        name: ID
        nameWithType: Modifier<T>.ID
        qualifiedName: Nitro.Modifier<T>.ID
      VB:
      - id: Nitro.Modifier`1.ID*
        name: ID
        nameWithType: Modifier(Of T).ID
        qualifiedName: Nitro.Modifier(Of T).ID
    isDefinition: true
    commentId: Overload:Nitro.Modifier`1.ID
  Nitro.IModifier.ID:
    name:
      CSharp:
      - id: Nitro.IModifier.ID
        name: ID
        nameWithType: IModifier.ID
        qualifiedName: Nitro.IModifier.ID
      VB:
      - id: Nitro.IModifier.ID
        name: ID
        nameWithType: IModifier.ID
        qualifiedName: Nitro.IModifier.ID
    isDefinition: true
    parent: Nitro.IModifier
    commentId: P:Nitro.IModifier.ID
  Nitro.Modifier`1.Nitro#IModifier#Value*:
    name:
      CSharp:
      - id: Nitro.Modifier`1.Nitro#IModifier#Value*
        name: IModifier.Value
        nameWithType: Modifier<T>.IModifier.Value
        qualifiedName: Nitro.Modifier<T>.Nitro.IModifier.Value
      VB:
      - id: Nitro.Modifier`1.Nitro#IModifier#Value*
        name: Nitro.IModifier.Value
        nameWithType: Modifier(Of T).Nitro.IModifier.Value
        qualifiedName: Nitro.Modifier(Of T).Nitro.IModifier.Value
    isDefinition: true
    commentId: Overload:Nitro.Modifier`1.Nitro#IModifier#Value
  Nitro.IModifier.Value:
    name:
      CSharp:
      - id: Nitro.IModifier.Value
        name: Value
        nameWithType: IModifier.Value
        qualifiedName: Nitro.IModifier.Value
      VB:
      - id: Nitro.IModifier.Value
        name: Value
        nameWithType: IModifier.Value
        qualifiedName: Nitro.IModifier.Value
    isDefinition: true
    parent: Nitro.IModifier
    commentId: P:Nitro.IModifier.Value
  Nitro.Modifier`1.Revert*:
    name:
      CSharp:
      - id: Nitro.Modifier`1.Revert*
        name: Revert
        nameWithType: Modifier<T>.Revert
        qualifiedName: Nitro.Modifier<T>.Revert
      VB:
      - id: Nitro.Modifier`1.Revert*
        name: Revert
        nameWithType: Modifier(Of T).Revert
        qualifiedName: Nitro.Modifier(Of T).Revert
    isDefinition: true
    commentId: Overload:Nitro.Modifier`1.Revert
  Nitro.IModifier.Revert:
    name:
      CSharp:
      - id: Nitro.IModifier.Revert
        name: Revert
        nameWithType: IModifier.Revert
        qualifiedName: Nitro.IModifier.Revert
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.IModifier.Revert
        name: Revert
        nameWithType: IModifier.Revert
        qualifiedName: Nitro.IModifier.Revert
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.IModifier
    commentId: M:Nitro.IModifier.Revert
  Nitro.Modifier`1.Dispose*:
    name:
      CSharp:
      - id: Nitro.Modifier`1.Dispose*
        name: Dispose
        nameWithType: Modifier<T>.Dispose
        qualifiedName: Nitro.Modifier<T>.Dispose
      VB:
      - id: Nitro.Modifier`1.Dispose*
        name: Dispose
        nameWithType: Modifier(Of T).Dispose
        qualifiedName: Nitro.Modifier(Of T).Dispose
    isDefinition: true
    commentId: Overload:Nitro.Modifier`1.Dispose
  Nitro.Modifier`1:
    name:
      CSharp:
      - id: Nitro.Modifier`1
        name: Modifier
        nameWithType: Modifier
        qualifiedName: Nitro.Modifier
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Nitro.Modifier`1
        name: Modifier
        nameWithType: Modifier
        qualifiedName: Nitro.Modifier
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro
    commentId: T:Nitro.Modifier`1
  Nitro.Modifier`1.Sorter.Compare*:
    name:
      CSharp:
      - id: Nitro.Modifier`1.Sorter.Compare*
        name: Compare
        nameWithType: Modifier<T>.Sorter.Compare
        qualifiedName: Nitro.Modifier<T>.Sorter.Compare
      VB:
      - id: Nitro.Modifier`1.Sorter.Compare*
        name: Compare
        nameWithType: Modifier(Of T).Sorter.Compare
        qualifiedName: Nitro.Modifier(Of T).Sorter.Compare
    isDefinition: true
    commentId: Overload:Nitro.Modifier`1.Sorter.Compare
  Nitro.Modifier`1.Sorter:
    name:
      CSharp:
      - id: Nitro.Modifier`1.Sorter
        name: Modifier.Sorter
        nameWithType: Modifier.Sorter
        qualifiedName: Nitro.Modifier.Sorter
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Nitro.Modifier`1.Sorter
        name: Modifier.Sorter
        nameWithType: Modifier.Sorter
        qualifiedName: Nitro.Modifier.Sorter
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Nitro.Modifier`1.Sorter
  Nitro.ModifierCollection.Count*:
    name:
      CSharp:
      - id: Nitro.ModifierCollection.Count*
        name: Count
        nameWithType: ModifierCollection.Count
        qualifiedName: Nitro.ModifierCollection.Count
      VB:
      - id: Nitro.ModifierCollection.Count*
        name: Count
        nameWithType: ModifierCollection.Count
        qualifiedName: Nitro.ModifierCollection.Count
    isDefinition: true
    commentId: Overload:Nitro.ModifierCollection.Count
  Nitro.ModifierCollection.IsReadOnly*:
    name:
      CSharp:
      - id: Nitro.ModifierCollection.IsReadOnly*
        name: IsReadOnly
        nameWithType: ModifierCollection.IsReadOnly
        qualifiedName: Nitro.ModifierCollection.IsReadOnly
      VB:
      - id: Nitro.ModifierCollection.IsReadOnly*
        name: IsReadOnly
        nameWithType: ModifierCollection.IsReadOnly
        qualifiedName: Nitro.ModifierCollection.IsReadOnly
    isDefinition: true
    commentId: Overload:Nitro.ModifierCollection.IsReadOnly
  Nitro.ModifierCollection.IsSynchronized*:
    name:
      CSharp:
      - id: Nitro.ModifierCollection.IsSynchronized*
        name: IsSynchronized
        nameWithType: ModifierCollection.IsSynchronized
        qualifiedName: Nitro.ModifierCollection.IsSynchronized
      VB:
      - id: Nitro.ModifierCollection.IsSynchronized*
        name: IsSynchronized
        nameWithType: ModifierCollection.IsSynchronized
        qualifiedName: Nitro.ModifierCollection.IsSynchronized
    isDefinition: true
    commentId: Overload:Nitro.ModifierCollection.IsSynchronized
  Nitro.ModifierCollection.SyncRoot*:
    name:
      CSharp:
      - id: Nitro.ModifierCollection.SyncRoot*
        name: SyncRoot
        nameWithType: ModifierCollection.SyncRoot
        qualifiedName: Nitro.ModifierCollection.SyncRoot
      VB:
      - id: Nitro.ModifierCollection.SyncRoot*
        name: SyncRoot
        nameWithType: ModifierCollection.SyncRoot
        qualifiedName: Nitro.ModifierCollection.SyncRoot
    isDefinition: true
    commentId: Overload:Nitro.ModifierCollection.SyncRoot
  Nitro.ModifierCollection.IsFixedSize*:
    name:
      CSharp:
      - id: Nitro.ModifierCollection.IsFixedSize*
        name: IsFixedSize
        nameWithType: ModifierCollection.IsFixedSize
        qualifiedName: Nitro.ModifierCollection.IsFixedSize
      VB:
      - id: Nitro.ModifierCollection.IsFixedSize*
        name: IsFixedSize
        nameWithType: ModifierCollection.IsFixedSize
        qualifiedName: Nitro.ModifierCollection.IsFixedSize
    isDefinition: true
    commentId: Overload:Nitro.ModifierCollection.IsFixedSize
  Nitro.ModifierCollection.Item*:
    name:
      CSharp:
      - id: Nitro.ModifierCollection.Item*
        name: Item
        nameWithType: ModifierCollection.Item
        qualifiedName: Nitro.ModifierCollection.Item
      VB:
      - id: Nitro.ModifierCollection.Item*
        name: Item
        nameWithType: ModifierCollection.Item
        qualifiedName: Nitro.ModifierCollection.Item
    isDefinition: true
    commentId: Overload:Nitro.ModifierCollection.Item
  Nitro.ModifierCollection.Add*:
    name:
      CSharp:
      - id: Nitro.ModifierCollection.Add*
        name: Add
        nameWithType: ModifierCollection.Add
        qualifiedName: Nitro.ModifierCollection.Add
      VB:
      - id: Nitro.ModifierCollection.Add*
        name: Add
        nameWithType: ModifierCollection.Add
        qualifiedName: Nitro.ModifierCollection.Add
    isDefinition: true
    commentId: Overload:Nitro.ModifierCollection.Add
  Nitro.ModifierCollection.RevertAllByObject(UnityEngine.Object):
    commentId: M:Nitro.ModifierCollection.RevertAllByObject(UnityEngine.Object)
  Nitro.ModifierCollection.RevertAll*:
    name:
      CSharp:
      - id: Nitro.ModifierCollection.RevertAll*
        name: RevertAll
        nameWithType: ModifierCollection.RevertAll
        qualifiedName: Nitro.ModifierCollection.RevertAll
      VB:
      - id: Nitro.ModifierCollection.RevertAll*
        name: RevertAll
        nameWithType: ModifierCollection.RevertAll
        qualifiedName: Nitro.ModifierCollection.RevertAll
    isDefinition: true
    commentId: Overload:Nitro.ModifierCollection.RevertAll
  Nitro.RevertableVar{{T}}:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1
        name: RevertableVar
        nameWithType: RevertableVar
        qualifiedName: Nitro.RevertableVar
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Nitro.RevertableVar`1
        name: RevertableVar
        nameWithType: RevertableVar
        qualifiedName: Nitro.RevertableVar
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Nitro.RevertableVar`1
    parent: Nitro
    commentId: T:Nitro.RevertableVar{``0}
  Nitro.ModifierCollection.RevertAllFor*:
    name:
      CSharp:
      - id: Nitro.ModifierCollection.RevertAllFor*
        name: RevertAllFor
        nameWithType: ModifierCollection.RevertAllFor
        qualifiedName: Nitro.ModifierCollection.RevertAllFor
      VB:
      - id: Nitro.ModifierCollection.RevertAllFor*
        name: RevertAllFor
        nameWithType: ModifierCollection.RevertAllFor
        qualifiedName: Nitro.ModifierCollection.RevertAllFor
    isDefinition: true
    commentId: Overload:Nitro.ModifierCollection.RevertAllFor
  Nitro.ModifierCollection.RevertAllByObject*:
    name:
      CSharp:
      - id: Nitro.ModifierCollection.RevertAllByObject*
        name: RevertAllByObject
        nameWithType: ModifierCollection.RevertAllByObject
        qualifiedName: Nitro.ModifierCollection.RevertAllByObject
      VB:
      - id: Nitro.ModifierCollection.RevertAllByObject*
        name: RevertAllByObject
        nameWithType: ModifierCollection.RevertAllByObject
        qualifiedName: Nitro.ModifierCollection.RevertAllByObject
    isDefinition: true
    commentId: Overload:Nitro.ModifierCollection.RevertAllByObject
  Nitro.ModifierCollection.Clear*:
    name:
      CSharp:
      - id: Nitro.ModifierCollection.Clear*
        name: Clear
        nameWithType: ModifierCollection.Clear
        qualifiedName: Nitro.ModifierCollection.Clear
      VB:
      - id: Nitro.ModifierCollection.Clear*
        name: Clear
        nameWithType: ModifierCollection.Clear
        qualifiedName: Nitro.ModifierCollection.Clear
    isDefinition: true
    commentId: Overload:Nitro.ModifierCollection.Clear
  Nitro.ModifierCollection.Contains*:
    name:
      CSharp:
      - id: Nitro.ModifierCollection.Contains*
        name: Contains
        nameWithType: ModifierCollection.Contains
        qualifiedName: Nitro.ModifierCollection.Contains
      VB:
      - id: Nitro.ModifierCollection.Contains*
        name: Contains
        nameWithType: ModifierCollection.Contains
        qualifiedName: Nitro.ModifierCollection.Contains
    isDefinition: true
    commentId: Overload:Nitro.ModifierCollection.Contains
  Nitro.IModifier[]:
    name:
      CSharp:
      - id: Nitro.IModifier
        name: IModifier
        nameWithType: IModifier
        qualifiedName: Nitro.IModifier
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Nitro.IModifier
        name: IModifier
        nameWithType: IModifier
        qualifiedName: Nitro.IModifier
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Nitro.ModifierCollection.CopyTo*:
    name:
      CSharp:
      - id: Nitro.ModifierCollection.CopyTo*
        name: CopyTo
        nameWithType: ModifierCollection.CopyTo
        qualifiedName: Nitro.ModifierCollection.CopyTo
      VB:
      - id: Nitro.ModifierCollection.CopyTo*
        name: CopyTo
        nameWithType: ModifierCollection.CopyTo
        qualifiedName: Nitro.ModifierCollection.CopyTo
    isDefinition: true
    commentId: Overload:Nitro.ModifierCollection.CopyTo
  Nitro.ModifierCollection.Remove*:
    name:
      CSharp:
      - id: Nitro.ModifierCollection.Remove*
        name: Remove
        nameWithType: ModifierCollection.Remove
        qualifiedName: Nitro.ModifierCollection.Remove
      VB:
      - id: Nitro.ModifierCollection.Remove*
        name: Remove
        nameWithType: ModifierCollection.Remove
        qualifiedName: Nitro.ModifierCollection.Remove
    isDefinition: true
    commentId: Overload:Nitro.ModifierCollection.Remove
  System.Collections.Generic.IEnumerator`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.Generic.IEnumerator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.Generic.IEnumerator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerator`1
  System.Collections.Generic.IEnumerator{Nitro.IModifier}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.Generic.IEnumerator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Nitro.IModifier
        name: IModifier
        nameWithType: IModifier
        qualifiedName: Nitro.IModifier
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.Generic.IEnumerator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Nitro.IModifier
        name: IModifier
        nameWithType: IModifier
        qualifiedName: Nitro.IModifier
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerator`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerator{Nitro.IModifier}
  Nitro.ModifierCollection.GetEnumerator*:
    name:
      CSharp:
      - id: Nitro.ModifierCollection.GetEnumerator*
        name: GetEnumerator
        nameWithType: ModifierCollection.GetEnumerator
        qualifiedName: Nitro.ModifierCollection.GetEnumerator
      VB:
      - id: Nitro.ModifierCollection.GetEnumerator*
        name: GetEnumerator
        nameWithType: ModifierCollection.GetEnumerator
        qualifiedName: Nitro.ModifierCollection.GetEnumerator
    isDefinition: true
    commentId: Overload:Nitro.ModifierCollection.GetEnumerator
  Nitro.ModifierCollection.IndexOf*:
    name:
      CSharp:
      - id: Nitro.ModifierCollection.IndexOf*
        name: IndexOf
        nameWithType: ModifierCollection.IndexOf
        qualifiedName: Nitro.ModifierCollection.IndexOf
      VB:
      - id: Nitro.ModifierCollection.IndexOf*
        name: IndexOf
        nameWithType: ModifierCollection.IndexOf
        qualifiedName: Nitro.ModifierCollection.IndexOf
    isDefinition: true
    commentId: Overload:Nitro.ModifierCollection.IndexOf
  Global.Array:
    name:
      CSharp:
      - id: Global.Array
        name: Array
        nameWithType: Array
        qualifiedName: Array
        isExternal: true
      VB:
      - id: Global.Array
        name: Array
        nameWithType: Array
        qualifiedName: Array
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Array'
  Nitro.ModifierCollection:
    name:
      CSharp:
      - id: Nitro.ModifierCollection
        name: ModifierCollection
        nameWithType: ModifierCollection
        qualifiedName: Nitro.ModifierCollection
      VB:
      - id: Nitro.ModifierCollection
        name: ModifierCollection
        nameWithType: ModifierCollection
        qualifiedName: Nitro.ModifierCollection
    isDefinition: true
    commentId: T:Nitro.ModifierCollection
  Nitro.Collector.CollectorEnabled:
    name:
      CSharp:
      - id: Nitro.Collector.CollectorEnabled
        name: CollectorEnabled
        nameWithType: Collector.CollectorEnabled
        qualifiedName: Nitro.Collector.CollectorEnabled
      VB:
      - id: Nitro.Collector.CollectorEnabled
        name: CollectorEnabled
        nameWithType: Collector.CollectorEnabled
        qualifiedName: Nitro.Collector.CollectorEnabled
    isDefinition: true
    parent: Nitro.Collector
    commentId: P:Nitro.Collector.CollectorEnabled
  Nitro.Collector.CollectOnContact:
    name:
      CSharp:
      - id: Nitro.Collector.CollectOnContact
        name: CollectOnContact
        nameWithType: Collector.CollectOnContact
        qualifiedName: Nitro.Collector.CollectOnContact
      VB:
      - id: Nitro.Collector.CollectOnContact
        name: CollectOnContact
        nameWithType: Collector.CollectOnContact
        qualifiedName: Nitro.Collector.CollectOnContact
    isDefinition: true
    parent: Nitro.Collector
    commentId: P:Nitro.Collector.CollectOnContact
  Nitro.Collector.PowerupCollectEvent:
    name:
      CSharp:
      - id: Nitro.Collector.PowerupCollectEvent
        name: PowerupCollectEvent
        nameWithType: Collector.PowerupCollectEvent
        qualifiedName: Nitro.Collector.PowerupCollectEvent
      VB:
      - id: Nitro.Collector.PowerupCollectEvent
        name: PowerupCollectEvent
        nameWithType: Collector.PowerupCollectEvent
        qualifiedName: Nitro.Collector.PowerupCollectEvent
    isDefinition: true
    parent: Nitro.Collector
    commentId: F:Nitro.Collector.PowerupCollectEvent
  Nitro.Collector.CollectPowerup(Nitro.IPowerup):
    name:
      CSharp:
      - id: Nitro.Collector.CollectPowerup(Nitro.IPowerup)
        name: CollectPowerup
        nameWithType: Collector.CollectPowerup
        qualifiedName: Nitro.Collector.CollectPowerup
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Nitro.IPowerup
        name: IPowerup
        nameWithType: IPowerup
        qualifiedName: Nitro.IPowerup
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.Collector.CollectPowerup(Nitro.IPowerup)
        name: CollectPowerup
        nameWithType: Collector.CollectPowerup
        qualifiedName: Nitro.Collector.CollectPowerup
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Nitro.IPowerup
        name: IPowerup
        nameWithType: IPowerup
        qualifiedName: Nitro.IPowerup
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.Collector
    commentId: M:Nitro.Collector.CollectPowerup(Nitro.IPowerup)
  Nitro.Collector.OnTriggerEnter(Collider):
    name:
      CSharp:
      - id: Nitro.Collector.OnTriggerEnter(Collider)
        name: OnTriggerEnter
        nameWithType: Collector.OnTriggerEnter
        qualifiedName: Nitro.Collector.OnTriggerEnter
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.Collider
        name: Collider
        nameWithType: Collider
        qualifiedName: Collider
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.Collector.OnTriggerEnter(Collider)
        name: OnTriggerEnter
        nameWithType: Collector.OnTriggerEnter
        qualifiedName: Nitro.Collector.OnTriggerEnter
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.Collider
        name: Collider
        nameWithType: Collider
        qualifiedName: Collider
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.Collector
    commentId: M:Nitro.Collector.OnTriggerEnter(Collider)
  Nitro.Collector.OnTriggerEnter2D(Collider2D):
    name:
      CSharp:
      - id: Nitro.Collector.OnTriggerEnter2D(Collider2D)
        name: OnTriggerEnter2D
        nameWithType: Collector.OnTriggerEnter2D
        qualifiedName: Nitro.Collector.OnTriggerEnter2D
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.Collider2D
        name: Collider2D
        nameWithType: Collider2D
        qualifiedName: Collider2D
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.Collector.OnTriggerEnter2D(Collider2D)
        name: OnTriggerEnter2D
        nameWithType: Collector.OnTriggerEnter2D
        qualifiedName: Nitro.Collector.OnTriggerEnter2D
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.Collider2D
        name: Collider2D
        nameWithType: Collider2D
        qualifiedName: Collider2D
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.Collector
    commentId: M:Nitro.Collector.OnTriggerEnter2D(Collider2D)
  Nitro.Collector.OnCollisionEnter(Collision):
    name:
      CSharp:
      - id: Nitro.Collector.OnCollisionEnter(Collision)
        name: OnCollisionEnter
        nameWithType: Collector.OnCollisionEnter
        qualifiedName: Nitro.Collector.OnCollisionEnter
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.Collision
        name: Collision
        nameWithType: Collision
        qualifiedName: Collision
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.Collector.OnCollisionEnter(Collision)
        name: OnCollisionEnter
        nameWithType: Collector.OnCollisionEnter
        qualifiedName: Nitro.Collector.OnCollisionEnter
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.Collision
        name: Collision
        nameWithType: Collision
        qualifiedName: Collision
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.Collector
    commentId: M:Nitro.Collector.OnCollisionEnter(Collision)
  Nitro.Collector.OnCollisionEnter2D(Collision2D):
    name:
      CSharp:
      - id: Nitro.Collector.OnCollisionEnter2D(Collision2D)
        name: OnCollisionEnter2D
        nameWithType: Collector.OnCollisionEnter2D
        qualifiedName: Nitro.Collector.OnCollisionEnter2D
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.Collision2D
        name: Collision2D
        nameWithType: Collision2D
        qualifiedName: Collision2D
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.Collector.OnCollisionEnter2D(Collision2D)
        name: OnCollisionEnter2D
        nameWithType: Collector.OnCollisionEnter2D
        qualifiedName: Nitro.Collector.OnCollisionEnter2D
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Global.Collision2D
        name: Collision2D
        nameWithType: Collision2D
        qualifiedName: Collision2D
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.Collector
    commentId: M:Nitro.Collector.OnCollisionEnter2D(Collision2D)
  Nitro.IMultiplePowerupCollector:
    name:
      CSharp:
      - id: Nitro.IMultiplePowerupCollector
        name: IMultiplePowerupCollector
        nameWithType: IMultiplePowerupCollector
        qualifiedName: Nitro.IMultiplePowerupCollector
      VB:
      - id: Nitro.IMultiplePowerupCollector
        name: IMultiplePowerupCollector
        nameWithType: IMultiplePowerupCollector
        qualifiedName: Nitro.IMultiplePowerupCollector
    isDefinition: true
    parent: Nitro
    commentId: T:Nitro.IMultiplePowerupCollector
  Nitro.MultiplePowerupCollector.MaxPowerupsHeld*:
    name:
      CSharp:
      - id: Nitro.MultiplePowerupCollector.MaxPowerupsHeld*
        name: MaxPowerupsHeld
        nameWithType: MultiplePowerupCollector.MaxPowerupsHeld
        qualifiedName: Nitro.MultiplePowerupCollector.MaxPowerupsHeld
      VB:
      - id: Nitro.MultiplePowerupCollector.MaxPowerupsHeld*
        name: MaxPowerupsHeld
        nameWithType: MultiplePowerupCollector.MaxPowerupsHeld
        qualifiedName: Nitro.MultiplePowerupCollector.MaxPowerupsHeld
    isDefinition: true
    commentId: Overload:Nitro.MultiplePowerupCollector.MaxPowerupsHeld
  Nitro.IMultiplePowerupCollector.MaxPowerupsHeld:
    name:
      CSharp:
      - id: Nitro.IMultiplePowerupCollector.MaxPowerupsHeld
        name: MaxPowerupsHeld
        nameWithType: IMultiplePowerupCollector.MaxPowerupsHeld
        qualifiedName: Nitro.IMultiplePowerupCollector.MaxPowerupsHeld
      VB:
      - id: Nitro.IMultiplePowerupCollector.MaxPowerupsHeld
        name: MaxPowerupsHeld
        nameWithType: IMultiplePowerupCollector.MaxPowerupsHeld
        qualifiedName: Nitro.IMultiplePowerupCollector.MaxPowerupsHeld
    isDefinition: true
    parent: Nitro.IMultiplePowerupCollector
    commentId: P:Nitro.IMultiplePowerupCollector.MaxPowerupsHeld
  System.Collections.Generic.IEnumerable{Nitro.ICombinablePowerup}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Nitro.ICombinablePowerup
        name: ICombinablePowerup
        nameWithType: ICombinablePowerup
        qualifiedName: Nitro.ICombinablePowerup
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Nitro.ICombinablePowerup
        name: ICombinablePowerup
        nameWithType: ICombinablePowerup
        qualifiedName: Nitro.ICombinablePowerup
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{Nitro.ICombinablePowerup}
  Nitro.MultiplePowerupCollector.CollectedPowerups*:
    name:
      CSharp:
      - id: Nitro.MultiplePowerupCollector.CollectedPowerups*
        name: CollectedPowerups
        nameWithType: MultiplePowerupCollector.CollectedPowerups
        qualifiedName: Nitro.MultiplePowerupCollector.CollectedPowerups
      VB:
      - id: Nitro.MultiplePowerupCollector.CollectedPowerups*
        name: CollectedPowerups
        nameWithType: MultiplePowerupCollector.CollectedPowerups
        qualifiedName: Nitro.MultiplePowerupCollector.CollectedPowerups
    isDefinition: true
    commentId: Overload:Nitro.MultiplePowerupCollector.CollectedPowerups
  Nitro.IMultiplePowerupCollector.CollectedPowerups:
    name:
      CSharp:
      - id: Nitro.IMultiplePowerupCollector.CollectedPowerups
        name: CollectedPowerups
        nameWithType: IMultiplePowerupCollector.CollectedPowerups
        qualifiedName: Nitro.IMultiplePowerupCollector.CollectedPowerups
      VB:
      - id: Nitro.IMultiplePowerupCollector.CollectedPowerups
        name: CollectedPowerups
        nameWithType: IMultiplePowerupCollector.CollectedPowerups
        qualifiedName: Nitro.IMultiplePowerupCollector.CollectedPowerups
    isDefinition: true
    parent: Nitro.IMultiplePowerupCollector
    commentId: P:Nitro.IMultiplePowerupCollector.CollectedPowerups
  Nitro.Collector.CanCollectPowerup(Nitro.IPowerup):
    name:
      CSharp:
      - id: Nitro.Collector.CanCollectPowerup(Nitro.IPowerup)
        name: CanCollectPowerup
        nameWithType: Collector.CanCollectPowerup
        qualifiedName: Nitro.Collector.CanCollectPowerup
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Nitro.IPowerup
        name: IPowerup
        nameWithType: IPowerup
        qualifiedName: Nitro.IPowerup
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.Collector.CanCollectPowerup(Nitro.IPowerup)
        name: CanCollectPowerup
        nameWithType: Collector.CanCollectPowerup
        qualifiedName: Nitro.Collector.CanCollectPowerup
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Nitro.IPowerup
        name: IPowerup
        nameWithType: IPowerup
        qualifiedName: Nitro.IPowerup
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.Collector
    commentId: M:Nitro.Collector.CanCollectPowerup(Nitro.IPowerup)
  Nitro.MultiplePowerupCollector.CanCollectPowerup*:
    name:
      CSharp:
      - id: Nitro.MultiplePowerupCollector.CanCollectPowerup*
        name: CanCollectPowerup
        nameWithType: MultiplePowerupCollector.CanCollectPowerup
        qualifiedName: Nitro.MultiplePowerupCollector.CanCollectPowerup
      VB:
      - id: Nitro.MultiplePowerupCollector.CanCollectPowerup*
        name: CanCollectPowerup
        nameWithType: MultiplePowerupCollector.CanCollectPowerup
        qualifiedName: Nitro.MultiplePowerupCollector.CanCollectPowerup
    isDefinition: true
    commentId: Overload:Nitro.MultiplePowerupCollector.CanCollectPowerup
  Nitro.Collector.Execute:
    name:
      CSharp:
      - id: Nitro.Collector.Execute
        name: Execute
        nameWithType: Collector.Execute
        qualifiedName: Nitro.Collector.Execute
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.Collector.Execute
        name: Execute
        nameWithType: Collector.Execute
        qualifiedName: Nitro.Collector.Execute
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.Collector
    commentId: M:Nitro.Collector.Execute
  Nitro.MultiplePowerupCollector.Execute*:
    name:
      CSharp:
      - id: Nitro.MultiplePowerupCollector.Execute*
        name: Execute
        nameWithType: MultiplePowerupCollector.Execute
        qualifiedName: Nitro.MultiplePowerupCollector.Execute
      VB:
      - id: Nitro.MultiplePowerupCollector.Execute*
        name: Execute
        nameWithType: MultiplePowerupCollector.Execute
        qualifiedName: Nitro.MultiplePowerupCollector.Execute
    isDefinition: true
    commentId: Overload:Nitro.MultiplePowerupCollector.Execute
  Nitro.Collector.OnCollect(Nitro.IPowerup):
    name:
      CSharp:
      - id: Nitro.Collector.OnCollect(Nitro.IPowerup)
        name: OnCollect
        nameWithType: Collector.OnCollect
        qualifiedName: Nitro.Collector.OnCollect
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Nitro.IPowerup
        name: IPowerup
        nameWithType: IPowerup
        qualifiedName: Nitro.IPowerup
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.Collector.OnCollect(Nitro.IPowerup)
        name: OnCollect
        nameWithType: Collector.OnCollect
        qualifiedName: Nitro.Collector.OnCollect
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Nitro.IPowerup
        name: IPowerup
        nameWithType: IPowerup
        qualifiedName: Nitro.IPowerup
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.Collector
    commentId: M:Nitro.Collector.OnCollect(Nitro.IPowerup)
  Nitro.MultiplePowerupCollector.OnCollect*:
    name:
      CSharp:
      - id: Nitro.MultiplePowerupCollector.OnCollect*
        name: OnCollect
        nameWithType: MultiplePowerupCollector.OnCollect
        qualifiedName: Nitro.MultiplePowerupCollector.OnCollect
      VB:
      - id: Nitro.MultiplePowerupCollector.OnCollect*
        name: OnCollect
        nameWithType: MultiplePowerupCollector.OnCollect
        qualifiedName: Nitro.MultiplePowerupCollector.OnCollect
    isDefinition: true
    commentId: Overload:Nitro.MultiplePowerupCollector.OnCollect
  Nitro.Powerup.Collector*:
    name:
      CSharp:
      - id: Nitro.Powerup.Collector*
        name: Collector
        nameWithType: Powerup.Collector
        qualifiedName: Nitro.Powerup.Collector
      VB:
      - id: Nitro.Powerup.Collector*
        name: Collector
        nameWithType: Powerup.Collector
        qualifiedName: Nitro.Powerup.Collector
    isDefinition: true
    commentId: Overload:Nitro.Powerup.Collector
  Nitro.IPowerup.Collector:
    name:
      CSharp:
      - id: Nitro.IPowerup.Collector
        name: Collector
        nameWithType: IPowerup.Collector
        qualifiedName: Nitro.IPowerup.Collector
      VB:
      - id: Nitro.IPowerup.Collector
        name: Collector
        nameWithType: IPowerup.Collector
        qualifiedName: Nitro.IPowerup.Collector
    isDefinition: true
    parent: Nitro.IPowerup
    commentId: P:Nitro.IPowerup.Collector
  Nitro.Powerup.HideObjectOnCollect*:
    name:
      CSharp:
      - id: Nitro.Powerup.HideObjectOnCollect*
        name: HideObjectOnCollect
        nameWithType: Powerup.HideObjectOnCollect
        qualifiedName: Nitro.Powerup.HideObjectOnCollect
      VB:
      - id: Nitro.Powerup.HideObjectOnCollect*
        name: HideObjectOnCollect
        nameWithType: Powerup.HideObjectOnCollect
        qualifiedName: Nitro.Powerup.HideObjectOnCollect
    isDefinition: true
    commentId: Overload:Nitro.Powerup.HideObjectOnCollect
  Nitro.Powerup.DoAction*:
    name:
      CSharp:
      - id: Nitro.Powerup.DoAction*
        name: DoAction
        nameWithType: Powerup.DoAction
        qualifiedName: Nitro.Powerup.DoAction
      VB:
      - id: Nitro.Powerup.DoAction*
        name: DoAction
        nameWithType: Powerup.DoAction
        qualifiedName: Nitro.Powerup.DoAction
    isDefinition: true
    commentId: Overload:Nitro.Powerup.DoAction
  Nitro.Powerup.OnCollect*:
    name:
      CSharp:
      - id: Nitro.Powerup.OnCollect*
        name: OnCollect
        nameWithType: Powerup.OnCollect
        qualifiedName: Nitro.Powerup.OnCollect
      VB:
      - id: Nitro.Powerup.OnCollect*
        name: OnCollect
        nameWithType: Powerup.OnCollect
        qualifiedName: Nitro.Powerup.OnCollect
    isDefinition: true
    commentId: Overload:Nitro.Powerup.OnCollect
  Nitro.IPowerup.OnCollect(Nitro.ICollector):
    name:
      CSharp:
      - id: Nitro.IPowerup.OnCollect(Nitro.ICollector)
        name: OnCollect
        nameWithType: IPowerup.OnCollect
        qualifiedName: Nitro.IPowerup.OnCollect
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Nitro.ICollector
        name: ICollector
        nameWithType: ICollector
        qualifiedName: Nitro.ICollector
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.IPowerup.OnCollect(Nitro.ICollector)
        name: OnCollect
        nameWithType: IPowerup.OnCollect
        qualifiedName: Nitro.IPowerup.OnCollect
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Nitro.ICollector
        name: ICollector
        nameWithType: ICollector
        qualifiedName: Nitro.ICollector
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.IPowerup
    commentId: M:Nitro.IPowerup.OnCollect(Nitro.ICollector)
  Nitro.Powerup.DoneUsingPowerup*:
    name:
      CSharp:
      - id: Nitro.Powerup.DoneUsingPowerup*
        name: DoneUsingPowerup
        nameWithType: Powerup.DoneUsingPowerup
        qualifiedName: Nitro.Powerup.DoneUsingPowerup
      VB:
      - id: Nitro.Powerup.DoneUsingPowerup*
        name: DoneUsingPowerup
        nameWithType: Powerup.DoneUsingPowerup
        qualifiedName: Nitro.Powerup.DoneUsingPowerup
    isDefinition: true
    commentId: Overload:Nitro.Powerup.DoneUsingPowerup
  Global.Action:
    name:
      CSharp:
      - id: Global.Action
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      VB:
      - id: Global.Action
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Action'
  Nitro.Powerup.DoneUsingPowerupAfter*:
    name:
      CSharp:
      - id: Nitro.Powerup.DoneUsingPowerupAfter*
        name: DoneUsingPowerupAfter
        nameWithType: Powerup.DoneUsingPowerupAfter
        qualifiedName: Nitro.Powerup.DoneUsingPowerupAfter
      VB:
      - id: Nitro.Powerup.DoneUsingPowerupAfter*
        name: DoneUsingPowerupAfter
        nameWithType: Powerup.DoneUsingPowerupAfter
        qualifiedName: Nitro.Powerup.DoneUsingPowerupAfter
    isDefinition: true
    commentId: Overload:Nitro.Powerup.DoneUsingPowerupAfter
  Nitro.RevertableVar`1.#ctor*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.#ctor*
        name: RevertableVar
        nameWithType: RevertableVar<T>.RevertableVar
        qualifiedName: Nitro.RevertableVar<T>.RevertableVar
      VB:
      - id: Nitro.RevertableVar`1.#ctor*
        name: RevertableVar
        nameWithType: RevertableVar(Of T).RevertableVar
        qualifiedName: Nitro.RevertableVar(Of T).RevertableVar
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.#ctor
  Nitro.RevertableVar`1.Nitro#IRevertableVar#BaseValue*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.Nitro#IRevertableVar#BaseValue*
        name: IRevertableVar.BaseValue
        nameWithType: RevertableVar<T>.IRevertableVar.BaseValue
        qualifiedName: Nitro.RevertableVar<T>.Nitro.IRevertableVar.BaseValue
      VB:
      - id: Nitro.RevertableVar`1.Nitro#IRevertableVar#BaseValue*
        name: Nitro.IRevertableVar.BaseValue
        nameWithType: RevertableVar(Of T).Nitro.IRevertableVar.BaseValue
        qualifiedName: Nitro.RevertableVar(Of T).Nitro.IRevertableVar.BaseValue
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.Nitro#IRevertableVar#BaseValue
  Nitro.IRevertableVar.BaseValue:
    name:
      CSharp:
      - id: Nitro.IRevertableVar.BaseValue
        name: BaseValue
        nameWithType: IRevertableVar.BaseValue
        qualifiedName: Nitro.IRevertableVar.BaseValue
      VB:
      - id: Nitro.IRevertableVar.BaseValue
        name: BaseValue
        nameWithType: IRevertableVar.BaseValue
        qualifiedName: Nitro.IRevertableVar.BaseValue
    isDefinition: true
    parent: Nitro.IRevertableVar
    commentId: P:Nitro.IRevertableVar.BaseValue
  Nitro.RevertableVar`1.Nitro#IRevertableVar#Value*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.Nitro#IRevertableVar#Value*
        name: IRevertableVar.Value
        nameWithType: RevertableVar<T>.IRevertableVar.Value
        qualifiedName: Nitro.RevertableVar<T>.Nitro.IRevertableVar.Value
      VB:
      - id: Nitro.RevertableVar`1.Nitro#IRevertableVar#Value*
        name: Nitro.IRevertableVar.Value
        nameWithType: RevertableVar(Of T).Nitro.IRevertableVar.Value
        qualifiedName: Nitro.RevertableVar(Of T).Nitro.IRevertableVar.Value
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.Nitro#IRevertableVar#Value
  Nitro.IRevertableVar.Value:
    name:
      CSharp:
      - id: Nitro.IRevertableVar.Value
        name: Value
        nameWithType: IRevertableVar.Value
        qualifiedName: Nitro.IRevertableVar.Value
      VB:
      - id: Nitro.IRevertableVar.Value
        name: Value
        nameWithType: IRevertableVar.Value
        qualifiedName: Nitro.IRevertableVar.Value
    isDefinition: true
    parent: Nitro.IRevertableVar
    commentId: P:Nitro.IRevertableVar.Value
  Nitro.RevertableVar`1.Nitro#IRevertableVar#ModifiersApplied*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.Nitro#IRevertableVar#ModifiersApplied*
        name: IRevertableVar.ModifiersApplied
        nameWithType: RevertableVar<T>.IRevertableVar.ModifiersApplied
        qualifiedName: Nitro.RevertableVar<T>.Nitro.IRevertableVar.ModifiersApplied
      VB:
      - id: Nitro.RevertableVar`1.Nitro#IRevertableVar#ModifiersApplied*
        name: Nitro.IRevertableVar.ModifiersApplied
        nameWithType: RevertableVar(Of T).Nitro.IRevertableVar.ModifiersApplied
        qualifiedName: Nitro.RevertableVar(Of T).Nitro.IRevertableVar.ModifiersApplied
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.Nitro#IRevertableVar#ModifiersApplied
  Nitro.IRevertableVar.ModifiersApplied:
    name:
      CSharp:
      - id: Nitro.IRevertableVar.ModifiersApplied
        name: ModifiersApplied
        nameWithType: IRevertableVar.ModifiersApplied
        qualifiedName: Nitro.IRevertableVar.ModifiersApplied
      VB:
      - id: Nitro.IRevertableVar.ModifiersApplied
        name: ModifiersApplied
        nameWithType: IRevertableVar.ModifiersApplied
        qualifiedName: Nitro.IRevertableVar.ModifiersApplied
    isDefinition: true
    parent: Nitro.IRevertableVar
    commentId: P:Nitro.IRevertableVar.ModifiersApplied
  Nitro.RevertableVar`1.Nitro#IRevertableVar#ValueType*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.Nitro#IRevertableVar#ValueType*
        name: IRevertableVar.ValueType
        nameWithType: RevertableVar<T>.IRevertableVar.ValueType
        qualifiedName: Nitro.RevertableVar<T>.Nitro.IRevertableVar.ValueType
      VB:
      - id: Nitro.RevertableVar`1.Nitro#IRevertableVar#ValueType*
        name: Nitro.IRevertableVar.ValueType
        nameWithType: RevertableVar(Of T).Nitro.IRevertableVar.ValueType
        qualifiedName: Nitro.RevertableVar(Of T).Nitro.IRevertableVar.ValueType
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.Nitro#IRevertableVar#ValueType
  Nitro.IRevertableVar.ValueType:
    name:
      CSharp:
      - id: Nitro.IRevertableVar.ValueType
        name: ValueType
        nameWithType: IRevertableVar.ValueType
        qualifiedName: Nitro.IRevertableVar.ValueType
      VB:
      - id: Nitro.IRevertableVar.ValueType
        name: ValueType
        nameWithType: IRevertableVar.ValueType
        qualifiedName: Nitro.IRevertableVar.ValueType
    isDefinition: true
    parent: Nitro.IRevertableVar
    commentId: P:Nitro.IRevertableVar.ValueType
  Nitro.RevertableVar`1.Value*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.Value*
        name: Value
        nameWithType: RevertableVar<T>.Value
        qualifiedName: Nitro.RevertableVar<T>.Value
      VB:
      - id: Nitro.RevertableVar`1.Value*
        name: Value
        nameWithType: RevertableVar(Of T).Value
        qualifiedName: Nitro.RevertableVar(Of T).Value
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.Value
  Nitro.RevertableVar`1.BaseValue*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.BaseValue*
        name: BaseValue
        nameWithType: RevertableVar<T>.BaseValue
        qualifiedName: Nitro.RevertableVar<T>.BaseValue
      VB:
      - id: Nitro.RevertableVar`1.BaseValue*
        name: BaseValue
        nameWithType: RevertableVar(Of T).BaseValue
        qualifiedName: Nitro.RevertableVar(Of T).BaseValue
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.BaseValue
  Nitro.RevertableVar`1.OnValueUpdatedDelegate:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.OnValueUpdatedDelegate
        name: RevertableVar.OnValueUpdatedDelegate
        nameWithType: RevertableVar.OnValueUpdatedDelegate
        qualifiedName: Nitro.RevertableVar.OnValueUpdatedDelegate
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Nitro.RevertableVar`1.OnValueUpdatedDelegate
        name: RevertableVar.OnValueUpdatedDelegate
        nameWithType: RevertableVar.OnValueUpdatedDelegate
        qualifiedName: Nitro.RevertableVar.OnValueUpdatedDelegate
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro
    commentId: T:Nitro.RevertableVar`1.OnValueUpdatedDelegate
  Nitro.RevertableVar`1.ModifiersApplied*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.ModifiersApplied*
        name: ModifiersApplied
        nameWithType: RevertableVar<T>.ModifiersApplied
        qualifiedName: Nitro.RevertableVar<T>.ModifiersApplied
      VB:
      - id: Nitro.RevertableVar`1.ModifiersApplied*
        name: ModifiersApplied
        nameWithType: RevertableVar(Of T).ModifiersApplied
        qualifiedName: Nitro.RevertableVar(Of T).ModifiersApplied
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.ModifiersApplied
  Nitro.Modifier`1.Revert:
    commentId: M:Nitro.Modifier`1.Revert
  Nitro.Modifier{{T}}:
    name:
      CSharp:
      - id: Nitro.Modifier`1
        name: Modifier
        nameWithType: Modifier
        qualifiedName: Nitro.Modifier
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Nitro.Modifier`1
        name: Modifier
        nameWithType: Modifier
        qualifiedName: Nitro.Modifier
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Nitro.Modifier`1
    parent: Nitro
    commentId: T:Nitro.Modifier{`0}
  Nitro.RevertableVar`1.MultiplyBy*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.MultiplyBy*
        name: MultiplyBy
        nameWithType: RevertableVar<T>.MultiplyBy
        qualifiedName: Nitro.RevertableVar<T>.MultiplyBy
      VB:
      - id: Nitro.RevertableVar`1.MultiplyBy*
        name: MultiplyBy
        nameWithType: RevertableVar(Of T).MultiplyBy
        qualifiedName: Nitro.RevertableVar(Of T).MultiplyBy
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.MultiplyBy
  Nitro.RevertableVar`1.DivideBy*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.DivideBy*
        name: DivideBy
        nameWithType: RevertableVar<T>.DivideBy
        qualifiedName: Nitro.RevertableVar<T>.DivideBy
      VB:
      - id: Nitro.RevertableVar`1.DivideBy*
        name: DivideBy
        nameWithType: RevertableVar(Of T).DivideBy
        qualifiedName: Nitro.RevertableVar(Of T).DivideBy
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.DivideBy
  Nitro.RevertableVar`1.AddBy*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.AddBy*
        name: AddBy
        nameWithType: RevertableVar<T>.AddBy
        qualifiedName: Nitro.RevertableVar<T>.AddBy
      VB:
      - id: Nitro.RevertableVar`1.AddBy*
        name: AddBy
        nameWithType: RevertableVar(Of T).AddBy
        qualifiedName: Nitro.RevertableVar(Of T).AddBy
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.AddBy
  Nitro.RevertableVar`1.SubtractBy*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.SubtractBy*
        name: SubtractBy
        nameWithType: RevertableVar<T>.SubtractBy
        qualifiedName: Nitro.RevertableVar<T>.SubtractBy
      VB:
      - id: Nitro.RevertableVar`1.SubtractBy*
        name: SubtractBy
        nameWithType: RevertableVar(Of T).SubtractBy
        qualifiedName: Nitro.RevertableVar(Of T).SubtractBy
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.SubtractBy
  Nitro.RevertableVar`1.Set*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.Set*
        name: Set
        nameWithType: RevertableVar<T>.Set
        qualifiedName: Nitro.RevertableVar<T>.Set
      VB:
      - id: Nitro.RevertableVar`1.Set*
        name: Set
        nameWithType: RevertableVar(Of T).Set
        qualifiedName: Nitro.RevertableVar(Of T).Set
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.Set
  Nitro.RevertableVar`1.Revert*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.Revert*
        name: Revert
        nameWithType: RevertableVar<T>.Revert
        qualifiedName: Nitro.RevertableVar<T>.Revert
      VB:
      - id: Nitro.RevertableVar`1.Revert*
        name: Revert
        nameWithType: RevertableVar(Of T).Revert
        qualifiedName: Nitro.RevertableVar(Of T).Revert
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.Revert
  Nitro.RevertableVar`1.Nitro#IRevertableVar#Revert*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.Nitro#IRevertableVar#Revert*
        name: IRevertableVar.Revert
        nameWithType: RevertableVar<T>.IRevertableVar.Revert
        qualifiedName: Nitro.RevertableVar<T>.Nitro.IRevertableVar.Revert
      VB:
      - id: Nitro.RevertableVar`1.Nitro#IRevertableVar#Revert*
        name: Nitro.IRevertableVar.Revert
        nameWithType: RevertableVar(Of T).Nitro.IRevertableVar.Revert
        qualifiedName: Nitro.RevertableVar(Of T).Nitro.IRevertableVar.Revert
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.Nitro#IRevertableVar#Revert
  Nitro.IRevertableVar.Revert(Nitro.IModifier):
    name:
      CSharp:
      - id: Nitro.IRevertableVar.Revert(Nitro.IModifier)
        name: Revert
        nameWithType: IRevertableVar.Revert
        qualifiedName: Nitro.IRevertableVar.Revert
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Nitro.IModifier
        name: IModifier
        nameWithType: IModifier
        qualifiedName: Nitro.IModifier
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.IRevertableVar.Revert(Nitro.IModifier)
        name: Revert
        nameWithType: IRevertableVar.Revert
        qualifiedName: Nitro.IRevertableVar.Revert
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Nitro.IModifier
        name: IModifier
        nameWithType: IModifier
        qualifiedName: Nitro.IModifier
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.IRevertableVar
    commentId: M:Nitro.IRevertableVar.Revert(Nitro.IModifier)
  Nitro.RevertableVar`1.op_Implicit*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.op_Implicit*
        name: Implicit
        nameWithType: RevertableVar<T>.Implicit
        qualifiedName: Nitro.RevertableVar<T>.Implicit
      VB:
      - id: Nitro.RevertableVar`1.op_Implicit*
        name: Widening
        nameWithType: RevertableVar(Of T).Widening
        qualifiedName: Nitro.RevertableVar(Of T).Widening
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.op_Implicit
  Nitro.RevertableVar`1.op_Equality*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.op_Equality*
        name: Equality
        nameWithType: RevertableVar<T>.Equality
        qualifiedName: Nitro.RevertableVar<T>.Equality
      VB:
      - id: Nitro.RevertableVar`1.op_Equality*
        name: Equality
        nameWithType: RevertableVar(Of T).Equality
        qualifiedName: Nitro.RevertableVar(Of T).Equality
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.op_Equality
  Nitro.RevertableVar`1.op_Inequality*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.op_Inequality*
        name: Inequality
        nameWithType: RevertableVar<T>.Inequality
        qualifiedName: Nitro.RevertableVar<T>.Inequality
      VB:
      - id: Nitro.RevertableVar`1.op_Inequality*
        name: Inequality
        nameWithType: RevertableVar(Of T).Inequality
        qualifiedName: Nitro.RevertableVar(Of T).Inequality
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.op_Inequality
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  Nitro.RevertableVar`1.Equals*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.Equals*
        name: Equals
        nameWithType: RevertableVar<T>.Equals
        qualifiedName: Nitro.RevertableVar<T>.Equals
      VB:
      - id: Nitro.RevertableVar`1.Equals*
        name: Equals
        nameWithType: RevertableVar(Of T).Equals
        qualifiedName: Nitro.RevertableVar(Of T).Equals
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.Equals
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  Nitro.RevertableVar`1.GetHashCode*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.GetHashCode*
        name: GetHashCode
        nameWithType: RevertableVar<T>.GetHashCode
        qualifiedName: Nitro.RevertableVar<T>.GetHashCode
      VB:
      - id: Nitro.RevertableVar`1.GetHashCode*
        name: GetHashCode
        nameWithType: RevertableVar(Of T).GetHashCode
        qualifiedName: Nitro.RevertableVar(Of T).GetHashCode
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.GetHashCode
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  Nitro.RevertableVar`1.ToString*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.ToString*
        name: ToString
        nameWithType: RevertableVar<T>.ToString
        qualifiedName: Nitro.RevertableVar<T>.ToString
      VB:
      - id: Nitro.RevertableVar`1.ToString*
        name: ToString
        nameWithType: RevertableVar(Of T).ToString
        qualifiedName: Nitro.RevertableVar(Of T).ToString
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.ToString
  System.Collections.Generic.IEnumerable{Nitro.IModifier}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Nitro.IModifier
        name: IModifier
        nameWithType: IModifier
        qualifiedName: Nitro.IModifier
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Nitro.IModifier
        name: IModifier
        nameWithType: IModifier
        qualifiedName: Nitro.IModifier
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{Nitro.IModifier}
  Nitro.RevertableVar`1.Nitro#IRevertableVar#GetModifiers*:
    name:
      CSharp:
      - id: Nitro.RevertableVar`1.Nitro#IRevertableVar#GetModifiers*
        name: IRevertableVar.GetModifiers
        nameWithType: RevertableVar<T>.IRevertableVar.GetModifiers
        qualifiedName: Nitro.RevertableVar<T>.Nitro.IRevertableVar.GetModifiers
      VB:
      - id: Nitro.RevertableVar`1.Nitro#IRevertableVar#GetModifiers*
        name: Nitro.IRevertableVar.GetModifiers
        nameWithType: RevertableVar(Of T).Nitro.IRevertableVar.GetModifiers
        qualifiedName: Nitro.RevertableVar(Of T).Nitro.IRevertableVar.GetModifiers
    isDefinition: true
    commentId: Overload:Nitro.RevertableVar`1.Nitro#IRevertableVar#GetModifiers
  Nitro.IRevertableVar.GetModifiers:
    name:
      CSharp:
      - id: Nitro.IRevertableVar.GetModifiers
        name: GetModifiers
        nameWithType: IRevertableVar.GetModifiers
        qualifiedName: Nitro.IRevertableVar.GetModifiers
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Nitro.IRevertableVar.GetModifiers
        name: GetModifiers
        nameWithType: IRevertableVar.GetModifiers
        qualifiedName: Nitro.IRevertableVar.GetModifiers
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Nitro.IRevertableVar
    commentId: M:Nitro.IRevertableVar.GetModifiers
  Nitro.SinglePowerupCollector.CurrentPowerup*:
    name:
      CSharp:
      - id: Nitro.SinglePowerupCollector.CurrentPowerup*
        name: CurrentPowerup
        nameWithType: SinglePowerupCollector.CurrentPowerup
        qualifiedName: Nitro.SinglePowerupCollector.CurrentPowerup
      VB:
      - id: Nitro.SinglePowerupCollector.CurrentPowerup*
        name: CurrentPowerup
        nameWithType: SinglePowerupCollector.CurrentPowerup
        qualifiedName: Nitro.SinglePowerupCollector.CurrentPowerup
    isDefinition: true
    commentId: Overload:Nitro.SinglePowerupCollector.CurrentPowerup
  Nitro.SinglePowerupCollector.CanCollectPowerup*:
    name:
      CSharp:
      - id: Nitro.SinglePowerupCollector.CanCollectPowerup*
        name: CanCollectPowerup
        nameWithType: SinglePowerupCollector.CanCollectPowerup
        qualifiedName: Nitro.SinglePowerupCollector.CanCollectPowerup
      VB:
      - id: Nitro.SinglePowerupCollector.CanCollectPowerup*
        name: CanCollectPowerup
        nameWithType: SinglePowerupCollector.CanCollectPowerup
        qualifiedName: Nitro.SinglePowerupCollector.CanCollectPowerup
    isDefinition: true
    commentId: Overload:Nitro.SinglePowerupCollector.CanCollectPowerup
  Nitro.SinglePowerupCollector.Execute*:
    name:
      CSharp:
      - id: Nitro.SinglePowerupCollector.Execute*
        name: Execute
        nameWithType: SinglePowerupCollector.Execute
        qualifiedName: Nitro.SinglePowerupCollector.Execute
      VB:
      - id: Nitro.SinglePowerupCollector.Execute*
        name: Execute
        nameWithType: SinglePowerupCollector.Execute
        qualifiedName: Nitro.SinglePowerupCollector.Execute
    isDefinition: true
    commentId: Overload:Nitro.SinglePowerupCollector.Execute
  Nitro.SinglePowerupCollector.OnCollect*:
    name:
      CSharp:
      - id: Nitro.SinglePowerupCollector.OnCollect*
        name: OnCollect
        nameWithType: SinglePowerupCollector.OnCollect
        qualifiedName: Nitro.SinglePowerupCollector.OnCollect
      VB:
      - id: Nitro.SinglePowerupCollector.OnCollect*
        name: OnCollect
        nameWithType: SinglePowerupCollector.OnCollect
        qualifiedName: Nitro.SinglePowerupCollector.OnCollect
    isDefinition: true
    commentId: Overload:Nitro.SinglePowerupCollector.OnCollect
  Nitro.SinglePowerupCollector.CurrentPowerup:
    commentId: P:Nitro.SinglePowerupCollector.CurrentPowerup
  Nitro.SinglePowerupCollector.RemovePowerup*:
    name:
      CSharp:
      - id: Nitro.SinglePowerupCollector.RemovePowerup*
        name: RemovePowerup
        nameWithType: SinglePowerupCollector.RemovePowerup
        qualifiedName: Nitro.SinglePowerupCollector.RemovePowerup
      VB:
      - id: Nitro.SinglePowerupCollector.RemovePowerup*
        name: RemovePowerup
        nameWithType: SinglePowerupCollector.RemovePowerup
        qualifiedName: Nitro.SinglePowerupCollector.RemovePowerup
    isDefinition: true
    commentId: Overload:Nitro.SinglePowerupCollector.RemovePowerup
  Nitro.SinglePowerupCollector:
    name:
      CSharp:
      - id: Nitro.SinglePowerupCollector
        name: SinglePowerupCollector
        nameWithType: SinglePowerupCollector
        qualifiedName: Nitro.SinglePowerupCollector
      VB:
      - id: Nitro.SinglePowerupCollector
        name: SinglePowerupCollector
        nameWithType: SinglePowerupCollector
        qualifiedName: Nitro.SinglePowerupCollector
    isDefinition: true
    commentId: T:Nitro.SinglePowerupCollector
  Nitro.Utilities.Prettify*:
    name:
      CSharp:
      - id: Nitro.Utilities.Prettify*
        name: Prettify
        nameWithType: Utilities.Prettify
        qualifiedName: Nitro.Utilities.Prettify
      VB:
      - id: Nitro.Utilities.Prettify*
        name: Prettify
        nameWithType: Utilities.Prettify
        qualifiedName: Nitro.Utilities.Prettify
    isDefinition: true
    commentId: Overload:Nitro.Utilities.Prettify
  Nitro.Utilities.CalculatePlacement*:
    name:
      CSharp:
      - id: Nitro.Utilities.CalculatePlacement*
        name: CalculatePlacement
        nameWithType: Utilities.CalculatePlacement
        qualifiedName: Nitro.Utilities.CalculatePlacement
      VB:
      - id: Nitro.Utilities.CalculatePlacement*
        name: CalculatePlacement
        nameWithType: Utilities.CalculatePlacement
        qualifiedName: Nitro.Utilities.CalculatePlacement
    isDefinition: true
    commentId: Overload:Nitro.Utilities.CalculatePlacement
  Nitro.Utilities:
    name:
      CSharp:
      - id: Nitro.Utilities
        name: Utilities
        nameWithType: Utilities
        qualifiedName: Nitro.Utilities
      VB:
      - id: Nitro.Utilities
        name: Utilities
        nameWithType: Utilities
        qualifiedName: Nitro.Utilities
    isDefinition: true
    commentId: T:Nitro.Utilities
  Nitro.ICollector.CanCollectPowerup*:
    name:
      CSharp:
      - id: Nitro.ICollector.CanCollectPowerup*
        name: CanCollectPowerup
        nameWithType: ICollector.CanCollectPowerup
        qualifiedName: Nitro.ICollector.CanCollectPowerup
      VB:
      - id: Nitro.ICollector.CanCollectPowerup*
        name: CanCollectPowerup
        nameWithType: ICollector.CanCollectPowerup
        qualifiedName: Nitro.ICollector.CanCollectPowerup
    isDefinition: true
    commentId: Overload:Nitro.ICollector.CanCollectPowerup
  Nitro.ICollector.CollectPowerup*:
    name:
      CSharp:
      - id: Nitro.ICollector.CollectPowerup*
        name: CollectPowerup
        nameWithType: ICollector.CollectPowerup
        qualifiedName: Nitro.ICollector.CollectPowerup
      VB:
      - id: Nitro.ICollector.CollectPowerup*
        name: CollectPowerup
        nameWithType: ICollector.CollectPowerup
        qualifiedName: Nitro.ICollector.CollectPowerup
    isDefinition: true
    commentId: Overload:Nitro.ICollector.CollectPowerup
  Nitro.ICollector.Execute*:
    name:
      CSharp:
      - id: Nitro.ICollector.Execute*
        name: Execute
        nameWithType: ICollector.Execute
        qualifiedName: Nitro.ICollector.Execute
      VB:
      - id: Nitro.ICollector.Execute*
        name: Execute
        nameWithType: ICollector.Execute
        qualifiedName: Nitro.ICollector.Execute
    isDefinition: true
    commentId: Overload:Nitro.ICollector.Execute
  Nitro.ICombinablePowerup.Priority*:
    name:
      CSharp:
      - id: Nitro.ICombinablePowerup.Priority*
        name: Priority
        nameWithType: ICombinablePowerup.Priority
        qualifiedName: Nitro.ICombinablePowerup.Priority
      VB:
      - id: Nitro.ICombinablePowerup.Priority*
        name: Priority
        nameWithType: ICombinablePowerup.Priority
        qualifiedName: Nitro.ICombinablePowerup.Priority
    isDefinition: true
    commentId: Overload:Nitro.ICombinablePowerup.Priority
  Nitro.ICombinablePowerup.Execute*:
    name:
      CSharp:
      - id: Nitro.ICombinablePowerup.Execute*
        name: Execute
        nameWithType: ICombinablePowerup.Execute
        qualifiedName: Nitro.ICombinablePowerup.Execute
      VB:
      - id: Nitro.ICombinablePowerup.Execute*
        name: Execute
        nameWithType: ICombinablePowerup.Execute
        qualifiedName: Nitro.ICombinablePowerup.Execute
    isDefinition: true
    commentId: Overload:Nitro.ICombinablePowerup.Execute
  Nitro.IModifier.Priority*:
    name:
      CSharp:
      - id: Nitro.IModifier.Priority*
        name: Priority
        nameWithType: IModifier.Priority
        qualifiedName: Nitro.IModifier.Priority
      VB:
      - id: Nitro.IModifier.Priority*
        name: Priority
        nameWithType: IModifier.Priority
        qualifiedName: Nitro.IModifier.Priority
    isDefinition: true
    commentId: Overload:Nitro.IModifier.Priority
  Nitro.IModifier.TimeAdded*:
    name:
      CSharp:
      - id: Nitro.IModifier.TimeAdded*
        name: TimeAdded
        nameWithType: IModifier.TimeAdded
        qualifiedName: Nitro.IModifier.TimeAdded
      VB:
      - id: Nitro.IModifier.TimeAdded*
        name: TimeAdded
        nameWithType: IModifier.TimeAdded
        qualifiedName: Nitro.IModifier.TimeAdded
    isDefinition: true
    commentId: Overload:Nitro.IModifier.TimeAdded
  Nitro.IModifier.SourceVariable*:
    name:
      CSharp:
      - id: Nitro.IModifier.SourceVariable*
        name: SourceVariable
        nameWithType: IModifier.SourceVariable
        qualifiedName: Nitro.IModifier.SourceVariable
      VB:
      - id: Nitro.IModifier.SourceVariable*
        name: SourceVariable
        nameWithType: IModifier.SourceVariable
        qualifiedName: Nitro.IModifier.SourceVariable
    isDefinition: true
    commentId: Overload:Nitro.IModifier.SourceVariable
  Nitro.IModifier.BoundObject*:
    name:
      CSharp:
      - id: Nitro.IModifier.BoundObject*
        name: BoundObject
        nameWithType: IModifier.BoundObject
        qualifiedName: Nitro.IModifier.BoundObject
      VB:
      - id: Nitro.IModifier.BoundObject*
        name: BoundObject
        nameWithType: IModifier.BoundObject
        qualifiedName: Nitro.IModifier.BoundObject
    isDefinition: true
    commentId: Overload:Nitro.IModifier.BoundObject
  Nitro.IModifier.HasBoundObject*:
    name:
      CSharp:
      - id: Nitro.IModifier.HasBoundObject*
        name: HasBoundObject
        nameWithType: IModifier.HasBoundObject
        qualifiedName: Nitro.IModifier.HasBoundObject
      VB:
      - id: Nitro.IModifier.HasBoundObject*
        name: HasBoundObject
        nameWithType: IModifier.HasBoundObject
        qualifiedName: Nitro.IModifier.HasBoundObject
    isDefinition: true
    commentId: Overload:Nitro.IModifier.HasBoundObject
  Nitro.IModifier.ID*:
    name:
      CSharp:
      - id: Nitro.IModifier.ID*
        name: ID
        nameWithType: IModifier.ID
        qualifiedName: Nitro.IModifier.ID
      VB:
      - id: Nitro.IModifier.ID*
        name: ID
        nameWithType: IModifier.ID
        qualifiedName: Nitro.IModifier.ID
    isDefinition: true
    commentId: Overload:Nitro.IModifier.ID
  Nitro.IModifier.Operation:
    name:
      CSharp:
      - id: Nitro.IModifier.Operation
        name: IModifier.Operation
        nameWithType: IModifier.Operation
        qualifiedName: Nitro.IModifier.Operation
      VB:
      - id: Nitro.IModifier.Operation
        name: IModifier.Operation
        nameWithType: IModifier.Operation
        qualifiedName: Nitro.IModifier.Operation
    isDefinition: true
    parent: Nitro
    commentId: T:Nitro.IModifier.Operation
  Nitro.IModifier.Op*:
    name:
      CSharp:
      - id: Nitro.IModifier.Op*
        name: Op
        nameWithType: IModifier.Op
        qualifiedName: Nitro.IModifier.Op
      VB:
      - id: Nitro.IModifier.Op*
        name: Op
        nameWithType: IModifier.Op
        qualifiedName: Nitro.IModifier.Op
    isDefinition: true
    commentId: Overload:Nitro.IModifier.Op
  Nitro.IModifier.Value*:
    name:
      CSharp:
      - id: Nitro.IModifier.Value*
        name: Value
        nameWithType: IModifier.Value
        qualifiedName: Nitro.IModifier.Value
      VB:
      - id: Nitro.IModifier.Value*
        name: Value
        nameWithType: IModifier.Value
        qualifiedName: Nitro.IModifier.Value
    isDefinition: true
    commentId: Overload:Nitro.IModifier.Value
  Nitro.IModifier.Revert*:
    name:
      CSharp:
      - id: Nitro.IModifier.Revert*
        name: Revert
        nameWithType: IModifier.Revert
        qualifiedName: Nitro.IModifier.Revert
      VB:
      - id: Nitro.IModifier.Revert*
        name: Revert
        nameWithType: IModifier.Revert
        qualifiedName: Nitro.IModifier.Revert
    isDefinition: true
    commentId: Overload:Nitro.IModifier.Revert
  Nitro.IMultiplePowerupCollector.MaxPowerupsHeld*:
    name:
      CSharp:
      - id: Nitro.IMultiplePowerupCollector.MaxPowerupsHeld*
        name: MaxPowerupsHeld
        nameWithType: IMultiplePowerupCollector.MaxPowerupsHeld
        qualifiedName: Nitro.IMultiplePowerupCollector.MaxPowerupsHeld
      VB:
      - id: Nitro.IMultiplePowerupCollector.MaxPowerupsHeld*
        name: MaxPowerupsHeld
        nameWithType: IMultiplePowerupCollector.MaxPowerupsHeld
        qualifiedName: Nitro.IMultiplePowerupCollector.MaxPowerupsHeld
    isDefinition: true
    commentId: Overload:Nitro.IMultiplePowerupCollector.MaxPowerupsHeld
  Nitro.IMultiplePowerupCollector.CollectedPowerups*:
    name:
      CSharp:
      - id: Nitro.IMultiplePowerupCollector.CollectedPowerups*
        name: CollectedPowerups
        nameWithType: IMultiplePowerupCollector.CollectedPowerups
        qualifiedName: Nitro.IMultiplePowerupCollector.CollectedPowerups
      VB:
      - id: Nitro.IMultiplePowerupCollector.CollectedPowerups*
        name: CollectedPowerups
        nameWithType: IMultiplePowerupCollector.CollectedPowerups
        qualifiedName: Nitro.IMultiplePowerupCollector.CollectedPowerups
    isDefinition: true
    commentId: Overload:Nitro.IMultiplePowerupCollector.CollectedPowerups
  Nitro.IPowerup.Collector*:
    name:
      CSharp:
      - id: Nitro.IPowerup.Collector*
        name: Collector
        nameWithType: IPowerup.Collector
        qualifiedName: Nitro.IPowerup.Collector
      VB:
      - id: Nitro.IPowerup.Collector*
        name: Collector
        nameWithType: IPowerup.Collector
        qualifiedName: Nitro.IPowerup.Collector
    isDefinition: true
    commentId: Overload:Nitro.IPowerup.Collector
  Nitro.IPowerup.DoAction*:
    name:
      CSharp:
      - id: Nitro.IPowerup.DoAction*
        name: DoAction
        nameWithType: IPowerup.DoAction
        qualifiedName: Nitro.IPowerup.DoAction
      VB:
      - id: Nitro.IPowerup.DoAction*
        name: DoAction
        nameWithType: IPowerup.DoAction
        qualifiedName: Nitro.IPowerup.DoAction
    isDefinition: true
    commentId: Overload:Nitro.IPowerup.DoAction
  Nitro.IPowerup.DoneUsingPowerup*:
    name:
      CSharp:
      - id: Nitro.IPowerup.DoneUsingPowerup*
        name: DoneUsingPowerup
        nameWithType: IPowerup.DoneUsingPowerup
        qualifiedName: Nitro.IPowerup.DoneUsingPowerup
      VB:
      - id: Nitro.IPowerup.DoneUsingPowerup*
        name: DoneUsingPowerup
        nameWithType: IPowerup.DoneUsingPowerup
        qualifiedName: Nitro.IPowerup.DoneUsingPowerup
    isDefinition: true
    commentId: Overload:Nitro.IPowerup.DoneUsingPowerup
  Nitro.IPowerup.OnCollect*:
    name:
      CSharp:
      - id: Nitro.IPowerup.OnCollect*
        name: OnCollect
        nameWithType: IPowerup.OnCollect
        qualifiedName: Nitro.IPowerup.OnCollect
      VB:
      - id: Nitro.IPowerup.OnCollect*
        name: OnCollect
        nameWithType: IPowerup.OnCollect
        qualifiedName: Nitro.IPowerup.OnCollect
    isDefinition: true
    commentId: Overload:Nitro.IPowerup.OnCollect
  Nitro.IRevertableVar.BaseValue*:
    name:
      CSharp:
      - id: Nitro.IRevertableVar.BaseValue*
        name: BaseValue
        nameWithType: IRevertableVar.BaseValue
        qualifiedName: Nitro.IRevertableVar.BaseValue
      VB:
      - id: Nitro.IRevertableVar.BaseValue*
        name: BaseValue
        nameWithType: IRevertableVar.BaseValue
        qualifiedName: Nitro.IRevertableVar.BaseValue
    isDefinition: true
    commentId: Overload:Nitro.IRevertableVar.BaseValue
  Nitro.IRevertableVar.Value*:
    name:
      CSharp:
      - id: Nitro.IRevertableVar.Value*
        name: Value
        nameWithType: IRevertableVar.Value
        qualifiedName: Nitro.IRevertableVar.Value
      VB:
      - id: Nitro.IRevertableVar.Value*
        name: Value
        nameWithType: IRevertableVar.Value
        qualifiedName: Nitro.IRevertableVar.Value
    isDefinition: true
    commentId: Overload:Nitro.IRevertableVar.Value
  Nitro.IRevertableVar.ModifiersApplied*:
    name:
      CSharp:
      - id: Nitro.IRevertableVar.ModifiersApplied*
        name: ModifiersApplied
        nameWithType: IRevertableVar.ModifiersApplied
        qualifiedName: Nitro.IRevertableVar.ModifiersApplied
      VB:
      - id: Nitro.IRevertableVar.ModifiersApplied*
        name: ModifiersApplied
        nameWithType: IRevertableVar.ModifiersApplied
        qualifiedName: Nitro.IRevertableVar.ModifiersApplied
    isDefinition: true
    commentId: Overload:Nitro.IRevertableVar.ModifiersApplied
  Nitro.IRevertableVar.ValueType*:
    name:
      CSharp:
      - id: Nitro.IRevertableVar.ValueType*
        name: ValueType
        nameWithType: IRevertableVar.ValueType
        qualifiedName: Nitro.IRevertableVar.ValueType
      VB:
      - id: Nitro.IRevertableVar.ValueType*
        name: ValueType
        nameWithType: IRevertableVar.ValueType
        qualifiedName: Nitro.IRevertableVar.ValueType
    isDefinition: true
    commentId: Overload:Nitro.IRevertableVar.ValueType
  Nitro.IRevertableVar.GetModifiers*:
    name:
      CSharp:
      - id: Nitro.IRevertableVar.GetModifiers*
        name: GetModifiers
        nameWithType: IRevertableVar.GetModifiers
        qualifiedName: Nitro.IRevertableVar.GetModifiers
      VB:
      - id: Nitro.IRevertableVar.GetModifiers*
        name: GetModifiers
        nameWithType: IRevertableVar.GetModifiers
        qualifiedName: Nitro.IRevertableVar.GetModifiers
    isDefinition: true
    commentId: Overload:Nitro.IRevertableVar.GetModifiers
  Nitro.IRevertableVar.Revert*:
    name:
      CSharp:
      - id: Nitro.IRevertableVar.Revert*
        name: Revert
        nameWithType: IRevertableVar.Revert
        qualifiedName: Nitro.IRevertableVar.Revert
      VB:
      - id: Nitro.IRevertableVar.Revert*
        name: Revert
        nameWithType: IRevertableVar.Revert
        qualifiedName: Nitro.IRevertableVar.Revert
    isDefinition: true
    commentId: Overload:Nitro.IRevertableVar.Revert
  Nitro.Mirror.RevertableVarReaderWriter.SyncTest*:
    name:
      CSharp:
      - id: Nitro.Mirror.RevertableVarReaderWriter.SyncTest*
        name: SyncTest
        nameWithType: RevertableVarReaderWriter.SyncTest
        qualifiedName: Nitro.Mirror.RevertableVarReaderWriter.SyncTest
      VB:
      - id: Nitro.Mirror.RevertableVarReaderWriter.SyncTest*
        name: SyncTest
        nameWithType: RevertableVarReaderWriter.SyncTest
        qualifiedName: Nitro.Mirror.RevertableVarReaderWriter.SyncTest
    isDefinition: true
    commentId: Overload:Nitro.Mirror.RevertableVarReaderWriter.SyncTest
  Nitro.Mirror.RevertableVarReaderWriter:
    name:
      CSharp:
      - id: Nitro.Mirror.RevertableVarReaderWriter
        name: RevertableVarReaderWriter
        nameWithType: RevertableVarReaderWriter
        qualifiedName: Nitro.Mirror.RevertableVarReaderWriter
      VB:
      - id: Nitro.Mirror.RevertableVarReaderWriter
        name: RevertableVarReaderWriter
        nameWithType: RevertableVarReaderWriter
        qualifiedName: Nitro.Mirror.RevertableVarReaderWriter
    isDefinition: true
    commentId: T:Nitro.Mirror.RevertableVarReaderWriter
  Nitro.Mirror:
    name:
      CSharp:
      - name: Nitro.Mirror
        nameWithType: Nitro.Mirror
        qualifiedName: Nitro.Mirror
      VB:
      - name: Nitro.Mirror
        nameWithType: Nitro.Mirror
        qualifiedName: Nitro.Mirror
    isDefinition: true
    commentId: N:Nitro.Mirror
