{
  "api/Nitro.Collector.html": {
    "href": "api/Nitro.Collector.html",
    "title": "Class Collector | Nitro Documentation",
    "keywords": "Class Collector Used for collecting powerups Inheritance Object Collector MultiplePowerupCollector SinglePowerupCollector Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public abstract class Collector : MonoBehaviour Fields PowerupCollectEvent An event that is triggered when a powerup is collected Declaration public UnityEvent<Powerup> PowerupCollectEvent Field Value Type Description UnityEvent < Powerup > Properties CollectOnContact If set to true, all powerups that collide with this object will automatically be collected Declaration public bool CollectOnContact { get; set; } Property Value Type Description Boolean CollectorEnabled If this is set to true, the collector will be able to collect powerups Declaration public bool CollectorEnabled { get; set; } Property Value Type Description Boolean Methods CanCollectPowerup(Powerup) Whether the powerup can be collected or not Declaration public abstract bool CanCollectPowerup(Powerup powerup) Parameters Type Name Description Powerup powerup The powerup to test if it can be collected Returns Type Description Boolean Returns whether or not the powerup can be picked up CollectPowerup(Powerup) Collects a powerup Declaration public bool CollectPowerup(Powerup powerup) Parameters Type Name Description Powerup powerup The powerup to collect Returns Type Description Boolean Returns whether the collector was able to pick up the Powerup Execute() Executes the powerup(s) that the collector has collected Declaration public abstract void Execute() OnCollect(Powerup) A function that is triggered when a powerup is collected Declaration protected abstract void OnCollect(Powerup powerup) Parameters Type Name Description Powerup powerup The powerup that has been collected OnCollisionEnter(Collision) Declaration protected virtual void OnCollisionEnter(Collision collision) Parameters Type Name Description Collision collision OnCollisionEnter2D(Collision2D) Declaration protected virtual void OnCollisionEnter2D(Collision2D collision) Parameters Type Name Description Collision2D collision OnTriggerEnter(Collider) Declaration protected virtual void OnTriggerEnter(Collider other) Parameters Type Name Description Collider other OnTriggerEnter2D(Collider2D) Declaration protected virtual void OnTriggerEnter2D(Collider2D collision) Parameters Type Name Description Collider2D collision"
  },
  "api/Nitro.Collidable.html": {
    "href": "api/Nitro.Collidable.html",
    "title": "Class Collidable | Nitro Documentation",
    "keywords": "Class Collidable A component that makes it easier to keep track of objects that have collided with an object. Inheritance Object Collidable Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public abstract class Collidable : MonoBehaviour Properties CollidedBodies Returns a list of all the collided objects Declaration public IEnumerable<Collider> CollidedBodies { get; } Property Value Type Description IEnumerable < Collider > Methods LateUpdate() Declaration protected virtual void LateUpdate() OnCollideStart(Collider) Called when an object collides with this object. Declaration protected abstract void OnCollideStart(Collider collider) Parameters Type Name Description Collider collider OnCollideStop(Collider, Boolean) Called when an object is no longer colliding with this object. Declaration protected abstract void OnCollideStop(Collider collider, bool destroyed) Parameters Type Name Description Collider collider Boolean destroyed OnCollisionEnter(Collision) Declaration protected virtual void OnCollisionEnter(Collision collision) Parameters Type Name Description Collision collision OnCollisionExit(Collision) Declaration protected virtual void OnCollisionExit(Collision collision) Parameters Type Name Description Collision collision OnDestroy() Declaration protected virtual void OnDestroy() OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable() OnTriggerEnter(Collider) Declaration protected virtual void OnTriggerEnter(Collider other) Parameters Type Name Description Collider other OnTriggerExit(Collider) Declaration protected virtual void OnTriggerExit(Collider other) Parameters Type Name Description Collider other"
  },
  "api/Nitro.Collidable2D.html": {
    "href": "api/Nitro.Collidable2D.html",
    "title": "Class Collidable2D | Nitro Documentation",
    "keywords": "Class Collidable2D A component that makes it easier to keep track of objects that have collided with an object. Inheritance Object Collidable2D Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public abstract class Collidable2D : MonoBehaviour Properties CollidedBodies Returns a list of all the collided objects Declaration public IEnumerable<Collider2D> CollidedBodies { get; } Property Value Type Description IEnumerable < Collider2D > Methods LateUpdate() Declaration protected virtual void LateUpdate() OnCollideStart(Collider2D) Called when an object collides with this object. Declaration protected abstract void OnCollideStart(Collider2D Collider2D) Parameters Type Name Description Collider2D Collider2D OnCollideStop(Collider2D, Boolean) Called when an object is no longer colliding with this object. Declaration protected abstract void OnCollideStop(Collider2D Collider2D, bool destroyed) Parameters Type Name Description Collider2D Collider2D Boolean destroyed OnCollisionEnter2D(Collision2D) Declaration protected virtual void OnCollisionEnter2D(Collision2D collision) Parameters Type Name Description Collision2D collision OnCollisionExit2D(Collision2D) Declaration protected virtual void OnCollisionExit2D(Collision2D collision) Parameters Type Name Description Collision2D collision OnDestroy() Declaration protected virtual void OnDestroy() OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable() OnTriggerEnter2D(Collider2D) Declaration protected virtual void OnTriggerEnter2D(Collider2D other) Parameters Type Name Description Collider2D other OnTriggerExit2D(Collider2D) Declaration protected virtual void OnTriggerExit2D(Collider2D other) Parameters Type Name Description Collider2D other"
  },
  "api/Nitro.CombinablePowerup.Comparer.html": {
    "href": "api/Nitro.CombinablePowerup.Comparer.html",
    "title": "Class CombinablePowerup.Comparer | Nitro Documentation",
    "keywords": "Class CombinablePowerup.Comparer A comparer used for sorting combinable powerups by priority Inheritance Object CombinablePowerup.Comparer Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public class Comparer : IComparer<CombinablePowerup> Methods Compare(CombinablePowerup, CombinablePowerup) Declaration public int Compare(CombinablePowerup x, CombinablePowerup y) Parameters Type Name Description CombinablePowerup x CombinablePowerup y Returns Type Description Int32"
  },
  "api/Nitro.CombinablePowerup.html": {
    "href": "api/Nitro.CombinablePowerup.html",
    "title": "Class CombinablePowerup | Nitro Documentation",
    "keywords": "Class CombinablePowerup A powerup that can have its effects combined with other powerups. When several powerups are collected via a MultiplePowerupCollector , they will form a chain that is sorted based on the Priority of the powerups. The powerups with the highest priority will be executed first, while the ones with the lowest priority will be executed last. When a powerup is executed, it will have it's Execute(CombinablePowerup, Vector3, Quaternion, Action<Vector3, Quaternion>) function called. With the execute function, you will be able to know the previous powerup in the chain, the position and rotation of where the powerup is affecting, and a delegate called runNextPowerup, which when called, will execute the next powerup in the chain. You can use this delegate to control where and when the next powerups in the chain are executed\"/> Inheritance Object Powerup CombinablePowerup Inherited Members Powerup.Collector Powerup.hideObjectOnCollect Powerup.HideObjectOnCollect Powerup.OnCollect(Collector) Powerup.DoneUsingPowerupAfter(Single, Action) Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public abstract class CombinablePowerup : Powerup Fields priority Declaration protected int priority Field Value Type Description Int32 Properties Priority The priority of the powerup, which determines whether or not this powerup will get executed before others For example, if you have a fire powerup that has a higher priority than a water powerup, then the fire effect will be executed before the water effect. Declaration public int Priority { get; } Property Value Type Description Int32 Methods DoAction() The main action of the powerup Declaration public sealed override void DoAction() Overrides Powerup.DoAction() DoneUsingPowerup() Used to dispose of the powerup when done Declaration public sealed override void DoneUsingPowerup() Overrides Powerup.DoneUsingPowerup() Execute(CombinablePowerup, Vector3, Quaternion, Action<Vector3, Quaternion>) The main action of the combinable powerup Declaration public abstract void Execute(CombinablePowerup previous, Vector3 position, Quaternion rotation, Action<Vector3, Quaternion> runNextPowerup) Parameters Type Name Description CombinablePowerup previous The previous powerup in the chain. If this is null, then the currently executing powerup is first in the chain Vector3 position The position of the collector the powerup is from Quaternion rotation The rotation of the collector the powerup is from Action < Vector3 , Quaternion > runNextPowerup A delegate used to execute the next powerup in the chain. Be sure to call this to make sure all the powerups in the chain get executed GetCallToNextPowerup(Int32) Creates a delegate to the next powerup in the chain. Declaration public Action<Vector3, Quaternion> GetCallToNextPowerup(int currentIndex) Parameters Type Name Description Int32 currentIndex The current index in the powerup chain. A delegate will be created that will call the next powerup Returns Type Description Action < Vector3 , Quaternion > Returns a delgate that executes the next powerup in the chain GetPowerupChain() Gets a list of all the powerups in the chain Declaration protected ReadOnlyMemory<CombinablePowerup> GetPowerupChain() Returns Type Description ReadOnlyMemory < CombinablePowerup > GetPowerupIndex() Retrieves the index of the current powerup within the powerup chain. Declaration protected int GetPowerupIndex() Returns Type Description Int32"
  },
  "api/Nitro.GenericMath.html": {
    "href": "api/Nitro.GenericMath.html",
    "title": "Class GenericMath | Nitro Documentation",
    "keywords": "Class GenericMath Serves as a way of doing basic math operations on generic types. Inheritance Object GenericMath Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public static class GenericMath Methods Add<T>(T, T) Adds two variables together, if possible Declaration public static T Add<T>(T a, T b) Parameters Type Name Description T a The first variable T b The second variable Returns Type Description T Returns the sum of the variables Type Parameters Name Description T The type of the variables to add Div<T>(T, T) Divides two variables together, if possible Declaration public static T Div<T>(T a, T b) Parameters Type Name Description T a The first variable T b The second variable Returns Type Description T Returns the quotient of the variables Type Parameters Name Description T The type of the variables to divide HasAdd<T>() Checks if a type can be added to Declaration public static bool HasAdd<T>() Returns Type Description Boolean Returns true if the type can be added to itself Type Parameters Name Description T The type to check HasDiv<T>() Checks if a type can be divided by itself Declaration public static bool HasDiv<T>() Returns Type Description Boolean Returns true if the type can be divided by itself Type Parameters Name Description T The type to check HasMul<T>() Checks if a type can be multiplied with itself Declaration public static bool HasMul<T>() Returns Type Description Boolean Returns true if the type can be multiplied with itself Type Parameters Name Description T The type to check HasSub<T>() Checks if a type can be subtracted to Declaration public static bool HasSub<T>() Returns Type Description Boolean Returns true if the type can be subtracted from itself Type Parameters Name Description T The type to check Mul<T>(T, T) Multiplies two variables together, if possible Declaration public static T Mul<T>(T a, T b) Parameters Type Name Description T a The first variable T b The second variable Returns Type Description T Returns the product of the variables Type Parameters Name Description T The type of the variables to multiply Sub<T>(T, T) Subtracts two variables together, if possible Declaration public static T Sub<T>(T a, T b) Parameters Type Name Description T a The first variable T b The second variable Returns Type Description T Returns the difference of the variables Type Parameters Name Description T The type of the variables to subtract"
  },
  "api/Nitro.html": {
    "href": "api/Nitro.html",
    "title": "Namespace Nitro | Nitro Documentation",
    "keywords": "Namespace Nitro Classes Collector Used for collecting powerups Collidable A component that makes it easier to keep track of objects that have collided with an object. Collidable2D A component that makes it easier to keep track of objects that have collided with an object. CombinablePowerup A powerup that can have its effects combined with other powerups. When several powerups are collected via a MultiplePowerupCollector , they will form a chain that is sorted based on the Priority of the powerups. The powerups with the highest priority will be executed first, while the ones with the lowest priority will be executed last. When a powerup is executed, it will have it's Execute(CombinablePowerup, Vector3, Quaternion, Action<Vector3, Quaternion>) function called. With the execute function, you will be able to know the previous powerup in the chain, the position and rotation of where the powerup is affecting, and a delegate called runNextPowerup, which when called, will execute the next powerup in the chain. You can use this delegate to control where and when the next powerups in the chain are executed\"/> CombinablePowerup.Comparer A comparer used for sorting combinable powerups by priority GenericMath Serves as a way of doing basic math operations on generic types. Modifier<T> Represents a modification applied to a RevertableVar<T> Modifier<T>.Sorter ModifierCollection Represents a collection of modifiers. This can be used to easily group modifiers together and revert them together as well MultiplePowerupCollector A collector that can collect multiple powerups Powerup The base class for all powerups RevertableVar<T> A variable that allows you to easily modify it's value and revert it back to it's original value SinglePowerupCollector A simple powerup collector that collects and stores a single powerup Interfaces IModifier Base class for all modifiers IRevertableVar"
  },
  "api/Nitro.IModifier.html": {
    "href": "api/Nitro.IModifier.html",
    "title": "Interface IModifier | Nitro Documentation",
    "keywords": "Interface IModifier Base class for all modifiers Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public interface IModifier Properties Priority The priority of the modifier. The lower the number, the sooner it will be processed before other modifiers Declaration int Priority { get; } Property Value Type Description Int32 SourceVariable The revertable variable that this modifier is a part of Declaration IRevertableVar SourceVariable { get; } Property Value Type Description IRevertableVar TimeAdded The time this modifer was created and added to a revertable variable Declaration float TimeAdded { get; } Property Value Type Description Single Methods Revert() Reverts the modifier and removes it from the revertable variable it is a part of Declaration void Revert()"
  },
  "api/Nitro.IRevertableVar.html": {
    "href": "api/Nitro.IRevertableVar.html",
    "title": "Interface IRevertableVar | Nitro Documentation",
    "keywords": "Interface IRevertableVar Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public interface IRevertableVar Properties BaseValue The base value of the revertible variable Declaration object BaseValue { get; set; } Property Value Type Description Object ModifiersApplied How many variable modifiers are currently applied to the revertible variable Declaration int ModifiersApplied { get; } Property Value Type Description Int32 Value The current value of the revertible variable Declaration object Value { get; } Property Value Type Description Object ValueType The type of the value being held by the revertible variable Declaration Type ValueType { get; } Property Value Type Description Type"
  },
  "api/Nitro.Modifier-1.html": {
    "href": "api/Nitro.Modifier-1.html",
    "title": "Class Modifier<T> | Nitro Documentation",
    "keywords": "Class Modifier<T> Represents a modification applied to a RevertableVar<T> Inheritance Object Modifier<T> Implements IModifier Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public sealed class Modifier<T> : IModifier Type Parameters Name Description T Properties Priority The priority of the modifier. The lower the number, the sooner it will be processed before other modifiers Declaration public int Priority { get; } Property Value Type Description Int32 SourceVar Declaration public RevertableVar<T> SourceVar { get; } Property Value Type Description RevertableVar <T> TimeAdded The time this modifer was created and added to a revertable variable Declaration public float TimeAdded { get; } Property Value Type Description Single Methods Dispose() Declaration public void Dispose() Revert() Reverts the modifier and removes it from the revertable variable it is a part of Declaration public void Revert() Explicit Interface Implementations IModifier.SourceVariable The revertable variable that this modifier is a part of Declaration IRevertableVar IModifier.SourceVariable { get; } Returns Type Description IRevertableVar Implements IModifier"
  },
  "api/Nitro.Modifier-1.Sorter.html": {
    "href": "api/Nitro.Modifier-1.Sorter.html",
    "title": "Class Modifier<T>.Sorter | Nitro Documentation",
    "keywords": "Class Modifier<T>.Sorter Inheritance Object Modifier<T>.Sorter Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public class Sorter : IComparer<Modifier<T>> Methods Compare(Modifier<T>, Modifier<T>) Declaration public int Compare(Modifier<T> x, Modifier<T> y) Parameters Type Name Description Modifier <T> x Modifier <T> y Returns Type Description Int32"
  },
  "api/Nitro.ModifierCollection.html": {
    "href": "api/Nitro.ModifierCollection.html",
    "title": "Class ModifierCollection | Nitro Documentation",
    "keywords": "Class ModifierCollection Represents a collection of modifiers. This can be used to easily group modifiers together and revert them together as well Inheritance Object List < IModifier > ModifierCollection Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public class ModifierCollection : List<IModifier>, IList<IModifier>, ICollection<IModifier>, IList, ICollection, IReadOnlyList<IModifier>, IReadOnlyCollection<IModifier>, IEnumerable<IModifier>, IEnumerable Methods RevertAll() Reverts all modifiers and removes them from the collection Declaration public void RevertAll() RevertAllFor(IRevertableVar) Reverts all modifiers for a specific RevertableVar<T> , and removes them from the list Declaration public void RevertAllFor(IRevertableVar var) Parameters Type Name Description IRevertableVar var The revertable variable RevertAllFor<T>(RevertableVar<T>) Reverts all modifiers for a specific RevertableVar<T> , and removes them from the list Declaration public void RevertAllFor<T>(RevertableVar<T> var) Parameters Type Name Description RevertableVar <T> var The revertable variable Type Parameters Name Description T The type of variable"
  },
  "api/Nitro.MultiplePowerupCollector.html": {
    "href": "api/Nitro.MultiplePowerupCollector.html",
    "title": "Class MultiplePowerupCollector | Nitro Documentation",
    "keywords": "Class MultiplePowerupCollector A collector that can collect multiple powerups Inheritance Object Collector MultiplePowerupCollector Inherited Members Collector.CollectorEnabled Collector.CollectOnContact Collector.PowerupCollectEvent Collector.CollectPowerup(Powerup) Collector.OnTriggerEnter(Collider) Collector.OnTriggerEnter2D(Collider2D) Collector.OnCollisionEnter(Collision) Collector.OnCollisionEnter2D(Collision2D) Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public class MultiplePowerupCollector : Collector Fields DifferingTypesRequired Declaration public bool DifferingTypesRequired Field Value Type Description Boolean HeldPowerups A list of all the currently held powerups, sorted by Priority Declaration public SortedSet<CombinablePowerup> HeldPowerups Field Value Type Description SortedSet < CombinablePowerup > MaxPowerupsHeld Declaration public int MaxPowerupsHeld Field Value Type Description Int32 Methods CanCollectPowerup(Powerup) Whether the powerup can be collected or not Declaration public override bool CanCollectPowerup(Powerup powerup) Parameters Type Name Description Powerup powerup The powerup to test if it can be collected Returns Type Description Boolean Returns whether or not the powerup can be picked up Overrides Collector.CanCollectPowerup(Powerup) Execute() Executes the powerup(s) that the collector has collected Declaration public override void Execute() Overrides Collector.Execute() OnCollect(Powerup) A function that is triggered when a powerup is collected Declaration protected override void OnCollect(Powerup powerup) Parameters Type Name Description Powerup powerup The powerup that has been collected Overrides Collector.OnCollect(Powerup)"
  },
  "api/Nitro.Powerup.html": {
    "href": "api/Nitro.Powerup.html",
    "title": "Class Powerup | Nitro Documentation",
    "keywords": "Class Powerup The base class for all powerups Inheritance Object Powerup CombinablePowerup Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public abstract class Powerup : MonoBehaviour Fields hideObjectOnCollect Declaration protected bool hideObjectOnCollect Field Value Type Description Boolean Properties Collector The collector that collected the powerup Declaration public Collector Collector { get; } Property Value Type Description Collector HideObjectOnCollect Declaration public bool HideObjectOnCollect { get; } Property Value Type Description Boolean Methods DoAction() The main action of the powerup Declaration public abstract void DoAction() DoneUsingPowerup() Used to dispose of the powerup when done Declaration public virtual void DoneUsingPowerup() DoneUsingPowerupAfter(Single, Action) Used to dispose of the powerup after a set amount of time Declaration public void DoneUsingPowerupAfter(float lifetime, Action onDone = null) Parameters Type Name Description Single lifetime How long before the powerup is destroyed Action onDone OnCollect(Collector) Called when the powerup has been collected Declaration public virtual void OnCollect(Collector collector) Parameters Type Name Description Collector collector The collector that has collected the powerup"
  },
  "api/Nitro.RevertableVar-1.html": {
    "href": "api/Nitro.RevertableVar-1.html",
    "title": "Class RevertableVar<T> | Nitro Documentation",
    "keywords": "Class RevertableVar<T> A variable that allows you to easily modify it's value and revert it back to it's original value Inheritance Object RevertableVar<T> Implements IRevertableVar Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public class RevertableVar<T> : IRevertableVar Type Parameters Name Description T The type of variable the RevertableVar is going to hold Constructors RevertableVar() Constructs a new revertable variable Declaration public RevertableVar() RevertableVar(T) Constructs a new revertable variable Declaration public RevertableVar(T baseValue) Parameters Type Name Description T baseValue The base value of the variable Properties BaseValue The base value of the revertable variable Declaration public T BaseValue { get; set; } Property Value Type Description T ModifiersApplied How many modifiers are currently being applied to this revertible variable Declaration public int ModifiersApplied { get; } Property Value Type Description Int32 Value The current value of the revertable variable, with all of it's modifiers applied Declaration public T Value { get; } Property Value Type Description T Methods AddBy(T, Int32) Applies an addition to the variable. Declaration public Modifier<T> AddBy(T value, int priority = 0) Parameters Type Name Description T value The value to add onto the variable Int32 priority The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers Returns Type Description Modifier <T> Returns a reference to the modifier currently applied to this variable. Use Revert() to revert the modification AddBy(T, Int32, Single) Applies an addition to the variable. Declaration public Modifier<T> AddBy(T value, int priority, float timeActive) Parameters Type Name Description T value The value to add onto the variable Int32 priority The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers Single timeActive The amount of time this modifier should remain active. Once the time is up, the modifier will be reverted Returns Type Description Modifier <T> Returns a reference to the modifier currently applied to this variable. Use Revert() to revert the modification DivideBy(T, Int32) Applies a division to the variable. Declaration public Modifier<T> DivideBy(T value, int priority = 0) Parameters Type Name Description T value The value to divide the variable with Int32 priority The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers Returns Type Description Modifier <T> Returns a reference to the modifier currently applied to this variable. Use Revert() to revert the modification DivideBy(T, Int32, Single) Applies a division to the variable. Declaration public Modifier<T> DivideBy(T value, int priority, float timeActive) Parameters Type Name Description T value The value to divide the variable with Int32 priority The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers Single timeActive The amount of time this modifier should remain active. Once the time is up, the modifier will be reverted Returns Type Description Modifier <T> Returns a reference to the modifier currently applied to this variable. Use Revert() to revert the modification Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() MultiplyBy(T, Int32) Applies a multiplication to the variable. Declaration public Modifier<T> MultiplyBy(T value, int priority = 0) Parameters Type Name Description T value The value to multiply the variable with Int32 priority The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers Returns Type Description Modifier <T> Returns a reference to the modifier currently applied to this variable. Use Revert() to revert the modification MultiplyBy(T, Int32, Single) Applies a multiplication to the variable. Declaration public Modifier<T> MultiplyBy(T value, int priority, float timeActive) Parameters Type Name Description T value The value to multiply the variable with Int32 priority The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers Single timeActive The amount of time this modifier should remain active. Once the time is up, the modifier will be reverted Returns Type Description Modifier <T> Returns a reference to the modifier currently applied to this variable. Use Revert() to revert the modification Revert(Modifier<T>) Reverts a modifier Declaration public void Revert(Modifier<T> modifier) Parameters Type Name Description Modifier <T> modifier The modifier to revert Set(T, Int32) Applies an subtraction to the variable. Declaration public Modifier<T> Set(T value, int priority = 0) Parameters Type Name Description T value The value to subtract from the variable Int32 priority The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers Returns Type Description Modifier <T> Returns a reference to the modifier currently applied to this variable. Use Revert() to revert the modification Set(T, Int32, Single) Applies an subtraction to the variable. Declaration public Modifier<T> Set(T value, int priority, float timeActive) Parameters Type Name Description T value The value to subtract from the variable Int32 priority The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers Single timeActive The amount of time this modifier should remain active. Once the time is up, the modifier will be reverted Returns Type Description Modifier <T> Returns a reference to the modifier currently applied to this variable. Use Revert() to revert the modification SubtractBy(T, Int32) Applies an subtraction to the variable. Declaration public Modifier<T> SubtractBy(T value, int priority = 0) Parameters Type Name Description T value The value to subtract from the variable Int32 priority The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers Returns Type Description Modifier <T> Returns a reference to the modifier currently applied to this variable. Use Revert() to revert the modification SubtractBy(T, Int32, Single) Applies an subtraction to the variable. Declaration public Modifier<T> SubtractBy(T value, int priority, float timeActive) Parameters Type Name Description T value The value to subtract from the variable Int32 priority The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers Single timeActive The amount of time this modifier should remain active. Once the time is up, the modifier will be reverted Returns Type Description Modifier <T> Returns a reference to the modifier currently applied to this variable. Use Revert() to revert the modification ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators Equality(RevertableVar<T>, T) Declaration public static bool operator ==(RevertableVar<T> a, T b) Parameters Type Name Description RevertableVar <T> a T b Returns Type Description Boolean Equality(RevertableVar<T>, RevertableVar<T>) Declaration public static bool operator ==(RevertableVar<T> a, RevertableVar<T> b) Parameters Type Name Description RevertableVar <T> a RevertableVar <T> b Returns Type Description Boolean Implicit(T to RevertableVar<T>) Implicitly converts from a variable of type T to a revertable variable Declaration public static implicit operator RevertableVar<T>(T value) Parameters Type Name Description T value The variable Returns Type Description RevertableVar <T> Implicit(RevertableVar<T> to T) Implicitly converts from a revertable variable to the variable of type T Declaration public static implicit operator T(RevertableVar<T> v) Parameters Type Name Description RevertableVar <T> v The revertable variable Returns Type Description T Inequality(RevertableVar<T>, T) Declaration public static bool operator !=(RevertableVar<T> a, T b) Parameters Type Name Description RevertableVar <T> a T b Returns Type Description Boolean Inequality(RevertableVar<T>, RevertableVar<T>) Declaration public static bool operator !=(RevertableVar<T> a, RevertableVar<T> b) Parameters Type Name Description RevertableVar <T> a RevertableVar <T> b Returns Type Description Boolean Explicit Interface Implementations IRevertableVar.BaseValue The base value of the revertible variable Declaration object IRevertableVar.BaseValue { get; set; } Returns Type Description Object IRevertableVar.ModifiersApplied How many variable modifiers are currently applied to the revertible variable Declaration int IRevertableVar.ModifiersApplied { get; } Returns Type Description Int32 IRevertableVar.Value The current value of the revertible variable Declaration object IRevertableVar.Value { get; } Returns Type Description Object IRevertableVar.ValueType The type of the value being held by the revertible variable Declaration Type IRevertableVar.ValueType { get; } Returns Type Description Type Implements IRevertableVar"
  },
  "api/Nitro.SinglePowerupCollector.html": {
    "href": "api/Nitro.SinglePowerupCollector.html",
    "title": "Class SinglePowerupCollector | Nitro Documentation",
    "keywords": "Class SinglePowerupCollector A simple powerup collector that collects and stores a single powerup Inheritance Object Collector SinglePowerupCollector Inherited Members Collector.CollectorEnabled Collector.CollectOnContact Collector.PowerupCollectEvent Collector.CollectPowerup(Powerup) Collector.OnTriggerEnter(Collider) Collector.OnTriggerEnter2D(Collider2D) Collector.OnCollisionEnter(Collision) Collector.OnCollisionEnter2D(Collision2D) Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public class SinglePowerupCollector : Collector Properties CurrentPowerup The currently collected powerup Declaration public Powerup CurrentPowerup { get; } Property Value Type Description Powerup Methods CanCollectPowerup(Powerup) Whether the powerup can be collected or not Declaration public override bool CanCollectPowerup(Powerup powerup) Parameters Type Name Description Powerup powerup The powerup to test if it can be collected Returns Type Description Boolean Returns whether or not the powerup can be picked up Overrides Collector.CanCollectPowerup(Powerup) Execute() Executes the powerup(s) that the collector has collected Declaration public override void Execute() Overrides Collector.Execute() OnCollect(Powerup) A function that is triggered when a powerup is collected Declaration protected override void OnCollect(Powerup powerup) Parameters Type Name Description Powerup powerup The powerup that has been collected Overrides Collector.OnCollect(Powerup) RemovePowerup() Removes the CurrentPowerup Declaration public void RemovePowerup()"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Nitro Documentation",
    "keywords": "This is the HOMEPAGE . Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "manual/coniunctis.html": {
    "href": "manual/coniunctis.html",
    "title": "Coniunctis nec qui et lanient monticolae vitae | Nitro Documentation",
    "keywords": "Coniunctis nec qui et lanient monticolae vitae Opem ille Lorem markdownum cavis exululat inutile. Illi quem caeli, vola patruo difficili Iuppiter Patraeque, est ardebant ingeniis Troica intus Amore tibi mirantem superfusis, multum. Ut Achilles Et sitim Tibi modo ait temptant crinita daret Pariter in removi offensasque Lenaeo damno terra Phoebes ut damnosa classis ignes templo; tua ulla capillos ultima. Videre percusso plectro templa fuit diva minimum debere, quid nomen Philomela animis. Verbis istis flagrat vulnera inpediique ignes. Gravi filo obvius arte Amphionis Panes emisitque iubet. Latona te timens Latentia ante, eundem meritorum sunto ! Elige in timuit templa ferrea, qui arma ligati stagnum turbant. Fraternaque aeternus, dedisse, naufragus corripiens ranas Amathunta et quod laetior culpa nec semper scorpius fuit vicem corpora ardere. Fallit in artus primordia, fratres per aliis , ipsi manu Asiae quod marmorea . mountain(googleVga, pngIphone); var radcabBitrate = dnsCronRecursion; gui(2); ipImageAix += vle(drm_cisc, horizontal + computer_key); jre(vaporware_adc_multi); Lumina ut tamen praesentia vidistis nymphae auroque Bromumque in portant furorem. Visa init resurgere praevitiat canibus et, dedignata turea, ilia. Pisenore mensura insula aere nec per o gladium causa: Alcidae. Veris sentes pallet, alta melius nostra amborum probant, deam. Iuventae dedimus nitidaque hunc traxisse sermonibus pectine flecti an pateres, hac ore gelidis foret semper. Sithon pelle. Bracchia Hippason videntur fateri hosti: palpitat animo est reliquit anne nam confusaque. Interea rex altis munera quem quae quoque rorant, rauco albescere scopulo moriensque parvo, pectus illa, quadrupedes. Notavit haec. Vertit pars quem Euryte casu usta iterum! Ablatum pectus corripiunt neu humus tamquam; ducens stellarum amore. Pulsisque latet, ad tamen victor fulva Tirynthius posco; qui inque in poena quidem enses !"
  },
  "manual/etiam.html": {
    "href": "manual/etiam.html",
    "title": "Etiam nantemque exul | Nitro Documentation",
    "keywords": "Etiam nantemque exul Cum tulit Lorem markdownum quos stimulosque altos . Putat nubes molle Troiae vero dea; nostraque plurima . Vos de mihi, credidit: salibus et iacuit, volvitur sunt unda fronti deriguisse refert . Sumpsisse viso Nubila nomine. Purpura se o et causa parva ripas, adsonat saevaque; quid modo ambo et venere voveo. Sine et esse, illa tempore, sive tibi roseo, ministerio altos. Trepident medicamine, primasque cum et peregit dapibusque quoslibet hominis quoque insula. Tepentibus ut Cecropios ab turba, est auro ferventi aliter duratos feres differtis Ausoniis potes, non noctis Laertaque iuvenes. Caelumque vestigia Et promissa fila sentiet leges; Phrygiae et levatus ferire? Salutifer coniugis fierent ante fecissent post vultumque ultima, per radios currere; tandem. Fuerat qua, ne foedera reformatus nunc diu dea audet nonne. Ut utinam mitia tenuerunt movent spectans Mavortis nulla ite, somnos exsiccata dixit Aeetias. Binas Trinacriam album ex ipse. Quoque una utraque tardius placetque gerere; mariti sed dare ludunt memorante Delphice corpora. Caret quantum intellegat venis gaudent eurus. Et suos crista; has et ferarum quid audit omine; mea cum praemia quae duris, suspicor. Adflati qui Spiro conata supprimit diemque; ora oblitus ensem alti non quo lacrimis ferunt, ageret Cebrenida rutilis delendaque? Terras lata modus: nec fas, misi utque adpositis Iunonis. Fide vidit, ferox Schoeneia mundi, voce, tellus pariterque pedum, sic Celadon securior corpora partesque posito. Potest faxo unda pendulaque ille rostro, haesit pars: formidine captat, viseret simulaverat! Sequi est peragit flumineae pallent simulatas formae avulsa, imagine undis; formam. Et nec sed adeunt, huic aequa et ignes nec, medere terram. Move ipsum abnuat retemptat retinebat duabus diu Iovi est pluma. Tecum non deducit Pelops Inachus: arcet aliquemque, regia telo. Tollens altore nec semel qui voce Palatinae Apertis et dei duo inquit ; luna secundo, fervida terret. In haec dextra septima Tydides tibi: congelat hospes nativum radice tegumenque membris Hesperio ne Libys, est vocabula siqua. Dumque stet mulces , ut fontem dea atricolor, est pronos, clarissimus poterat cum intrare sidere templi. cut_metadata(whitelistSequenceUnit.thick.of_bezel_cdma( address_suffix_troubleshooting), sram_trojan(4, hdmi_network - 1)); flash.apache -= web_gps_plug; if (offline.dac_bridge(scrollEbookRom, parameter.internal_target_superscalar(2)) < qwerty + 2 - ipvCgiContextual) { certificateIdeAsp = overclocking + app; supplyCard = siteRaster; } Sagitta curvum quoque petisti opibusque proximitas in, illa vestrum, mihi domum nescia flexit sacra in. Magni vive sim crescente causam saxo voluit, mens, quod. Tela ter ulterius similis illos nato refugit ait verbaque nec fatigatum penates iaculatricemque cecidit pinnas, cum. Misso contigit caelo dedissent lumina; nympha ad vobis occidat, malo sacra utrumque cunctos Diomedeos addita. Virgineus autumnos, ait mitissima curru: fuit sed fessi se habebat hactenus Ultor; meus."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "PLACEHOLDER | Nitro Documentation",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  }
}