{
  "api/Nitro.Collector.html": {
    "href": "api/Nitro.Collector.html",
    "title": "Class Collector | Nitro Documentation",
    "keywords": "Class Collector Used for collecting powerups Inheritance Object Collector MultiplePowerupCollector SinglePowerupCollector Implements ICollector Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public abstract class Collector : MonoBehaviour, ICollector Fields PowerupCollectEvent An event that is triggered when a powerup is collected Declaration public UnityEvent<IPowerup> PowerupCollectEvent Field Value Type Description UnityEvent < IPowerup > Properties CollectOnContact If set to true, all powerups that collide with this object will automatically be collected Declaration public bool CollectOnContact { get; set; } Property Value Type Description Boolean CollectorEnabled If this is set to true, the collector will be able to collect powerups Declaration public bool CollectorEnabled { get; set; } Property Value Type Description Boolean Methods CanCollectPowerup(IPowerup) Whether the powerup can be collected or not Declaration public abstract bool CanCollectPowerup(IPowerup powerup) Parameters Type Name Description IPowerup powerup The powerup to test if it can be collected Returns Type Description Boolean Returns whether or not the powerup can be picked up CollectPowerup(IPowerup) Collects a powerup Declaration public bool CollectPowerup(IPowerup powerup) Parameters Type Name Description IPowerup powerup The powerup to collect Returns Type Description Boolean Returns whether the collector was able to pick up the IPowerup Execute() Executes the powerup(s) that the collector has collected Declaration public abstract void Execute() OnCollect(IPowerup) A function that is triggered when a powerup is collected Declaration protected abstract void OnCollect(IPowerup powerup) Parameters Type Name Description IPowerup powerup The powerup that has been collected OnCollisionEnter(Collision) Declaration protected virtual void OnCollisionEnter(Collision collision) Parameters Type Name Description Collision collision OnCollisionEnter2D(Collision2D) Declaration protected virtual void OnCollisionEnter2D(Collision2D collision) Parameters Type Name Description Collision2D collision OnTriggerEnter(Collider) Declaration protected virtual void OnTriggerEnter(Collider other) Parameters Type Name Description Collider other OnTriggerEnter2D(Collider2D) Declaration protected virtual void OnTriggerEnter2D(Collider2D collision) Parameters Type Name Description Collider2D collision Implements ICollector"
  },
  "api/Nitro.Collidable.html": {
    "href": "api/Nitro.Collidable.html",
    "title": "Class Collidable | Nitro Documentation",
    "keywords": "Class Collidable A component that makes it easier to keep track of objects that have collided with an object. Inheritance Object Collidable Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public sealed class Collidable : MonoBehaviour Properties Collisions Returns a list of all the collided objects Declaration public IEnumerable<Collider> Collisions { get; } Property Value Type Description IEnumerable < Collider > Events OnCollideStart Declaration public event Action<Collider> OnCollideStart Event Type Type Description Action < Collider > OnCollideStop Declaration public event Action<Collider, bool> OnCollideStop Event Type Type Description Action < Collider , Boolean >"
  },
  "api/Nitro.Collidable2D.html": {
    "href": "api/Nitro.Collidable2D.html",
    "title": "Class Collidable2D | Nitro Documentation",
    "keywords": "Class Collidable2D A component that makes it easier to keep track of objects that have collided with an object. Inheritance Object Collidable2D Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public abstract class Collidable2D : MonoBehaviour Properties CollidedBodies Returns a list of all the collided objects Declaration public IEnumerable<Collider2D> CollidedBodies { get; } Property Value Type Description IEnumerable < Collider2D > Methods LateUpdate() Declaration protected virtual void LateUpdate() OnCollideStart(Collider2D) Called when an object collides with this object. Declaration protected abstract void OnCollideStart(Collider2D Collider2D) Parameters Type Name Description Collider2D Collider2D OnCollideStop(Collider2D, Boolean) Called when an object is no longer colliding with this object. Declaration protected abstract void OnCollideStop(Collider2D Collider2D, bool destroyed) Parameters Type Name Description Collider2D Collider2D Boolean destroyed OnCollisionEnter2D(Collision2D) Declaration protected virtual void OnCollisionEnter2D(Collision2D collision) Parameters Type Name Description Collision2D collision OnCollisionExit2D(Collision2D) Declaration protected virtual void OnCollisionExit2D(Collision2D collision) Parameters Type Name Description Collision2D collision OnDestroy() Declaration protected virtual void OnDestroy() OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable() OnTriggerEnter2D(Collider2D) Declaration protected virtual void OnTriggerEnter2D(Collider2D other) Parameters Type Name Description Collider2D other OnTriggerExit2D(Collider2D) Declaration protected virtual void OnTriggerExit2D(Collider2D other) Parameters Type Name Description Collider2D other"
  },
  "api/Nitro.CombinablePowerup.Comparer.html": {
    "href": "api/Nitro.CombinablePowerup.Comparer.html",
    "title": "Class CombinablePowerup.Comparer | Nitro Documentation",
    "keywords": "Class CombinablePowerup.Comparer A comparer used for sorting combinable powerups by priority Inheritance Object CombinablePowerup.Comparer Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public class Comparer : IComparer<ICombinablePowerup> Methods Compare(ICombinablePowerup, ICombinablePowerup) Declaration public int Compare(ICombinablePowerup x, ICombinablePowerup y) Parameters Type Name Description ICombinablePowerup x ICombinablePowerup y Returns Type Description Int32"
  },
  "api/Nitro.CombinablePowerup.html": {
    "href": "api/Nitro.CombinablePowerup.html",
    "title": "Class CombinablePowerup | Nitro Documentation",
    "keywords": "Class CombinablePowerup A powerup that can have its effects combined with other powerups. When several powerups are collected via a MultiplePowerupCollector , they will form a chain that is sorted based on the Priority of the powerups. The powerups with the highest priority will be executed first, while the ones with the lowest priority will be executed last. When a powerup is executed, it will have it's function called. With the execute function, you will be able to know the previous powerup in the chain, the position and rotation of where the powerup is affecting, and a delegate called runNextPowerup, which when called, will execute the next powerup in the chain. You can use this delegate to control where and when the next powerups in the chain are executed\"/> Inheritance Object Powerup CombinablePowerup Implements ICombinablePowerup IPowerup Inherited Members Powerup.Collector Powerup.hideObjectOnCollect Powerup.HideObjectOnCollect Powerup.OnCollect(ICollector) Powerup.DoneUsingPowerupAfter(Single, Action) Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public abstract class CombinablePowerup : Powerup, ICombinablePowerup, IPowerup Fields priority Declaration protected int priority Field Value Type Description Int32 Properties Priority The priority of the powerup, which determines whether or not this powerup will get executed before others For example, if you have a fire powerup that has a higher priority than a water powerup, then the fire effect will be executed before the water effect. Declaration public int Priority { get; } Property Value Type Description Int32 Methods DoAction() The main action of the powerup Declaration public sealed override void DoAction() Overrides Powerup.DoAction() DoneUsingPowerup() Used to dispose of the powerup when done Declaration public sealed override void DoneUsingPowerup() Overrides Powerup.DoneUsingPowerup() Execute(ICombinablePowerup, Vector3, Quaternion, Action<Vector3, Quaternion>) The main action of the combinable powerup Declaration public abstract void Execute(ICombinablePowerup previous, Vector3 position, Quaternion rotation, Action<Vector3, Quaternion> runNextPowerup) Parameters Type Name Description ICombinablePowerup previous The previous powerup in the chain. If this is null, then the currently executing powerup is first in the chain Vector3 position The position of the collector the powerup is from Quaternion rotation The rotation of the collector the powerup is from Action < Vector3 , Quaternion > runNextPowerup A delegate used to execute the next powerup in the chain. Be sure to call this to make sure all the powerups in the chain get executed GetCallToNextPowerup(Int32) Creates a delegate to the next powerup in the chain. Declaration public Action<Vector3, Quaternion> GetCallToNextPowerup(int currentIndex) Parameters Type Name Description Int32 currentIndex The current index in the powerup chain. A delegate will be created that will call the next powerup Returns Type Description Action < Vector3 , Quaternion > Returns a delgate that executes the next powerup in the chain GetPowerupChain() Gets a list of all the powerups in the chain Declaration protected ReadOnlySpan<ICombinablePowerup> GetPowerupChain() Returns Type Description ReadOnlySpan < ICombinablePowerup > GetPowerupIndex() Retrieves the index of the current powerup within the powerup chain. Declaration protected int GetPowerupIndex() Returns Type Description Int32 HasPowerupInChain(Type) Checks if a certain powerup is within the powerup chain Declaration protected bool HasPowerupInChain(Type powerupType) Parameters Type Name Description Type powerupType The type of powerup to check for Returns Type Description Boolean Returns true if the powerup type is within the chain HasPowerupInChain(Type, out ICombinablePowerup) Checks if a certain powerup is within the powerup chain Declaration protected bool HasPowerupInChain(Type powerupType, out ICombinablePowerup powerup) Parameters Type Name Description Type powerupType The type of powerup to check for ICombinablePowerup powerup The resulting powerup Returns Type Description Boolean Returns true if the powerup type is within the chain HasPowerupInChain<T>() Checks if a certain powerup is within the powerup chain Declaration protected bool HasPowerupInChain<T>() Returns Type Description Boolean Returns true if the powerup type is within the chain Type Parameters Name Description T The type of powerup to check for HasPowerupInChain<T>(out T) Checks if a certain powerup is within the powerup chain Declaration protected bool HasPowerupInChain<T>(out T powerup) Parameters Type Name Description T powerup The resulting powerup Returns Type Description Boolean Returns true if the powerup type is within the chain Type Parameters Name Description T The type of powerup to check for Implements ICombinablePowerup IPowerup"
  },
  "api/Nitro.Extensions.html": {
    "href": "api/Nitro.Extensions.html",
    "title": "Class Extensions | Nitro Documentation",
    "keywords": "Class Extensions Inheritance Object Extensions Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public static class Extensions Methods GetGameObject(ICollector) Gets the this collector is attached to Declaration public static GameObject GetGameObject(this ICollector collector) Parameters Type Name Description ICollector collector Returns Type Description GameObject GetTransform(ICollector) Gets the this collector is attached to Declaration public static Transform GetTransform(this ICollector collector) Parameters Type Name Description ICollector collector Returns Type Description Transform"
  },
  "api/Nitro.GenericMath.html": {
    "href": "api/Nitro.GenericMath.html",
    "title": "Class GenericMath | Nitro Documentation",
    "keywords": "Class GenericMath Serves as a way of doing basic math operations on generic types. Inheritance Object GenericMath Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public static class GenericMath Methods Add<T>(T, T) Adds two variables together, if possible Declaration public static T Add<T>(T a, T b) Parameters Type Name Description T a The first variable T b The second variable Returns Type Description T Returns the sum of the variables Type Parameters Name Description T The type of the variables to add Div<T>(T, T) Divides two variables together, if possible Declaration public static T Div<T>(T a, T b) Parameters Type Name Description T a The first variable T b The second variable Returns Type Description T Returns the quotient of the variables Type Parameters Name Description T The type of the variables to divide HasAdd<T>() Checks if a type can be added to Declaration public static bool HasAdd<T>() Returns Type Description Boolean Returns true if the type can be added to itself Type Parameters Name Description T The type to check HasDiv<T>() Checks if a type can be divided by itself Declaration public static bool HasDiv<T>() Returns Type Description Boolean Returns true if the type can be divided by itself Type Parameters Name Description T The type to check HasMul<T>() Checks if a type can be multiplied with itself Declaration public static bool HasMul<T>() Returns Type Description Boolean Returns true if the type can be multiplied with itself Type Parameters Name Description T The type to check HasSub<T>() Checks if a type can be subtracted to Declaration public static bool HasSub<T>() Returns Type Description Boolean Returns true if the type can be subtracted from itself Type Parameters Name Description T The type to check Mul<T>(T, T) Multiplies two variables together, if possible Declaration public static T Mul<T>(T a, T b) Parameters Type Name Description T a The first variable T b The second variable Returns Type Description T Returns the product of the variables Type Parameters Name Description T The type of the variables to multiply Sub<T>(T, T) Subtracts two variables together, if possible Declaration public static T Sub<T>(T a, T b) Parameters Type Name Description T a The first variable T b The second variable Returns Type Description T Returns the difference of the variables Type Parameters Name Description T The type of the variables to subtract"
  },
  "api/Nitro.html": {
    "href": "api/Nitro.html",
    "title": "Namespace Nitro | Nitro Documentation",
    "keywords": "Namespace Nitro Classes Collector Used for collecting powerups Collidable A component that makes it easier to keep track of objects that have collided with an object. Collidable2D A component that makes it easier to keep track of objects that have collided with an object. CombinablePowerup A powerup that can have its effects combined with other powerups. When several powerups are collected via a MultiplePowerupCollector , they will form a chain that is sorted based on the Priority of the powerups. The powerups with the highest priority will be executed first, while the ones with the lowest priority will be executed last. When a powerup is executed, it will have it's function called. With the execute function, you will be able to know the previous powerup in the chain, the position and rotation of where the powerup is affecting, and a delegate called runNextPowerup, which when called, will execute the next powerup in the chain. You can use this delegate to control where and when the next powerups in the chain are executed\"/> CombinablePowerup.Comparer A comparer used for sorting combinable powerups by priority Extensions GenericMath Serves as a way of doing basic math operations on generic types. Modifier<T> Represents a modification applied to a RevertableVar<T> Modifier<T>.Sorter ModifierCollection Represents a collection of modifiers. This can be used to easily group modifiers together and revert them together as well MultiplePowerupCollector A collector that can collect multiple powerups Powerup The base class for all powerups RevertableVar<T> A variable that allows you to easily modify it's value and revert it back to it's original value SinglePowerupCollector A simple powerup collector that collects and stores a single powerup Utilities Interfaces ICollector Base interface for all collectors ICombinablePowerup The base class for all combinable powerups IModifier Base class for all modifiers IMultiplePowerupCollector The base class for a powerup collector that can collect multiple powerups IPowerup The base class for all powerups IRevertableVar Enums IModifier.Operation Delegates RevertableVar<T>.OnValueUpdatedDelegate"
  },
  "api/Nitro.ICollector.html": {
    "href": "api/Nitro.ICollector.html",
    "title": "Interface ICollector | Nitro Documentation",
    "keywords": "Interface ICollector Base interface for all collectors Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public interface ICollector Methods CanCollectPowerup(IPowerup) Checks if a powerup can be collected by this collector Declaration bool CanCollectPowerup(IPowerup powerup) Parameters Type Name Description IPowerup powerup The powerup to check Returns Type Description Boolean Returns true of the powerup can be collected CollectPowerup(IPowerup) Collects a powerup Declaration bool CollectPowerup(IPowerup powerup) Parameters Type Name Description IPowerup powerup The powerup to collect Returns Type Description Boolean Returns true if the powerup has been collected Execute() Executes the powerups that have been collected Declaration void Execute()"
  },
  "api/Nitro.ICombinablePowerup.html": {
    "href": "api/Nitro.ICombinablePowerup.html",
    "title": "Interface ICombinablePowerup | Nitro Documentation",
    "keywords": "Interface ICombinablePowerup The base class for all combinable powerups Inherited Members IPowerup.Collector IPowerup.DoAction() IPowerup.DoneUsingPowerup() IPowerup.OnCollect(ICollector) Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public interface ICombinablePowerup : IPowerup Properties Priority The priority of the powerup, which determines whether or not this powerup will get executed before others For example, if you have a fire powerup that has a higher priority than a water powerup, then the fire effect will be executed before the water effect. Declaration int Priority { get; } Property Value Type Description Int32 Methods Execute(ICombinablePowerup, Vector3, Quaternion, Action<Vector3, Quaternion>) The main action of the combinable powerup Declaration void Execute(ICombinablePowerup previous, Vector3 position, Quaternion rotation, Action<Vector3, Quaternion> runNextPowerup) Parameters Type Name Description ICombinablePowerup previous The previous powerup in the chain. If this is null, then the currently executing powerup is first in the chain Vector3 position The position of the collector the powerup is from Quaternion rotation The rotation of the collector the powerup is from Action < Vector3 , Quaternion > runNextPowerup A delegate used to execute the next powerup in the chain. Be sure to call this to make sure all the powerups in the chain get executed"
  },
  "api/Nitro.IModifier.html": {
    "href": "api/Nitro.IModifier.html",
    "title": "Interface IModifier | Nitro Documentation",
    "keywords": "Interface IModifier Base class for all modifiers Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public interface IModifier Properties BoundObject The object this modification is bound to. When this object gets destroyed, the modification gets reverted Declaration UnityEngine.Object BoundObject { get; } Property Value Type Description UnityEngine.Object HasBoundObject Returns true if this modifier is bound to a specific object Declaration bool HasBoundObject { get; } Property Value Type Description Boolean ID A number that uniquely identifies this modifier Declaration ulong ID { get; } Property Value Type Description UInt64 Op The operator of the modifier. This determines how the SourceVariable gets adjusted Declaration IModifier.Operation Op { get; } Property Value Type Description IModifier.Operation Priority The priority of the modifier. The lower the number, the sooner it will be processed before other modifiers Declaration int Priority { get; } Property Value Type Description Int32 SourceVariable The revertable variable that this modifier is a part of Declaration IRevertableVar SourceVariable { get; } Property Value Type Description IRevertableVar TimeAdded The time this modifer was created and added to a revertable variable Declaration float TimeAdded { get; } Property Value Type Description Single Value The right-hand operand of the modifier Declaration object Value { get; } Property Value Type Description Object Methods Revert() Reverts the modifier and removes it from the revertable variable it is a part of Declaration void Revert()"
  },
  "api/Nitro.IModifier.Operation.html": {
    "href": "api/Nitro.IModifier.Operation.html",
    "title": "Enum IModifier.Operation | Nitro Documentation",
    "keywords": "Enum IModifier.Operation Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public enum Operation Fields Name Description Add Divide Multiply Set Subtract"
  },
  "api/Nitro.IMultiplePowerupCollector.html": {
    "href": "api/Nitro.IMultiplePowerupCollector.html",
    "title": "Interface IMultiplePowerupCollector | Nitro Documentation",
    "keywords": "Interface IMultiplePowerupCollector The base class for a powerup collector that can collect multiple powerups Inherited Members ICollector.CanCollectPowerup(IPowerup) ICollector.CollectPowerup(IPowerup) ICollector.Execute() Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public interface IMultiplePowerupCollector : ICollector Properties CollectedPowerups A list of all collected powerups Declaration IEnumerable<ICombinablePowerup> CollectedPowerups { get; } Property Value Type Description IEnumerable < ICombinablePowerup > MaxPowerupsHeld The maximum amount of powerups this collector can hold Declaration int MaxPowerupsHeld { get; } Property Value Type Description Int32"
  },
  "api/Nitro.IPowerup.html": {
    "href": "api/Nitro.IPowerup.html",
    "title": "Interface IPowerup | Nitro Documentation",
    "keywords": "Interface IPowerup The base class for all powerups Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public interface IPowerup Properties Collector If this powerup has been collected, this is the collector that collected it Declaration ICollector Collector { get; } Property Value Type Description ICollector Methods DoAction() The main action of the powerup Declaration void DoAction() DoneUsingPowerup() Used to mark when a powerup is done executing Declaration void DoneUsingPowerup() OnCollect(ICollector) Called when the powerup has been collected by a collector Declaration void OnCollect(ICollector collector) Parameters Type Name Description ICollector collector The collector that collected the powerup"
  },
  "api/Nitro.IRevertableVar.html": {
    "href": "api/Nitro.IRevertableVar.html",
    "title": "Interface IRevertableVar | Nitro Documentation",
    "keywords": "Interface IRevertableVar Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public interface IRevertableVar Properties BaseValue The base value of the revertible variable Declaration object BaseValue { get; set; } Property Value Type Description Object ModifiersApplied How many variable modifiers are currently applied to the revertible variable Declaration int ModifiersApplied { get; } Property Value Type Description Int32 Value The current value of the revertible variable Declaration object Value { get; } Property Value Type Description Object ValueType The type of the value being held by the revertible variable Declaration Type ValueType { get; } Property Value Type Description Type Methods GetModifiers() Gets a list of all the added modifiers to this revertable variable Declaration IEnumerable<IModifier> GetModifiers() Returns Type Description IEnumerable < IModifier > Revert(IModifier) Reverts a modifier Declaration void Revert(IModifier modifier) Parameters Type Name Description IModifier modifier The modifier to revert"
  },
  "api/Nitro.Mirror.html": {
    "href": "api/Nitro.Mirror.html",
    "title": "Namespace Nitro.Mirror | Nitro Documentation",
    "keywords": "Namespace Nitro.Mirror Classes RevertableVarReaderWriter"
  },
  "api/Nitro.Mirror.RevertableVarReaderWriter.html": {
    "href": "api/Nitro.Mirror.RevertableVarReaderWriter.html",
    "title": "Class RevertableVarReaderWriter | Nitro Documentation",
    "keywords": "Class RevertableVarReaderWriter Inheritance Object RevertableVarReaderWriter Namespace : Nitro.Mirror Assembly : cs.temp.dll.dll Syntax public static class RevertableVarReaderWriter Methods SyncTest<T>(RevertableVar<T>, String, String, Int32) Declaration public static void SyncTest<T>(RevertableVar<T> revertableVar, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description RevertableVar <T> revertableVar String memberName String sourceFilePath Int32 sourceLineNumber Type Parameters Name Description T"
  },
  "api/Nitro.Modifier-1.html": {
    "href": "api/Nitro.Modifier-1.html",
    "title": "Class Modifier<T> | Nitro Documentation",
    "keywords": "Class Modifier<T> Represents a modification applied to a RevertableVar<T> Inheritance Object Modifier<T> Implements IModifier Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public sealed class Modifier<T> : IModifier Type Parameters Name Description T Constructors Modifier(IRevertableVar, Operation, T, Int32, Single, UnityEngine.Object, UInt64) Declaration public Modifier(IRevertableVar sourceVar, Operation op, T value, int priority, float timeActive, UnityEngine.Object boundObject, ulong id) Parameters Type Name Description IRevertableVar sourceVar Operation op T value Int32 priority Single timeActive UnityEngine.Object boundObject UInt64 id Properties BoundObject The object this modification is bound to. When this object gets destroyed, the modification gets reverted Declaration public UnityEngine.Object BoundObject { get; } Property Value Type Description UnityEngine.Object HasBoundObject Returns true if this modifier is bound to a specific object Declaration public bool HasBoundObject { get; } Property Value Type Description Boolean ID A number that uniquely identifies this modifier Declaration public ulong ID { get; } Property Value Type Description UInt64 Op Declaration public Operation Op { get; } Property Value Type Description Operation Priority The priority of the modifier. The lower the number, the sooner it will be processed before other modifiers Declaration public int Priority { get; } Property Value Type Description Int32 SourceVariable The revertable variable that this modifier is a part of Declaration public IRevertableVar SourceVariable { get; } Property Value Type Description IRevertableVar TimeActive Declaration public float TimeActive { get; } Property Value Type Description Single TimeAdded The time this modifer was created and added to a revertable variable Declaration public float TimeAdded { get; } Property Value Type Description Single Value The right-hand operand of the modifier Declaration public T Value { get; } Property Value Type Description T Methods Dispose() Declaration public void Dispose() Revert() Reverts the modifier and removes it from the revertable variable it is a part of Declaration public void Revert() Explicit Interface Implementations IModifier.Value The right-hand operand of the modifier Declaration object IModifier.Value { get; } Returns Type Description Object Implements IModifier"
  },
  "api/Nitro.Modifier-1.Sorter.html": {
    "href": "api/Nitro.Modifier-1.Sorter.html",
    "title": "Class Modifier<T>.Sorter | Nitro Documentation",
    "keywords": "Class Modifier<T>.Sorter Inheritance Object Modifier<T>.Sorter Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public class Sorter : IComparer<Modifier<T>> Methods Compare(Modifier<T>, Modifier<T>) Declaration public int Compare(Modifier<T> x, Modifier<T> y) Parameters Type Name Description Modifier <T> x Modifier <T> y Returns Type Description Int32"
  },
  "api/Nitro.ModifierCollection.html": {
    "href": "api/Nitro.ModifierCollection.html",
    "title": "Class ModifierCollection | Nitro Documentation",
    "keywords": "Class ModifierCollection Represents a collection of modifiers. This can be used to easily group modifiers together and revert them together as well Inheritance Object ModifierCollection Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public class ModifierCollection : ICollection<IModifier>, IReadOnlyList<IModifier>, IReadOnlyCollection<IModifier>, IEnumerable<IModifier>, ICollection, IEnumerable Properties Count Declaration public int Count { get; } Property Value Type Description Int32 IsFixedSize Declaration public bool IsFixedSize { get; } Property Value Type Description Boolean IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean IsSynchronized Declaration public bool IsSynchronized { get; } Property Value Type Description Boolean Item[Int32] Declaration public IModifier this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description IModifier SyncRoot Declaration public object SyncRoot { get; } Property Value Type Description Object Methods Add(IModifier) Adds a modifier to the collection Declaration public void Add(IModifier modifier) Parameters Type Name Description IModifier modifier The modifier to add Add(IModifier, UnityEngine.Object) Adds a modifier to the collection Declaration public void Add(IModifier modifier, UnityEngine.Object tiedObject) Parameters Type Name Description IModifier modifier The modifier to add UnityEngine.Object tiedObject If an object is specified, then this modifier will become tied to this object. You can then use RevertAllByObject(UnityEngine.Object) to revert all modifiers that are tied to that object Clear() Declaration public void Clear() Contains(IModifier) Declaration public bool Contains(IModifier item) Parameters Type Name Description IModifier item Returns Type Description Boolean Contains(Object) Declaration public bool Contains(object value) Parameters Type Name Description Object value Returns Type Description Boolean CopyTo(Array, Int32) Declaration public void CopyTo(Array array, int index) Parameters Type Name Description Array array Int32 index CopyTo(IModifier[], Int32) Declaration public void CopyTo(IModifier[] array, int arrayIndex) Parameters Type Name Description IModifier [] array Int32 arrayIndex GetEnumerator() Declaration public IEnumerator<IModifier> GetEnumerator() Returns Type Description IEnumerator < IModifier > IndexOf(IModifier) Declaration public int IndexOf(IModifier item) Parameters Type Name Description IModifier item Returns Type Description Int32 IndexOf(Object) Declaration public int IndexOf(object value) Parameters Type Name Description Object value Returns Type Description Int32 Remove(IModifier) Declaration public bool Remove(IModifier item) Parameters Type Name Description IModifier item Returns Type Description Boolean Remove(Object) Declaration public void Remove(object value) Parameters Type Name Description Object value RevertAll() Reverts all modifiers and removes them from the collection Declaration public void RevertAll() RevertAllByObject(UnityEngine.Object) Reverts all modifiers that have been tied to a specific object Declaration public void RevertAllByObject(UnityEngine.Object tiedObject) Parameters Type Name Description UnityEngine.Object tiedObject The object the modifiers are tied to RevertAllFor(IRevertableVar) Reverts all modifiers for a specific RevertableVar<T> , and removes them from the list Declaration public void RevertAllFor(IRevertableVar var) Parameters Type Name Description IRevertableVar var The revertable variable RevertAllFor<T>(RevertableVar<T>) Reverts all modifiers for a specific RevertableVar<T> , and removes them from the list Declaration public void RevertAllFor<T>(RevertableVar<T> var) Parameters Type Name Description RevertableVar <T> var The revertable variable Type Parameters Name Description T The type of variable"
  },
  "api/Nitro.MultiplePowerupCollector.html": {
    "href": "api/Nitro.MultiplePowerupCollector.html",
    "title": "Class MultiplePowerupCollector | Nitro Documentation",
    "keywords": "Class MultiplePowerupCollector A collector that can collect multiple powerups Inheritance Object Collector MultiplePowerupCollector Implements IMultiplePowerupCollector ICollector Inherited Members Collector.CollectorEnabled Collector.CollectOnContact Collector.PowerupCollectEvent Collector.CollectPowerup(IPowerup) Collector.OnTriggerEnter(Collider) Collector.OnTriggerEnter2D(Collider2D) Collector.OnCollisionEnter(Collision) Collector.OnCollisionEnter2D(Collision2D) Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public class MultiplePowerupCollector : Collector, IMultiplePowerupCollector, ICollector Fields DifferingTypesRequired Declaration public bool DifferingTypesRequired Field Value Type Description Boolean maxPowerupsHeld Declaration public int maxPowerupsHeld Field Value Type Description Int32 Properties CollectedPowerups Declaration public IEnumerable<ICombinablePowerup> CollectedPowerups { get; } Property Value Type Description IEnumerable < ICombinablePowerup > MaxPowerupsHeld Declaration public int MaxPowerupsHeld { get; } Property Value Type Description Int32 Methods CanCollectPowerup(IPowerup) Whether the powerup can be collected or not Declaration public override bool CanCollectPowerup(IPowerup powerup) Parameters Type Name Description IPowerup powerup The powerup to test if it can be collected Returns Type Description Boolean Returns whether or not the powerup can be picked up Overrides Collector.CanCollectPowerup(IPowerup) Execute() Executes the powerup(s) that the collector has collected Declaration public override void Execute() Overrides Collector.Execute() OnCollect(IPowerup) A function that is triggered when a powerup is collected Declaration protected override void OnCollect(IPowerup powerup) Parameters Type Name Description IPowerup powerup The powerup that has been collected Overrides Collector.OnCollect(IPowerup) Implements IMultiplePowerupCollector ICollector"
  },
  "api/Nitro.Powerup.html": {
    "href": "api/Nitro.Powerup.html",
    "title": "Class Powerup | Nitro Documentation",
    "keywords": "Class Powerup The base class for all powerups Inheritance Object Powerup CombinablePowerup Implements IPowerup Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public abstract class Powerup : MonoBehaviour, IPowerup Fields hideObjectOnCollect Declaration protected bool hideObjectOnCollect Field Value Type Description Boolean Properties Collector The collector that collected the powerup Declaration public ICollector Collector { get; } Property Value Type Description ICollector HideObjectOnCollect Declaration public bool HideObjectOnCollect { get; } Property Value Type Description Boolean Methods DoAction() The main action of the powerup Declaration public abstract void DoAction() DoneUsingPowerup() Used to dispose of the powerup when done Declaration public virtual void DoneUsingPowerup() DoneUsingPowerupAfter(Single, Action) Used to dispose of the powerup after a set amount of time Declaration public void DoneUsingPowerupAfter(float lifetime, Action onDone = null) Parameters Type Name Description Single lifetime How long before the powerup is destroyed Action onDone OnCollect(ICollector) Called when the powerup has been collected Declaration public virtual void OnCollect(ICollector collector) Parameters Type Name Description ICollector collector The collector that has collected the powerup Implements IPowerup"
  },
  "api/Nitro.RevertableVar-1.html": {
    "href": "api/Nitro.RevertableVar-1.html",
    "title": "Class RevertableVar<T> | Nitro Documentation",
    "keywords": "Class RevertableVar<T> A variable that allows you to easily modify it's value and revert it back to it's original value Inheritance Object RevertableVar<T> Implements IRevertableVar Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public sealed class RevertableVar<T> : IRevertableVar Type Parameters Name Description T The type of variable the RevertableVar is going to hold Constructors RevertableVar() Constructs a new revertable variable Declaration public RevertableVar() RevertableVar(T) Constructs a new revertable variable Declaration public RevertableVar(T baseValue) Parameters Type Name Description T baseValue The base value of the variable Properties BaseValue The base value of the revertable variable Declaration public T BaseValue { get; set; } Property Value Type Description T ModifiersApplied How many modifiers are currently being applied to this revertible variable Declaration public int ModifiersApplied { get; } Property Value Type Description Int32 Value The current value of the revertable variable, with all of it's modifiers applied Declaration public T Value { get; } Property Value Type Description T Methods AddBy(T, UnityEngine.Object, Int32) Applies an addition to the variable. Declaration public Modifier<T> AddBy(T value, UnityEngine.Object boundObject = null, int priority = 0) Parameters Type Name Description T value The value to add onto the variable UnityEngine.Object boundObject The object this modifier is bound to. When the bound object gets destroyed, the modifier gets reverted Int32 priority The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers Returns Type Description Modifier <T> Returns a reference to the modifier currently applied to this variable. Use Revert() to revert the modification AddBy(T, UnityEngine.Object, Int32, Single) Applies an addition to the variable. Declaration public Modifier<T> AddBy(T value, UnityEngine.Object boundObject, int priority, float timeActive) Parameters Type Name Description T value The value to add onto the variable UnityEngine.Object boundObject The object this modifier is bound to. When the bound object gets destroyed, the modifier gets reverted Int32 priority The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers Single timeActive The amount of time this modifier should remain active. Once the time is up, the modifier will be reverted Returns Type Description Modifier <T> Returns a reference to the modifier currently applied to this variable. Use Revert() to revert the modification DivideBy(T, UnityEngine.Object, Int32) Applies a division to the variable. Declaration public Modifier<T> DivideBy(T value, UnityEngine.Object boundObject = null, int priority = 0) Parameters Type Name Description T value The value to divide the variable with UnityEngine.Object boundObject The object this modifier is bound to. When the bound object gets destroyed, the modifier gets reverted Int32 priority The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers Returns Type Description Modifier <T> Returns a reference to the modifier currently applied to this variable. Use Revert() to revert the modification DivideBy(T, UnityEngine.Object, Int32, Single) Applies a division to the variable. Declaration public Modifier<T> DivideBy(T value, UnityEngine.Object boundObject, int priority, float timeActive) Parameters Type Name Description T value The value to divide the variable with UnityEngine.Object boundObject The object this modifier is bound to. When the bound object gets destroyed, the modifier gets reverted Int32 priority The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers Single timeActive The amount of time this modifier should remain active. Once the time is up, the modifier will be reverted Returns Type Description Modifier <T> Returns a reference to the modifier currently applied to this variable. Use Revert() to revert the modification Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() MultiplyBy(T, UnityEngine.Object, Int32) Applies a multiplication to the variable. Declaration public Modifier<T> MultiplyBy(T value, UnityEngine.Object boundObject = null, int priority = 0) Parameters Type Name Description T value The value to multiply the variable with UnityEngine.Object boundObject The object this modifier is bound to. When the bound object gets destroyed, the modifier gets reverted Int32 priority The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers Returns Type Description Modifier <T> Returns a reference to the modifier currently applied to this variable. Use Revert() to revert the modification MultiplyBy(T, UnityEngine.Object, Int32, Single) Applies a multiplication to the variable. Declaration public Modifier<T> MultiplyBy(T value, UnityEngine.Object boundObject, int priority, float timeActive) Parameters Type Name Description T value The value to multiply the variable with UnityEngine.Object boundObject The object this modifier is bound to. When the bound object gets destroyed, the modifier gets reverted Int32 priority The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers Single timeActive The amount of time this modifier should remain active. Once the time is up, the modifier will be reverted Returns Type Description Modifier <T> Returns a reference to the modifier currently applied to this variable. Use Revert() to revert the modification Revert(Modifier<T>) Reverts a modifier Declaration public void Revert(Modifier<T> modifier) Parameters Type Name Description Modifier <T> modifier The modifier to revert Set(T, UnityEngine.Object, Int32) Applies an subtraction to the variable. Declaration public Modifier<T> Set(T value, UnityEngine.Object boundObject = null, int priority = 0) Parameters Type Name Description T value The value to subtract from the variable UnityEngine.Object boundObject The object this modifier is bound to. When the bound object gets destroyed, the modifier gets reverted Int32 priority The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers Returns Type Description Modifier <T> Returns a reference to the modifier currently applied to this variable. Use Revert() to revert the modification Set(T, UnityEngine.Object, Int32, Single) Applies an subtraction to the variable. Declaration public Modifier<T> Set(T value, UnityEngine.Object boundObject, int priority, float timeActive) Parameters Type Name Description T value The value to subtract from the variable UnityEngine.Object boundObject The object this modifier is bound to. When the bound object gets destroyed, the modifier gets reverted Int32 priority The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers Single timeActive The amount of time this modifier should remain active. Once the time is up, the modifier will be reverted Returns Type Description Modifier <T> Returns a reference to the modifier currently applied to this variable. Use Revert() to revert the modification SubtractBy(T, UnityEngine.Object, Int32) Applies an subtraction to the variable. Declaration public Modifier<T> SubtractBy(T value, UnityEngine.Object boundObject = null, int priority = 0) Parameters Type Name Description T value The value to subtract from the variable UnityEngine.Object boundObject The object this modifier is bound to. When the bound object gets destroyed, the modifier gets reverted Int32 priority The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers Returns Type Description Modifier <T> Returns a reference to the modifier currently applied to this variable. Use Revert() to revert the modification SubtractBy(T, UnityEngine.Object, Int32, Single) Applies an subtraction to the variable. Declaration public Modifier<T> SubtractBy(T value, UnityEngine.Object boundObject, int priority, float timeActive) Parameters Type Name Description T value The value to subtract from the variable UnityEngine.Object boundObject The object this modifier is bound to. When the bound object gets destroyed, the modifier gets reverted Int32 priority The priority of the modifier. The lower the priority, the sooner it will be applied to the variable before other modifiers Single timeActive The amount of time this modifier should remain active. Once the time is up, the modifier will be reverted Returns Type Description Modifier <T> Returns a reference to the modifier currently applied to this variable. Use Revert() to revert the modification ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Events OnValueUpdated Declaration public event RevertableVar<T>.OnValueUpdatedDelegate OnValueUpdated Event Type Type Description RevertableVar.OnValueUpdatedDelegate <> Operators Equality(RevertableVar<T>, T) Declaration public static bool operator ==(RevertableVar<T> a, T b) Parameters Type Name Description RevertableVar <T> a T b Returns Type Description Boolean Equality(RevertableVar<T>, RevertableVar<T>) Declaration public static bool operator ==(RevertableVar<T> a, RevertableVar<T> b) Parameters Type Name Description RevertableVar <T> a RevertableVar <T> b Returns Type Description Boolean Implicit(T to RevertableVar<T>) Implicitly converts from a variable of type T to a revertable variable Declaration public static implicit operator RevertableVar<T>(T value) Parameters Type Name Description T value The variable Returns Type Description RevertableVar <T> Implicit(RevertableVar<T> to T) Implicitly converts from a revertable variable to the variable of type T Declaration public static implicit operator T(RevertableVar<T> v) Parameters Type Name Description RevertableVar <T> v The revertable variable Returns Type Description T Inequality(RevertableVar<T>, T) Declaration public static bool operator !=(RevertableVar<T> a, T b) Parameters Type Name Description RevertableVar <T> a T b Returns Type Description Boolean Inequality(RevertableVar<T>, RevertableVar<T>) Declaration public static bool operator !=(RevertableVar<T> a, RevertableVar<T> b) Parameters Type Name Description RevertableVar <T> a RevertableVar <T> b Returns Type Description Boolean Explicit Interface Implementations IRevertableVar.BaseValue The base value of the revertible variable Declaration object IRevertableVar.BaseValue { get; set; } Returns Type Description Object IRevertableVar.GetModifiers() Declaration IEnumerable<IModifier> IRevertableVar.GetModifiers() Returns Type Description IEnumerable < IModifier > IRevertableVar.ModifiersApplied How many variable modifiers are currently applied to the revertible variable Declaration int IRevertableVar.ModifiersApplied { get; } Returns Type Description Int32 IRevertableVar.Revert(IModifier) Declaration void IRevertableVar.Revert(IModifier modifier) Parameters Type Name Description IModifier modifier IRevertableVar.Value The current value of the revertible variable Declaration object IRevertableVar.Value { get; } Returns Type Description Object IRevertableVar.ValueType The type of the value being held by the revertible variable Declaration Type IRevertableVar.ValueType { get; } Returns Type Description Type Implements IRevertableVar"
  },
  "api/Nitro.RevertableVar-1.OnValueUpdatedDelegate.html": {
    "href": "api/Nitro.RevertableVar-1.OnValueUpdatedDelegate.html",
    "title": "Delegate RevertableVar<T>.OnValueUpdatedDelegate | Nitro Documentation",
    "keywords": "Delegate RevertableVar<T>.OnValueUpdatedDelegate Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public delegate void OnValueUpdatedDelegate(T oldValue, T newValue); Parameters Type Name Description T oldValue T newValue"
  },
  "api/Nitro.SinglePowerupCollector.html": {
    "href": "api/Nitro.SinglePowerupCollector.html",
    "title": "Class SinglePowerupCollector | Nitro Documentation",
    "keywords": "Class SinglePowerupCollector A simple powerup collector that collects and stores a single powerup Inheritance Object Collector SinglePowerupCollector Implements ICollector Inherited Members Collector.CollectorEnabled Collector.CollectOnContact Collector.PowerupCollectEvent Collector.CollectPowerup(IPowerup) Collector.OnTriggerEnter(Collider) Collector.OnTriggerEnter2D(Collider2D) Collector.OnCollisionEnter(Collision) Collector.OnCollisionEnter2D(Collision2D) Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public class SinglePowerupCollector : Collector, ICollector Properties CurrentPowerup The currently collected powerup Declaration public IPowerup CurrentPowerup { get; } Property Value Type Description IPowerup Methods CanCollectPowerup(IPowerup) Whether the powerup can be collected or not Declaration public override bool CanCollectPowerup(IPowerup powerup) Parameters Type Name Description IPowerup powerup The powerup to test if it can be collected Returns Type Description Boolean Returns whether or not the powerup can be picked up Overrides Collector.CanCollectPowerup(IPowerup) Execute() Executes the powerup(s) that the collector has collected Declaration public override void Execute() Overrides Collector.Execute() OnCollect(IPowerup) A function that is triggered when a powerup is collected Declaration protected override void OnCollect(IPowerup powerup) Parameters Type Name Description IPowerup powerup The powerup that has been collected Overrides Collector.OnCollect(IPowerup) RemovePowerup() Removes the CurrentPowerup Declaration public void RemovePowerup() Implements ICollector"
  },
  "api/Nitro.Utilities.html": {
    "href": "api/Nitro.Utilities.html",
    "title": "Class Utilities | Nitro Documentation",
    "keywords": "Class Utilities Inheritance Object Utilities Namespace : Nitro Assembly : cs.temp.dll.dll Syntax public static class Utilities Methods CalculatePlacement(Int32) Declaration public static string CalculatePlacement(int position) Parameters Type Name Description Int32 position Returns Type Description String Prettify(String) Makes a string look nicer (example: converts \"thisIsATest123\" to \"This is a test 123\" Declaration public static string Prettify(string input) Parameters Type Name Description String input The input string Returns Type Description String The prettified string"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to Nitro | Nitro Documentation",
    "keywords": "Welcome to Nitro Click here to get started Click here to download the latest release"
  },
  "manual/collidables_and_hazards.html": {
    "href": "manual/collidables_and_hazards.html",
    "title": "| Nitro Documentation",
    "keywords": "The Collidable and Collidable2D components make it very easy to create hazards such as oil slicks or water puddles that can slow down drivers. When you derive from either one of these classes, you can override the OnCollideStart and OnCollideStop functions to detect when the player has touched and untouched the hazard. These components can be attached to any gameobject and they will start keeping track of collisions on the object. In order to tap into this collision data, you can override the OnCollideStart and the OnCollideStop events. OnCollideStart is called whenever the gameObject collides with something, while the OnCollideStop is called anytime the gameObject stops colliding with something. You can also use a ModifierCollection to easily keep track of all the modifications that have been made using Nitro; using UnityEngine; public class OilSlick : MonoBehaviour { //Used to easily store all the modifiers currently applied ModifierCollection modifiers = new ModifierCollection(); private void Awake() { //Get the attached Collidable component and hook into the OnCollideStart and OnCollidedStop events var collidable = GetComponent<Collidable>(); collidable.OnCollideStart += OnCollideStart; collidable.OnCollideStop += OnCollideStop; } //Called when this object comes in contact with another collider private void OnCollideStop(Collider collider, bool destroyed) { //Revert any modifiers that are bound to the collider modifiers.RevertAllByObject(collider); } //Called when this object is no longer in contact with another collider private void OnCollideStart(Collider collider) { //If the collider is a player object if (collider.attachedRigidbody.TryGetComponent<RollCage>(out var rc)) { //Modify the player's terminal velocity, and store the modifier in the ModifierCollection //The modifier is also tied to the player's collider ↓↓↓↓↓↓ so it can be easily reverted later modifiers.Add(rc.Car.Manager.CarDrag.MultiplyBy(2f),collider); } } } The reason you would use the Collidable class over traditional methods of detecting collision is because the Collidable class keeps track of the what it has collided with. And because of this, it will automatically call OnCollideStop whenever the component gets disabled or destroyed, or when a collider gets destroyed while colliding with it. This guarantees that anything done to a collider done in OnCollideStart will be undone in OnCollideStop Here is the Collidable class in action. An object called \"Puddle\" is placed in the world and has a Puddle and Collidable component attached The puddle will cut the player's terminal velocity in half, and restore it when the puddle is no longer in contact with the player."
  },
  "manual/combinable_powerups.html": {
    "href": "manual/combinable_powerups.html",
    "title": "Manual control | Nitro Documentation",
    "keywords": "Combinable Powerups are powerups that can be combined with other powerups to produce new effects. The main way Nitro is able to accomplish this is via a powerup priority system. Every Combinable Powerup has a set priority which determines the order the powerups will execute. For example, lets say you collect a fire powerup, a water powerup, and an electric powerup, and the priorities of each of the powerups are the following: Priorities: Fire Powerup : 1 Water Powerup : 2 Electric Powerup : 5 Since the Electric Powerup has the highest priority, that means when you go to execute the powerups, the electric powerup will execute first. Then, the electric powerup will trigger the water powerup to run, which is second in the chain. And finally, the water powerup will trigger the fire powerup to run, which is last in the chain. If the player was to collect a fire powerup and a water powerup, the water powerup will execute first, which is to spawn a puddle at the player's location. Snippet from WaterPowerup.cs /// <summary> /// The main action of the combinable powerup /// </summary> /// <param name=\"previous\">The previous powerup in the chain. If this is null, then the currently executing powerup is first in the chain</param> /// <param name=\"position\">The position of the collector the powerup is from</param> /// <param name=\"rotation\">The rotation of the collector the powerup is from</param> /// <param name=\"runNextPowerup\">A delegate used to execute the next powerup in the chain. Be sure to call this to make sure all the powerups in the chain get executed</param> public override void Execute(CombinablePowerup previous, Vector3 position, Quaternion rotation, Action<Vector3, Quaternion> runNextPowerup) { //If this powerup is the first in the powerup chain if (previous == null) { //Spawn a large puddle SpawnPuddle(largePuddleSize, position); } else { //Spawn a small puddle SpawnPuddle(smallPuddleSize, position); } //Trigger the next powerup in the powerup chain. You can tell it to execute at a certain position and rotation runNextPowerup(position, rotation); //Signal that this powerup is done with its execution DoneUsingPowerup(); } Then, the water powerup will trigger the next powerup in the chain via runNextPowerup, which in this case is the fire powerup. This powerup will spawn a circle of fire on top of the water puddle Snippet from FirePowerup.cs /// <summary> /// The main action of the combinable powerup /// </summary> /// <param name=\"previous\">The previous powerup in the chain. If this is null, then the currently executing powerup is first in the chain</param> /// <param name=\"position\">The position of the collector the powerup is from</param> /// <param name=\"rotation\">The rotation of the collector the powerup is from</param> /// <param name=\"runNextPowerup\">A delegate used to execute the next powerup in the chain. Be sure to call this to make sure all the powerups in the chain get executed</param> public override void Execute(CombinablePowerup previous, Vector3 position, Quaternion rotation, Action<Vector3, Quaternion> runNextPowerup) { //If this is the first powerup in the chain if (previous == null) { //Spawn a fireball DoFireball(position, rotation); } //If this powerup isn't the first in the powerup chain else { //Spawn a circular pit of flames DoFirepit(position); } //Trigger the next powerup in the chain to run runNextPowerup(position, rotation); //Signal that this powerup is done with its execution DoneUsingPowerup(); } The end result is a combined effect where both a puddle and fire particles are placed. NOTE : If you want to be able to collect, store, and execute multiple powerups, you will need to use a Multiple Powerup Collector Component, rather than a Single Powerup Collector Component Final Result However, if I were to swap the priorities of the water powerup and the fire powerup, an entirely new powerup combination is done. Since the Fire powerup now has a higher priority, it will be its first to execute, which is to spawn a fireball. Then, the fire powerup will trigger the water powerup to run, which is to spawn a puddle. The final result is a fireball that will spawn a trail of puddles as it travels in a straight line. The fireball will be destroyed either when it hits something or after a set lifetime. Manual control If you want more manual control over how your powerups combine with each other (like making a smoke effect when water and fire is combined), you can use the HasPowerupInChain function to check if a certain powerup type is in the powerup chain. You can then use this to cause the powerup do so something different depending on what powerups are in the list. public override void Execute(CombinablePowerup previous, Vector3 position, Quaternion rotation, Action<Vector3, Quaternion> runNextPowerup) { if (HasPowerupInChain<WaterPowerup>() && HasPowerupInChain<FirePowerup>()) { //...Do combo that is specific to fire and water } else { //...Do general combo of the powerups runNextPowerup(position, rotation); } } Other functions to look at include: GetPowerupChain gets all the powerups currently in the powerup chain GetPowerupIndex gets the current powerup's index in the powerup chain. This can be used in conjunction with GetPowerupChain"
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "PLACEHOLDER | Nitro Documentation",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "manual/quickstart.html": {
    "href": "manual/quickstart.html",
    "title": "| Nitro Documentation",
    "keywords": "Here is a quick start guide with setting up a simple powerup system - Step 1 : Create a powerup The first thing you want to do is create a powerup for you game, whether it be a boost powerup for making your car go faster, or an attack powerup for making your soldier attack twice as fast. For this example, we will just create a simple powerup that displays a message to the console: using Nitro; using UnityEngine; public class SimplePowerup : Powerup { public override void DoAction() { Debug.Log(\"Powerup Executed!\"); } } With this script now created, create a new object in the hierarchy and add the SimplePowerup component to the object. There should also be a collider object, like a box collider, to allow other objects to pick it up. - Step 2 : Create a collector Now we need a Collector that will collect the powerup. To do that, add a new object called \"Player\" and that object will contain a component called SinglePowerupCollector . Make sure the player also has a collider and rigidbody attached so that it can automatically collect the powerup when it collides with it. How the player moves around to collect the powerup is up to you. In this example, a script called \" CarMovement \" is used to move the player around using the arrow keys - Step 3 : A way of executing the powerup The last thing that is needed is a way of executing the powerup. For this example, we will create a new script so that when the \"P\" key is pressed, the powerup will be executed: using Nitro; using UnityEngine; public class PowerupExecuter : MonoBehaviour { SinglePowerupCollector collector; private void Awake() { collector = GetComponent<SinglePowerupCollector>(); } private void Update() { if (Input.GetKeyDown(KeyCode.P)) { collector.Execute(); } } } Now you can add this script to the player and you are good to go. When the player collides with the powerup, the SinglePowerupCollector component on the player will automatically pick up the powerup. Then, when you press the \"P\" key, the powerup is then executed"
  },
  "manual/revertable_variables.html": {
    "href": "manual/revertable_variables.html",
    "title": "| Nitro Documentation",
    "keywords": "Revertable Variables are special variables that can be easily modified and reverted back to a previous state. When added to a MonoBehaviour script, they will automatically appear in the inspector (assuming they are public or are marked with SerializeField ) public class Movement : MonoBehaviour { [SerializeField] RevertableVar<float> TerminalVelocity = 10f; ... } What makes Revertable Variables special compared to normal variables is because: Multiple different sources are able to modify the variable, and revert their modifications so the variable gets reset to its base state Modifications can be bound to specific objects, so when said specific object gets destroyed, the modification gets automatically reverted You can mark modifications with a certain priority so that they will be applied before other modifications. For example, lets say you touch a puddle, and the puddle decreases the terminal velocity by half, with a modification priority of 10. Then, at the same time, you execute a boost powerup that doubles the terminal velocity of your car, with a modification priority of 20. Because the boost powerup has a modification priority higher than the puddle, the boost powerup's modification will be applied sooner than the puddle's. An example of where revertable variables are used can be found in the Player script And examples of scripts that modify the nitro variables can be found in the Puddle Script and the Fire Particles Script"
  }
}